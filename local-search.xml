<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vuex学习笔记</title>
    <link href="/2021/08/22/Vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/22/Vuex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>笔记参考文档：<a href="https://next.vuex.vuejs.org/zh/guide/">https://next.vuex.vuejs.org/zh/guide/</a></p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="1-什么是vuex"><a href="#1-什么是vuex" class="headerlink" title="1.什么是vuex"></a>1.什么是vuex</h2><p>概念：专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。  </p><h2 id="2-什么时候使用-Vuex"><a href="#2-什么时候使用-Vuex" class="headerlink" title="2.什么时候使用 Vuex"></a>2.什么时候使用 Vuex</h2><ol><li><p>多个组件依赖于同一状态</p></li><li><p>来自不同组件的行为需要变更同一状态  </p></li></ol><h2 id="3-Vuex工作原理"><a href="#3-Vuex工作原理" class="headerlink" title="3.Vuex工作原理"></a>3.Vuex工作原理</h2><p><img src="https://next.vuex.vuejs.org/vuex.png" alt="vuex"></p><h2 id="4-vuex安装与导入"><a href="#4-vuex安装与导入" class="headerlink" title="4.vuex安装与导入"></a>4.vuex安装与导入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add vuex@next <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">// 创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  state () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.count++<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> app = createApp(App)<br><br><span class="hljs-comment">// 将 store 实例作为插件安装</span><br>app.use(store).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p>单文件来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index.js&#x27;</span><br><br>createApp(App).use(store).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 准备actions 用于响应组件中的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;;<br><span class="hljs-comment">// 准备mutations 用于操作数据(state)</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;;<br><span class="hljs-comment">// 准备state 用于存储数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;;<br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    actions,<br>    mutations,<br>    <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><h2 id="5-vuex小案例"><a href="#5-vuex小案例" class="headerlink" title="5. vuex小案例"></a>5. vuex小案例</h2><ol><li><p>安装，导入vuex，创建store实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">actions</span>: &#123;&#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>    <span class="hljs-attr">state</span>: &#123;&#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>然后在 <code>main.js</code> 中引入导出的 <code>store</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index.js&#x27;</span><br><br>createApp(App).use(store).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>在组件中使用store，首先得从 <code>vuex</code> 中导入 <code>useStore</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> store = useStore();<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里准备了一个<code>count.vue</code> 组件，目的是实现自定义加减。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;当前求和为 &lt;/h1&gt;<br>  &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;<br>  &lt;button @click=&quot;subtract&quot;&gt;-&lt;/button&gt;<br>  &lt;button @click=&quot;addOdd&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>  &lt;button @click=&quot;addWait&quot;&gt;等等再加&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>开始实现功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">//count.vue<br>&lt;script&gt;<br>import &#123; ref,computed &#125; from &quot;vue&quot;;<br>import &#123; useStore &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    const store = useStore();<br><br>    let n = ref(1);<br><br>    function add() &#123;<br>      // dispatch会触发action函数 第二个参数n.value可以传值<br>      store.dispatch(&#x27;add&#x27;,n.value); // ① dispatch<br>    &#125;<br><br>    // 注意这里sum是通过computed<br>    return &#123; n, add, sum:computed(()=&gt;&#123;<br>        return store.state.sum;<br>    &#125;)&#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">context,value</span>)</span>&#123; <span class="hljs-comment">// ②被触发的action</span><br>            context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>,value) <span class="hljs-comment">//③ commit</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br><br>        <span class="hljs-function"><span class="hljs-title">ADD</span>(<span class="hljs-params">state,value</span>)</span>&#123; <span class="hljs-comment">// ④被触发的mutation</span><br>            state.sum+=value;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">sum</span>:<span class="hljs-number">0</span>&#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure></li><li><p>最终加上一个减法的功能，另外“等等再加”和“奇数再加”只需要触发即可，不需要再次额外定义函数了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs vue">//count.vue<br>&lt;template&gt;<br>  &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>  &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;<br>  &lt;button @click=&quot;subtract&quot;&gt;-&lt;/button&gt;<br>  &lt;button @click=&quot;addOdd&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>  &lt;button @click=&quot;addWait&quot;&gt;等等再加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, computed &#125; from &quot;vue&quot;;<br>import &#123; useStore &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    const store = useStore();<br><br>    let n = ref(1);<br><br>    function add() &#123;<br>      // dispatch会触发action函数 第二个参数n.value可以传值<br>      store.dispatch(&quot;add&quot;, n.value); // ① dispatch<br>    &#125;<br><br>    function subtract() &#123;<br>      store.dispatch(&quot;subtract&quot;, n.value);<br>    &#125;<br><br>    function addOdd() &#123;<br>      if (store.state.sum % 2) &#123;<br>        store.dispatch(&quot;add&quot;, n.value);<br>      &#125;<br>    &#125;<br><br>    function addWait() &#123;<br>      setTimeout(() =&gt; &#123;<br>        store.dispatch(&quot;add&quot;, n.value);<br>      &#125;, 500);<br>    &#125;<br>    // 注意这里sum是通过computed<br>    return &#123;<br>      n,<br>      add,<br>      subtract,<br>      addOdd,<br>      addWait,<br>      sum: computed(() =&gt; &#123;<br>        return store.state.sum;<br>      &#125;),<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">context,value</span>)</span>&#123; <span class="hljs-comment">// ②被触发的action</span><br>            context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>,value) <span class="hljs-comment">//③ commit</span><br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">subtract</span>(<span class="hljs-params">context,value</span>)</span>&#123;<br>            context.commit(<span class="hljs-string">&#x27;SUBTRACT&#x27;</span>,value);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br><br>        <span class="hljs-function"><span class="hljs-title">ADD</span>(<span class="hljs-params">state,value</span>)</span>&#123; <span class="hljs-comment">// ④被触发的mutation</span><br>            state.sum+=value;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">SUBTRACT</span>(<span class="hljs-params">state,value</span>)</span>&#123;<br>            state.sum-= value;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123;<span class="hljs-attr">sum</span>:<span class="hljs-number">0</span>&#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><blockquote><p>最终效果：</p></blockquote></li></ol><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108291505497.gif" alt="最终效果"></p><ol start="5"><li><p>一点优化：</p><p>add和subtract的action没有任何逻辑，因此可以直接commit触发mutation。</p><p>addOdd和addWait的业务逻辑写在actions中比较合适。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// dispatch会触发action函数 第二个参数n.value可以传值</span><br>  store.commit(<span class="hljs-string">&quot;ADD&quot;</span>, n.value); <span class="hljs-comment">// ① dispatch</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subtract</span>(<span class="hljs-params"></span>) </span>&#123;<br>  store.commit(<span class="hljs-string">&quot;SUBTRACT&quot;</span>, n.value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addOdd</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (store.state.sum % <span class="hljs-number">2</span>) &#123;<br>    store.dispatch(<span class="hljs-string">&quot;addOdd&quot;</span>, n.value);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addWait</span>(<span class="hljs-params"></span>) </span>&#123;<br>  store.dispatch(<span class="hljs-string">&quot;addWait&quot;</span>, n.value);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后add、addOdd、addWait都是调用<code>ADD</code>的mutation。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-attr">ctions</span>: &#123;<br>    <span class="hljs-comment">// add(context, value) &#123; // ②被触发的action</span><br>    <span class="hljs-comment">//     context.commit(&#x27;ADD&#x27;, value) //③ commit</span><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-comment">// subtract(context, value) &#123;</span><br>    <span class="hljs-comment">//     context.commit(&#x27;SUBTRACT&#x27;, value);</span><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-function"><span class="hljs-title">addOdd</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>        <span class="hljs-comment">// 注意这里是 context.state</span><br>        <span class="hljs-keyword">if</span> (context.state.sum % <span class="hljs-number">2</span>) &#123;<br>            context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value) <br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">addWait</span>(<span class="hljs-params">context,value</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value) <br>        &#125;, <span class="hljs-number">500</span>);<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><blockquote><p>NOTE: 如果setup中不提供sum这个state，页面中也可以直接获取到它。但是通过computed属性来返回，就不用写<code>$store.state</code> 这个前缀了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;h1&gt;当前求和为&#123;&#123; $store.state.sum &#125;&#125;&lt;/h1&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-多组件vuex小案例"><a href="#6-多组件vuex小案例" class="headerlink" title="6.多组件vuex小案例"></a>6.多组件vuex小案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">addOdd</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>            <span class="hljs-comment">// 注意这里是 context.state</span><br>            <span class="hljs-keyword">if</span> (context.state.sum % <span class="hljs-number">2</span>) &#123;<br>                context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value) <span class="hljs-comment">//③ commit</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">addWait</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value)<br>            &#125;, <span class="hljs-number">500</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br><br>        <span class="hljs-function"><span class="hljs-title">ADD</span>(<span class="hljs-params">state, value</span>)</span> &#123; <span class="hljs-comment">// ④被触发的mutation</span><br>            state.sum += value;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">SUBTRACT</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>            state.sum -= value;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">ADD_PERSON</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>            state.peopleList.push(value);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">peopleList</span>: [<br>            &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alex&#x27;</span> &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-comment">// getters用于加工state中的数据</span><br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">sumTimesTen</span>(<span class="hljs-params">state</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">//people.vue<br>&lt;template&gt;<br>  &lt;h1&gt;人员列表&lt;/h1&gt;<br>  &lt;h3&gt;Count组件的总和 &#123;&#123;sum&#125;&#125;&lt;/h3&gt;<br>  &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;/&gt;<br>  &lt;button @click=&#x27;addPerson&#x27;&gt;添加&lt;/button&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&#x27;p in peopleList&#x27; :key=&#x27;p.id&#x27;&gt;&#123;&#123;p.name&#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;nanoid&#125; from &#x27;nanoid&#x27;;<br>export default &#123;<br>    data()&#123;<br>        return &#123;name:&#x27;&#x27;&#125;<br>    &#125;,<br>    computed:&#123;<br>        peopleList()&#123;<br>            return this.$store.state.peopleList;<br>        &#125;,<br>        sum()&#123;<br>            return this.$store.state.sum;<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br>       addPerson()&#123;<br>            const person = &#123;id:nanoid(),name:this.name&#125;;<br>            this.$store.commit(&#x27;ADD_PERSON&#x27;,person);<br>       &#125;<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">//count.vue<br>&lt;template&gt;<br>  &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>  &lt;h3&gt;当前求和放大10倍&#123;&#123; sumTimesTen &#125;&#125;&lt;/h3&gt;<br>  &lt;h3&gt;Person组件的总人数是&#123;&#123; peopleList.length &#125;&#125;&lt;/h3&gt;<br>  &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;button @click=&quot;add(n)&quot;&gt;+&lt;/button&gt;<br>  &lt;button @click=&quot;subtract(n)&quot;&gt;-&lt;/button&gt;<br>  &lt;button @click=&quot;addOdd(n)&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>  &lt;button @click=&quot;addWait(n)&quot;&gt;等等再加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123; n: 1 &#125;;<br>  &#125;,<br>  computed: &#123;<br>    ...mapState([&quot;sum&quot;, &quot;peopleList&quot;]),<br>    ...mapGetters([&quot;sumTimesTen&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    // 由于需要传参，此时的参数通过模板来传递<br>    ...mapMutations(&#123;<br>      add: &quot;ADD&quot;,<br>      subtract: &quot;SUBTRACT&quot;,<br>    &#125;),<br>    ...mapActions([&quot;addOdd&quot;, &quot;addWait&quot;]),<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>button &#123;<br>  margin: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108292157773.png" alt="image-20210829215744695"></p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="mapXXX"><a href="#mapXXX" class="headerlink" title="mapXXX"></a>mapXXX</h2><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>ps：实在无法用组合式api写下去了这个了。</p><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性。</p><ol><li>对象写法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: mapState(&#123;<br>    <span class="hljs-comment">// 写法一：箭头函数可使代码更简练</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.count,<br><br>    <span class="hljs-comment">// 写法二：传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span><br>    <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>数组写法</li></ol><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: mapState([<br>  <span class="hljs-comment">// 映射 this.count 为 store.state.count</span><br>  <span class="hljs-string">&#x27;count&#x27;</span><br>])<br></code></pre></td></tr></table></figure><p><strong><code>mapState</code> 函数返回的是一个对象。</strong>我们如何将它与局部计算属性混合使用呢？使用从有了<a href="https://github.com/tc39/proposal-object-rest-spread">对象展开运算符</a>，我们可以极大地简化写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将此对象混入到外部对象中</span><br>  ...mapState(&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mapGetter"><a href="#mapGetter" class="headerlink" title="mapGetter"></a>mapGetter</h3><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...mapGetters([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">...mapGetters(&#123;<br>  // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`<br><span class="hljs-title">  doneCount:</span> &#x27;doneTodosCount&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">import &#123; mapMutations &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>export default &#123;<br>  <span class="hljs-regexp">//</span> ...<br>  methods: &#123;<br>    ...mapMutations([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-regexp">//</span> 将 `this.increment()` 映射为 `this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br><br>      <span class="hljs-regexp">//</span> `mapMutations` 也支持载荷：<br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.incrementBy(amount)` 映射为 `this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&#x27;incrementBy&#x27;</span>, amount)`<br>    ]),<br>    ...mapMutations(&#123;<br>      add: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.add()` 映射为 `this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面的count小案例，经过改造如下：注意此时的传参是通过模板来传递的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>    &lt;h3&gt;当前求和放大10倍&#123;&#123; sumTimesTen &#125;&#125;&lt;/h3&gt;<br>    &lt;h3&gt;姓名：&#123;&#123; name &#125;&#125; 性别：&#123;&#123; gender &#125;&#125;&lt;/h3&gt;<br>    &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;button @click=&quot;add(n)&quot;&gt;+&lt;/button&gt;<br>    &lt;button @click=&quot;subtract(n)&quot;&gt;-&lt;/button&gt;<br>    &lt;button @click=&quot;addOdd&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>    &lt;button @click=&quot;addWait&quot;&gt;等等再加&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, computed &#125; from &quot;vue&quot;;<br>import &#123; useStore, mapState,mapGetters ,mapMutations&#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    const store = useStore();<br><br>    let n = ref(1);<br><br>    function addOdd() &#123;<br>      if (store.state.sum % 2) &#123;<br>        store.dispatch(&quot;addOdd&quot;, n.value);<br>      &#125;<br>    &#125;<br><br>    function addWait() &#123;<br>      store.dispatch(&quot;addWait&quot;, n.value);<br>    &#125;<br><br>    // 注意这里sum是通过computed<br>    return &#123;<br>      n,<br>      addOdd,<br>      addWait,<br>    &#125;;<br>  &#125;,<br>  // 用组合式api实在写不下去了<br>  computed: &#123;<br>    <br>    ...mapState([&quot;sum&quot;, &quot;name&quot;, &quot;gender&quot;]),<br>    ...mapGetters([&#x27;sumTimesTen&#x27;])<br>  &#125;,<br>  methods:&#123;<br>    /* add()&#123;<br>      this.$store.commit(&quot;ADD&quot;, n.value);<br>    &#125;,<br>    subtract()&#123;<br>      this.$store.commit(&#x27;SUBTRACT&#x27;)<br>    &#125;, */<br>    ...mapMutations(&#123;<br>      // 由于需要传参，此时的参数通过模板来传递<br>      add:&#x27;ADD&#x27;,subtract:&#x27;SUBTRACT&#x27;,<br>    &#125;)<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><p>你在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action，或者使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 <code>store</code>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">methods</span>: &#123;<br>    ...mapActions([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br><br>      <span class="hljs-comment">// `mapActions` 也支持载荷：</span><br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span><br>    ]),<br>    ...mapActions(&#123;<br>      <span class="hljs-attr">add</span>: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面的小案例最终改造结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>    &lt;h3&gt;当前求和放大10倍&#123;&#123; sumTimesTen &#125;&#125;&lt;/h3&gt;<br>    &lt;h3&gt;姓名：&#123;&#123; name &#125;&#125; 性别：&#123;&#123; gender &#125;&#125;&lt;/h3&gt;<br>    &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;button @click=&quot;add(n)&quot;&gt;+&lt;/button&gt;<br>    &lt;button @click=&quot;subtract(n)&quot;&gt;-&lt;/button&gt;<br>    &lt;button @click=&quot;addOdd(n)&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>    &lt;button @click=&quot;addWait(n)&quot;&gt;等等再加&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState, mapGetters, mapMutations, mapActions &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123; n: 1 &#125;;<br>  &#125;,<br>  computed: &#123;<br>    ...mapState([&quot;sum&quot;, &quot;name&quot;, &quot;gender&quot;]),<br>    ...mapGetters([&quot;sumTimesTen&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    // 由于需要传参，此时的参数通过模板来传递<br>    ...mapMutations(&#123;<br>      add: &quot;ADD&quot;,<br>      subtract: &quot;SUBTRACT&quot;,<br>    &#125;),<br>    ...mapActions([&quot;addOdd&quot;, &quot;addWait&quot;]),<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>有时候我们需要从 store 中的 state 中派生出一些状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">//count.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>    &lt;h3&gt;当前求和放大10倍&#123;&#123; sumTimesTen &#125;&#125;&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, computed &#125; from &quot;vue&quot;;<br>import &#123; useStore &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  setup() &#123;<br>    return &#123;<br>      sum: computed(() =&gt; &#123;<br>        return store.state.sum;<br>      &#125;),<br>      sumTimesTen: computed(() =&gt; &#123;<br>        return store.getters.sumTimesTen;<br>      &#125;),<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span> &#125;,<br>    <span class="hljs-comment">// getters用于加工state中的数据</span><br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">sumTimesTen</span>(<span class="hljs-params">state</span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> state.sum*<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">a</span>: moduleA,<br>    <span class="hljs-attr">b</span>: moduleB<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。(state仅仅只指自己的state)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      <span class="hljs-comment">// 这里的 `state` 对象是模块的局部状态</span><br>      state.count++<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-attr">getters</span>: &#123;<br>    doubleCount (state) &#123;<br>      <span class="hljs-keyword">return</span> state.count * <span class="hljs-number">2</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>默认情况下，模块内部的 action 和 mutation 仍然是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一个 action 或 mutation 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">account</span>: &#123;<br>      <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br><br>      <span class="hljs-comment">// 模块内容（module assets）</span><br>      <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; ... &#125;), <span class="hljs-comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span><br>      <span class="hljs-attr">getters</span>: &#123;<br>        isAdmin () &#123; ... &#125; <span class="hljs-comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span><br>      &#125;,<br>      <span class="hljs-attr">actions</span>: &#123;<br>        login () &#123; ... &#125; <span class="hljs-comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span><br>      &#125;,<br>      <span class="hljs-attr">mutations</span>: &#123;<br>        login () &#123; ... &#125; <span class="hljs-comment">// -&gt; commit(&#x27;account/login&#x27;)</span><br>      &#125;,<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>启用了命名空间的 getter 和 action 会收到局部化的 <code>getter</code>，<code>dispatch</code> 和 <code>commit</code>。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。</p><h4 id="在带命名空间的模块内访问全局内容"><a href="#在带命名空间的模块内访问全局内容" class="headerlink" title="在带命名空间的模块内访问全局内容"></a>在带命名空间的模块内访问全局内容</h4><p>如果你希望使用全局 state 和 getter，<code>rootState</code> 和 <code>rootGetters</code> 会作为第三和第四参数传入 getter，也会通过 <code>context</code> 对象的属性传入 action。</p><p>若需要在全局命名空间内分发 action 或提交 mutation，将 <code>&#123; root: true &#125;</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">modules: &#123;<br>  <span class="hljs-attr">foo</span>: &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">getters</span>: &#123;<br>      <span class="hljs-comment">// 在这个模块的 getter 中，`getters` 被局部化了</span><br>      <span class="hljs-comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span><br>      someGetter (state, getters, rootState, rootGetters) &#123;<br>        getters.someOtherGetter <span class="hljs-comment">// -&gt; &#x27;foo/someOtherGetter&#x27;</span><br>        rootGetters.someOtherGetter <span class="hljs-comment">// -&gt; &#x27;someOtherGetter&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">someOtherGetter</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123; ... &#125;<br>    &#125;,<br><br>    <span class="hljs-attr">actions</span>: &#123;<br>      <span class="hljs-comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span><br>      <span class="hljs-comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span><br>      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;<br>        getters.someGetter <span class="hljs-comment">// -&gt; &#x27;foo/someGetter&#x27;</span><br>        rootGetters.someGetter <span class="hljs-comment">// -&gt; &#x27;someGetter&#x27;</span><br><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>) <span class="hljs-comment">// -&gt; &#x27;foo/someOtherAction&#x27;</span><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>, <span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// -&gt; &#x27;someOtherAction&#x27;</span><br><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>) <span class="hljs-comment">// -&gt; &#x27;foo/someMutation&#x27;</span><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>, <span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// -&gt; &#x27;someMutation&#x27;</span><br>      &#125;,<br>      someOtherAction (ctx, payload) &#123; ... &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="带命名空间的绑定函数"><a href="#带命名空间的绑定函数" class="headerlink" title="带命名空间的绑定函数"></a>带命名空间的绑定函数</h3><p>当使用 <code>mapState</code>、<code>mapGetters</code>、<code>mapActions</code> 和 <code>mapMutations</code> 这些函数来绑定带命名空间的模块时，写起来可能比较繁琐：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: &#123;<br>  ...mapState(&#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.some.nested.module.a,<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.some.nested.module.b<br>  &#125;)<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  ...mapActions([<br>    <span class="hljs-string">&#x27;some/nested/module/foo&#x27;</span>, <span class="hljs-comment">// -&gt; this[&#x27;some/nested/module/foo&#x27;]()</span><br>    <span class="hljs-string">&#x27;some/nested/module/bar&#x27;</span> <span class="hljs-comment">// -&gt; this[&#x27;some/nested/module/bar&#x27;]()</span><br>  ])<br>&#125;<br></code></pre></td></tr></table></figure><p>对于这种情况，你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文。于是上面的例子可以简化为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: &#123;<br>  ...mapState(<span class="hljs-string">&#x27;some/nested/module&#x27;</span>, &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.a,<br>    <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.b<br>  &#125;)<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  ...mapActions(<span class="hljs-string">&#x27;some/nested/module&#x27;</span>, [<br>    <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-comment">// -&gt; this.foo()</span><br>    <span class="hljs-string">&#x27;bar&#x27;</span> <span class="hljs-comment">// -&gt; this.bar()</span><br>  ])<br>&#125;<br></code></pre></td></tr></table></figure><p>而且，你可以通过使用 <code>createNamespacedHelpers</code> 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="hljs-string">&#x27;some/nested/module&#x27;</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 在 `some/nested/module` 中查找</span><br>    ...mapState(&#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.a,<br>      <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.b<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 在 `some/nested/module` 中查找</span><br>    ...mapActions([<br>      <span class="hljs-string">&#x27;foo&#x27;</span>,<br>      <span class="hljs-string">&#x27;bar&#x27;</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="module小案例"><a href="#module小案例" class="headerlink" title="module小案例"></a>module小案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">import</span> countOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./count&#x27;</span>;<br><span class="hljs-keyword">import</span> peopleOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./people&#x27;</span>;<br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-attr">modules</span>:&#123;<br>        countOptions,<br>        peopleOptions<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/people.js</span><br><span class="hljs-comment">// 人员管理相关的配置</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">addWang</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>            <span class="hljs-comment">// 只能添加王姓名</span><br>            <span class="hljs-keyword">if</span> (value.name.indexOf(<span class="hljs-string">&#x27;王&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>                context.commit(<span class="hljs-string">&#x27;ADD_PERSON&#x27;</span>, value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&#x27;添加的人必须姓王&#x27;</span>)<br>            &#125;<br>        &#125;,<br><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">ADD_PERSON</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>            state.peopleList.push(value);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">peopleList</span>: [<br>            &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alex&#x27;</span> &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">firstPersonName</span>(<span class="hljs-params">state</span>)</span> &#123;<br>            <span class="hljs-comment">// 这里的state是 peopleOptions的state</span><br>            <span class="hljs-keyword">return</span> state.peopleList[<span class="hljs-number">0</span>].name;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/count.js</span><br><span class="hljs-comment">// 求和相关的配置</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">addOdd</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>            <span class="hljs-comment">// 注意这里是 context.state</span><br>            <span class="hljs-keyword">if</span> (context.state.sum % <span class="hljs-number">2</span>) &#123;<br>                context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value)<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">addWait</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                context.commit(<span class="hljs-string">&#x27;ADD&#x27;</span>, value)<br>            &#125;, <span class="hljs-number">500</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">ADD</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>            state.sum += value;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">SUBTRACT</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>            state.sum -= value;<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span> &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">sumTimesTen</span>(<span class="hljs-params">state</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">//people.vue<br>&lt;template&gt;<br>  &lt;h1&gt;人员列表&lt;/h1&gt;<br>  &lt;h3&gt;Count组件的总和 &#123;&#123; sum &#125;&#125;&lt;/h3&gt;<br>  &lt;h3&gt;列表中第一个人的名字：&#123;&#123; firstPersonName &#125;&#125;&lt;/h3&gt;<br>  &lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot; /&gt;<br>  &lt;button @click=&quot;addPerson&quot;&gt;添加&lt;/button&gt;<br>  &lt;button @click=&quot;addWang&quot;&gt;添加一个姓王的人&lt;/button&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;p in peopleList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123; p.name&#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; nanoid &#125; from &quot;nanoid&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123; name: &quot;&quot; &#125;;<br>  &#125;,<br>  computed: &#123;<br>    peopleList() &#123;<br>      // 注意写法<br>      return this.$store.state.peopleOptions.peopleList;<br>    &#125;,<br>    sum() &#123;<br>      return this.$store.state.countOptions.sum;<br>    &#125;,<br>    firstPersonName() &#123;<br>      return this.$store.getters[&quot;peopleOptions/firstPersonName&quot;];<br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br>    addPerson() &#123;<br>      const person = &#123; id: nanoid(), name: this.name &#125;;<br>      // 注意写法<br>      this.$store.commit(&quot;peopleOptions/ADD_PERSON&quot;, person);<br>      this.name = &quot;&quot;;<br>    &#125;,<br>    addWang() &#123;<br>      const person = &#123; id: nanoid(), name: this.name &#125;;<br>      console.log(person);<br>      this.$store.dispatch(&quot;peopleOptions/addWang&quot;, person);<br>      this.name = &quot;&quot;;<br>    &#125;<br>  &#125;<br><br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">//count.vue<br>&lt;template&gt;<br>  &lt;h1&gt;当前求和为&#123;&#123; sum &#125;&#125;&lt;/h1&gt;<br>  &lt;h3&gt;当前求和放大10倍&#123;&#123; sumTimesTen &#125;&#125;&lt;/h3&gt;<br>  &lt;h3&gt;Person组件的总人数是&#123;&#123; peopleList.length &#125;&#125;&lt;/h3&gt;<br>  &lt;select name=&quot;&quot; id=&quot;&quot; v-model.number=&quot;n&quot;&gt;<br>    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;button @click=&quot;add(n)&quot;&gt;+&lt;/button&gt;<br>  &lt;button @click=&quot;subtract(n)&quot;&gt;-&lt;/button&gt;<br>  &lt;button @click=&quot;addOdd(n)&quot;&gt;当前求和为奇数才加&lt;/button&gt;<br>  &lt;button @click=&quot;addWait(n)&quot;&gt;等等再加&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &quot;vuex&quot;;<br><br>export default &#123;<br>  data() &#123;<br>    return &#123; n: 1 &#125;;<br>  &#125;,<br>  computed: &#123;<br>    ...mapState(&quot;countOptions&quot;, [&quot;sum&quot;]),<br>    ...mapState(&#123;peopleList:state =&gt; state.peopleOptions.peopleList&#125;),<br>    ...mapGetters(&quot;countOptions&quot;, [&quot;sumTimesTen&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    // 由于需要传参，此时的参数通过模板来传递<br>    ...mapMutations(&quot;countOptions&quot;, &#123;<br>      add: &quot;ADD&quot;,<br>      subtract: &quot;SUBTRACT&quot;,<br>    &#125;),<br>    ...mapActions(&quot;countOptions&quot;, [&quot;addOdd&quot;, &quot;addWait&quot;]),<br>  &#125;,<br>  <br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3快速上手以及组合式Composition API</title>
    <link href="/2021/08/21/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BB%A5%E5%8F%8A%E7%BB%84%E5%90%88%E5%BC%8FComposition-API/"/>
    <url>/2021/08/21/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BB%A5%E5%8F%8A%E7%BB%84%E5%90%88%E5%BC%8FComposition-API/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>yarn create vite &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>yarn<br><span class="hljs-comment">## 运行</span><br>yarn dev<br></code></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li><p>理解：Vue3.0中一个新的配置项，值为一个函数。</p></li><li><p>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</p></li><li><p><strong>组件中所用到的：数据、方法等等，均要配置在setup中。</strong></p></li><li><p>setup函数的两种返回值：</p><ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;一个人的信息&lt;/h1&gt;<br>    &lt;div&gt;&#123;&#123;name&#125;&#125; &#123;&#123;age&#125;&#125;&lt;/div&gt;<br>    &lt;button @click=&#x27;sayHello&#x27;&gt;打印&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  // 此时只是测试setup，暂时不考虑响应式<br>  setup() &#123;<br>    // 数据<br>    let name = &quot;张三&quot;;<br>    let age = 18;<br><br>    // 方法<br>    function sayHello()&#123;<br>      console.log(`$&#123;name&#125;,我$&#123;age&#125;了`);<br>    &#125;<br>    return &#123;<br>      name,age,sayHello<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span> 此时页面仅仅显示渲染的内容。</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;一个人的信息&lt;/h1&gt;<br>    &lt;div&gt;&#123;&#123;name&#125;&#125; &#123;&#123;age&#125;&#125;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;h&#125; from &#x27;vue&#x27;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  // 此时只是测试setup，暂时不考虑响应式<br>  setup() &#123;<br>    // 数据<br>    let name = &quot;张三&quot;;<br>    let age = 18;<br>    // 第一个参数时创建的元素，第二个参数时标签的内容<br>    return ()=&gt;h(&#x27;h1&#x27;,&#x27;大家好&#x27;)<br><br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>注意点：</p><ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li><strong>如果有重名, setup优先。</strong></li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li><p>作用: 定义一个响应式的数据</p></li><li><p>语法: <code>const xxx = ref(initValue)</code> </p><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;一个人的信息&lt;/h1&gt;<br>    &lt;div&gt;&#123;&#123; name &#125;&#125; &#123;&#123; age &#125;&#125; &#123;&#123; job.type &#125;&#125;&#123;&#123;job.salary&#125;&#125;&lt;/div&gt;<br>    &lt;button @click=&quot;changeInfo&quot;&gt;修改人的信息&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 数据<br>    let name = ref(&quot;张三&quot;);<br>    let age = ref(18);<br>    let job = ref(&#123; type: &quot;工程师&quot;, salary: &quot;20k&quot; &#125;);<br>    // 方法<br>    function changeInfo() &#123;<br>      name.value = &quot;lisi&quot;;<br>      age.value = 34;<br>      job.value.type= &#x27;攻城狮&#x27;;<br>      job.value.salary=&#x27;100k&#x27;;<br>    &#125;<br>    return &#123; name, age, changeInfo, job &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>备注：</p><ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li><p>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</p></li><li><p>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></p></li><li><p>reactive定义的响应式数据是“深层次的”。</p></li><li><p>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;一个人的信息&lt;/h1&gt;<br>    &lt;div&gt; &#123;&#123; age &#125;&#125; &#123;&#123; job.type &#125;&#125;&#123;&#123;job.salary&#125;&#125;&lt;/div&gt;<br>    &lt;button @click=&quot;changeInfo&quot;&gt;修改人的信息&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref,reactive&#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;App&quot;,<br>  setup() &#123;<br>    // 数据<br>    let age = ref(18);<br>    let job = reactive(&#123; type: &quot;工程师&quot;, salary: &quot;20k&quot; &#125;);<br>    // 方法<br>    function changeInfo() &#123;<br>      age.value = 34;<br>      // 此时不需要.value<br>      job.type = &#x27;UI&#x27;;<br>    &#125;<br>    return &#123; age, changeInfo, job &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li>实现原理: <ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect：<ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data, &#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br>    get (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br>    set (target, prop, value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, prop, value)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截删除属性</span><br>    deleteProperty (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(target, prop)<br>    &#125;<br>&#125;)<br><br>proxy.name = <span class="hljs-string">&#x27;tom&#x27;</span>   <br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li><p>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</p></li><li><p>context：上下文对象</p><ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h3 id="如何发送和监听自定义事件"><a href="#如何发送和监听自定义事件" class="headerlink" title="如何发送和监听自定义事件"></a>如何发送和监听自定义事件</h3><p>注意到是使用setup函数中的第二个参数(<code>context.emit</code>)来发送自定义事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue<br>&lt;template&gt;<br>  &lt;demo msg= &#x27;aa&#x27; data=&#x27;111&#x27; @hello = &#x27;showHelloMsg&#x27;&gt;<br>  &lt;/demo&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Demo from &#x27;./components/Demo.vue&#x27;;<br>export default &#123;<br>  <br>  setup() &#123;<br>    // 数据<br>    function showHelloMsg(value)&#123;<br>      console.log(`触发了Hello事件：收到的值为$&#123;value&#125;`);<br>    &#125;;<br>    return &#123;<br>      showHelloMsg<br>    &#125;<br>  &#125;,<br>  components:&#123;<br>    Demo<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">//Demo.vue<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;test1&quot;&gt;触发demo组件的hello事件&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;Demo&quot;,<br>  props: [&quot;data&quot;, &quot;msg&quot;],<br>  emits: [&quot;hello&quot;],<br>  setup(props, context) &#123;<br>    // console.log(this); undefined<br>    // console.log(context.attrs); 相当于vue2 中的 $attrs 当没有用props接收数据时，数据就会跑到attrs中<br>    console.log(props); //Proxy&#123;msg: &quot;aa&quot;, data: &quot;111&quot;&#125;<br>    function test1() &#123;<br>      //发送自定义事件<br>      context.emit(&quot;hello&quot;, 666);<br>    &#125;<br>    return &#123; test1 &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = computed(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.firstName + <span class="hljs-string">&#x27;-&#x27;</span> + person.lastName<br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = computed(&#123;<br>        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> person.firstName + <span class="hljs-string">&#x27;-&#x27;</span> + person.lastName<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.split(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.firstName = nameArr[<span class="hljs-number">0</span>]<br>            person.lastName = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时（此属性值不为对象）：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-comment">// 第三个参数写配置项，如immediate: true, 立即监视</span><br><span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">let</span> msg = ref(<span class="hljs-string">&quot;你好啊 &quot;</span>);<br>watch(sum,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-comment">// newValue 和 oldValue 对应的也是数组</span><br>watch([sum,msg],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br>watch(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">false</span>&#125;) <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br>watch(<span class="hljs-function">()=&gt;</span>person.job,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br>watch([<span class="hljs-function">()=&gt;</span>person.job,<span class="hljs-function">()=&gt;</span>person.name],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//特殊情况</span><br>watch(<span class="hljs-function">()=&gt;</span>person.job,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>例子：let sum = ref(0);</p><p>如果ref函数的参数为基本类型，用watch监视时，并不是监视<code>变量名.value</code>（sum.value ===0，sum是一个refimpl对象 ），因为<code>变量名.value</code>的值是该基本类型的值（0）， 因此要直接监视该<code>变量</code>（sum）。</p><hr><p>let person = ref({person:{age:10,name:’hhh’}});</p><p>如果ref函数的参数时对象，用watch监视时，需要使用①<code>变量名.value</code>或者开启②<code>&#123;deep:true&#125;</code>深度监控。因为ref定义对象时借助了reactive函数，<code>变量名.value</code>的值是一个proxy对象。(person是一个refimpl对象，person.value是一个proxy对象)</p></blockquote><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。（PS：默认开启了immediate）</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br>watchEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> x1 = sum.value<br>    <span class="hljs-keyword">const</span> x2 = person.age<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue生命周期" style="zoom: 25%;" /><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="Vue3生命周期" style="zoom:33%;" /><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Demo&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> &#123; sum &#125;;<br>  &#125;,<br><br>  <span class="hljs-comment">// 通过配置项 option api 使用生命周期钩子函数</span><br>  <span class="hljs-function"><span class="hljs-title">beforeCreate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--beforeCreate---&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--created---&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">beforeMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--beforeMount--&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--mounted--&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">beforeUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--beforeUpdate--&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--updated--&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">beforeUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--beforeUnmount--&quot;</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">unmounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;--unmounted--&quot;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Demo&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 通过组合式api使用生命钩子</span><br>    onBeforeMount(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onBeforeMount--&#x27;</span>);<br>    &#125;);<br>    onMounted(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onMounted--&#x27;</span>);<br>    &#125;);<br>    onBeforeUpdate(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onBeforeUpdate--&#x27;</span>);<br>    &#125;);<br>    onUpdated(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onUpdated--&#x27;</span>);<br>    &#125;);<br>    onBeforeUnmount(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onBeforeUnmount--&#x27;</span>);<br>    &#125;);<br>    onUnmounted(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;--onUnmounted--&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; sum &#125;;<br>  &#125;,<br></code></pre></td></tr></table></figure><p><code>setup</code>最先执行，接着是<code>beforeCreate</code>和<code>created</code>,再接着是<code>onBeforeMount</code>再接着是<code>BeforeMount</code>…</p><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;&lt;/h2&gt;<br>  &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;<br>  &lt;h2&gt;薪资：&#123;&#123; salary &#125;&#125;&lt;/h2&gt;<br>  &lt;button @click=&quot;name += &#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;<br>  &lt;button @click=&quot;age++&quot;&gt;年龄+1&lt;/button&gt;<br>  &lt;button @click=&quot;salary++&quot;&gt;工资+1&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, toRef &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;Demo&quot;,<br>  setup() &#123;<br>    let person = reactive(&#123;<br>      name: &quot;张三&quot;,<br>      age: 18,<br>      job: &#123;<br>        j1: &#123; salary: &quot;120&quot; &#125;,<br>      &#125;,<br>    &#125;);<br>    // name1只是获取了person.name的值，并不是引用<br>    const name1 = person.name;<br>    // 可以通过toRef来解决<br>    const name2 = toRef(person, &quot;name&quot;); //ObjectRefImpl<br>    console.log(name2.value); //张三<br>    return &#123;<br>      name: toRef(person, &quot;name&quot;),<br>      age: toRef(person, &quot;age&quot;),<br>      salary: toRef(person.job.j1, &quot;salary&quot;),<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，可以批量处理一个对象里所有的属性，语法：<code>toRefs(person)</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;姓名:&#123;&#123; name &#125;&#125;&lt;/h2&gt;<br>  &lt;h2&gt;年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;<br>  &lt;h2&gt;薪资：&#123;&#123; salary &#125;&#125;&lt;/h2&gt;<br>  &lt;button @click=&quot;name += &#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;<br>  &lt;button @click=&quot;age++&quot;&gt;年龄+1&lt;/button&gt;<br>  &lt;button @click=&quot;salary++&quot;&gt;工资+1&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; reactive, toRef,toRefs &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;Demo&quot;,<br>  setup() &#123;<br>    let person = reactive(&#123;<br>      name: &quot;张三&quot;,<br>      age: 18,<br>      job: &#123;<br>        j1: &#123; salary: &quot;120&quot; &#125;,<br>      &#125;,<br>    &#125;);<br>    const p = toRefs(person);<br>    console.log(p);//&#123;name: ObjectRefImpl, age: ObjectRefImpl, job: ObjectRefImpl&#125;<br>    return &#123;<br>      // 展开语法<br>      ...p,<br>      salary:toRef(person.job.j1,&#x27;salary&#x27;)<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象<strong>最外层属性</strong>的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, <strong>不进行对象的响应式处理</strong>。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = reactive(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">job</span>: &#123;<br>    <span class="hljs-attr">j1</span>: &#123; <span class="hljs-attr">salary</span>: <span class="hljs-string">&quot;120&quot;</span> &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">//设置person 为只读</span><br>person = readonly(person);<br><span class="hljs-comment">// 只是第一层不能改</span><br>person = shallowReadonly(person);<br><br><span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>);<br>sum = readonly(sum);<br></code></pre></td></tr></table></figure><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li><p>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</p></li><li><p>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</p></li><li><p>```js<br>let person = reactive({<br>  name: “张三”,<br>  age: 18,<br>  job: {</p><pre><code>j1: &#123; salary: &quot;120&quot; &#125;,</code></pre><p>  },<br>});</p><p>function showRawPerson(){<br>  // 注意：只能将reactive生成的响应式对象改为原始对象<br>  const p = toRaw(person);<br>  console.log(p);<br>}</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">- markRaw：<br>  - 作用：标记一个对象，使其永远不会再成为响应式对象。<br>  <br>  - 应用场景:<br>    <span class="hljs-number">1</span>. 有些值不应被设置为响应式的，例如复杂的第三方类库等。<br>    <span class="hljs-number">2</span>. 当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。<br>    <br>  - ```js<br>    <span class="hljs-keyword">function</span> addCar()&#123;<br>      let car = &#123;name:<span class="hljs-string">&#x27;奔驰&#x27;</span>,price:<span class="hljs-string">&#x27;2222&#x27;</span>&#125;<br>      <span class="hljs-regexp">//</span> 标记car，使他永远无法成为响应式数据<br>      <span class="hljs-regexp">//</span> 响应式的person对象的car属性不是响应式的<br>      person.car = markRaw(car);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;<br>&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;ref,customRef&#125; from &#x27;vue&#x27;<br>export default &#123;<br>name:&#x27;Demo&#x27;,<br>setup()&#123;<br>// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>//自定义一个myRef<br>function myRef(value,delay)&#123;<br>let timer<br>//通过customRef去实现自定义<br>return customRef((track,trigger)=&gt;&#123;<br>return&#123;<br>get()&#123;<br>track() //告诉Vue这个value值是需要被“追踪”的<br>return value<br>&#125;,<br>set(newValue)&#123;<br>clearTimeout(timer)<br>timer = setTimeout(()=&gt;&#123;<br>value = newValue<br>trigger() //告诉Vue去更新界面<br>&#125;,delay)<br>&#125;<br>&#125;<br>&#125;)<br>&#125;<br>let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref<br>return &#123;<br>keyword<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>记得导入<code>provide</code>和 <code>inject</code> 。</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = reactive(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    provide(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props,context</span>)</span>&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = inject(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li><p>isRef: 检查一个值是否为一个 ref 对象</p></li><li><p>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</p></li><li><p>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</p></li><li><p>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">let</span> sum2 = readonly(sum);<br><span class="hljs-built_in">console</span>.log(isProxy(sum2)); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(isReactive(sum2)); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(isRef(sum2)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style='  clear: both;'>    <div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;isShow = true&quot;&gt;点我弹出&lt;/button&gt;<br>    &lt;!-- 如移动到body标签下 --&gt;<br>    &lt;teleport to=&quot;body&quot;&gt;<br>      &lt;div class=&quot;mask&quot; v-if=&quot;isShow&quot;&gt;<br>        &lt;div class=&quot;dialog&quot; &gt;<br>          &lt;h3&gt;我是弹窗&lt;/h3&gt; <br>          &lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/teleport&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>export default &#123;<br>  setup() &#123;<br>    let isShow = ref(false);<br>    return &#123; isShow &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.dialog &#123;<br>  width: 300px;<br>  height: 300px;<br>  background: green;<br>  text-align: center;<br>&#125;<br><br>.mask&#123;<br>    position: absolute;<br>    top: 0;<br>    padding: 0;<br>    width: 100%;<br>    height: 100%;<br>    background-color: #e1e1e17a;<br>    display: flex;<br>  justify-content: center;<br>  align-items: center;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineAsyncComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> Child = defineAsyncComponent(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>异步引入组件完整写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 带选项的异步组件</span><br><span class="hljs-keyword">const</span> asyncPageWithOptions = defineAsyncComponent(&#123;<br>  <span class="hljs-attr">loader</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./NextPage.vue&#x27;</span>),<br>  <span class="hljs-attr">delay</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>,<br>  <span class="hljs-attr">errorComponent</span>: ErrorComponent,<br>  <span class="hljs-attr">loadingComponent</span>: LoadingComponent<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h3&gt;我是App组件&lt;/h3&gt;<br>&lt;Suspense&gt;<br>&lt;template v-slot:default&gt;<br>&lt;Child/&gt;<br>&lt;/template&gt;<br>&lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中.....&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;/Suspense&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>另外，如果使用了<code>suspense</code>，setup中的返回值可以为promise对象或者说setup可以为async。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;<br>    &lt;h3&gt;我是子组件&lt;/h3&gt;<br>      &lt;suspense&gt;<br>        &lt;div&gt;&#123;&#123;sum&#125;&#125;&lt;/div&gt;<br>      &lt;/suspense&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;ref&#125; from &#x27;vue&#x27;<br>export default &#123;<br>  setup() &#123;<br>    let sum = ref(1);<br>    let p =new Promise((resolve,reject)=&gt;&#123;<br>      setTimeout(() =&gt; &#123;<br>        resolve(&#123;sum&#125;);<br>      &#125;, 1000);<br>    &#125;);<br>    return p;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.son &#123;<br>  background-color: skyblue;<br>  padding: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> sum = ref(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">let</span> p =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        resolve(&#123;sum&#125;);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> p;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br>Vue.component(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br>Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.focus()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    emits: [&#x27;close&#x27;]<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Vue3</tag>
      
      <tag>Composition Api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue小案例_用户管理_用户列表</title>
    <link href="/2021/08/12/vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/"/>
    <url>/2021/08/12/vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86-%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="用户管理小案例"><a href="#用户管理小案例" class="headerlink" title="用户管理小案例"></a>用户管理小案例</h1><p>项目起始文件：<a href="https://xiaobaijun.lanzoui.com/i7NBYshgffg">https://xiaobaijun.lanzoui.com/i7NBYshgffg</a></p><h2 id="0-实现步骤"><a href="#0-实现步骤" class="headerlink" title="0. 实现步骤"></a>0. 实现步骤</h2><ol><li><p>安装并配置 vue-router 4.x</p></li><li><p>展示 Login.vue 登录组件</p></li><li><p>模拟并实现登录功能</p></li><li><p>通过路由渲染 Home.vue</p></li><li><p>实现退出登录的功能</p></li><li><p>全局控制路由的访问权限</p></li><li><p>将左侧菜单改造为路由链接</p></li><li><p>渲染用户管理页面的数据</p></li><li><p>实现跳转到用户详情页的功能</p></li><li><p>开启路由的 props 传参</p></li><li><p>通过编程式导航实现后退功能  </p></li></ol><h2 id="1-安装并配置-vue-router-4-x"><a href="#1-安装并配置-vue-router-4-x" class="headerlink" title="1. 安装并配置 vue-router 4.x"></a>1. 安装并配置 vue-router 4.x</h2><p>1.运行如下的命令，安装 vue-router ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router@next <br></code></pre></td></tr></table></figure><p>2.在 src 目录下新建 router.js 路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 创建路由规则</span><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>:[],<br>&#125;)<br><br><span class="hljs-comment">// 向外导出router模块</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>3.在 main.js 入口文件中导入并挂载路由对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">//导入router模块</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router.js&#x27;</span>;<br><br><span class="hljs-comment">// 创建 app 实例</span><br><span class="hljs-keyword">const</span> app = createApp(App);<br><br><span class="hljs-comment">// 全局挂载router</span><br>app.use(router);<br><br><span class="hljs-comment">// 挂载 app 实例</span><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="2-展示-Login-vue-登录组件"><a href="#2-展示-Login-vue-登录组件" class="headerlink" title="2.展示 Login.vue 登录组件"></a>2.展示 Login.vue 登录组件</h2><p>1.在 router.js 模块中导入 Login.vue 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入组件</span><br><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyLogin.vue&#x27;</span><br></code></pre></td></tr></table></figure><p>2.声明路由规则如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>:[<br>        <span class="hljs-comment">// 路由重定向</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/login&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-attr">component</span>:Login,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;login&#x27;</span>&#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.在 <code>App.vue</code> 组件中声明路由占位符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 路由占位符 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="3-模拟并实现登录功能"><a href="#3-模拟并实现登录功能" class="headerlink" title="3.模拟并实现登录功能"></a>3.模拟并实现登录功能</h2><p>1.在 MyLogin.vue 组件中声明如下的 data 数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;MyLogin&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.为用户名和密码的文本框进行 <strong>v-model 双向数据</strong>绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 登录名称 --&gt;<br>&lt;div class=&quot;form-group form-inline&quot;&gt;<br>  &lt;label for=&quot;username&quot;&gt;登录名称&lt;/label&gt;<br>  &lt;input type=&quot;text&quot; class=&quot;form-control ml-2&quot; id=&quot;username&quot; placeholder=&quot;请输入登录名称&quot; autocomplete=&quot;off&quot; v-model=&quot;username&quot;&gt;<br>&lt;/div&gt;<br>&lt;!-- 登录密码 --&gt;<br>&lt;div class=&quot;form-group form-inline&quot;&gt;<br>  &lt;label for=&quot;password&quot;&gt;登录密码&lt;/label&gt;<br>  &lt;input type=&quot;password&quot; class=&quot;form-control ml-2&quot; id=&quot;password&quot; placeholder=&quot;请输入登录密码&quot; v-model=&quot;password&quot;&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>3.为 登录按钮 绑定点击事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; @click=&#x27;onLoginClick&#x27;&gt;登录&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>4.在 methods 中声明 onLoginClick 事件处理函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onLoginClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// 判断用户名和密码是否正确</span><br> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.username===<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;<span class="hljs-built_in">this</span>.password===<span class="hljs-string">&#x27;123456&#x27;</span>)&#123;<br>    <span class="hljs-comment">// 登录成功 跳转到后台主页</span><br>    <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/home&#x27;</span>);<br>    <span class="hljs-comment">// 模拟存储token</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;token&#x27;</span>,<span class="hljs-string">&#x27;Bearer xxx&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 登录失败 清除token</span><br>    <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-通过路由渲染-Home-vue"><a href="#4-通过路由渲染-Home-vue" class="headerlink" title="4. 通过路由渲染 Home.vue"></a>4. 通过路由渲染 Home.vue</h2><p>1.在 router.js 中导入 Home.vue 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyHome.vue&#x27;</span>;<br></code></pre></td></tr></table></figure><p>2.在 routes 路由规则的数组中，声明对应的路由规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>:[<br>        <span class="hljs-comment">// 路由重定向</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/login&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-attr">component</span>:Login,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;login&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">component</span>:Home&#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.渲染 Home.vue 组件的基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home-container&quot;&gt;<br>    &lt;!-- 头部组件 --&gt;<br>    &lt;my-header&gt;&lt;/my-header&gt;<br>    &lt;!-- 主体区域 --&gt;<br>    &lt;div class=&quot;home-main-box&quot;&gt;<br>      &lt;!-- 左侧边栏区域 --&gt;<br>      &lt;my-aside&gt;&lt;/my-aside&gt;<br>      &lt;!-- 右侧内容主体区域 --&gt;<br>      &lt;div class=&quot;home-main-body&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="5-实现退出登录的功能"><a href="#5-实现退出登录的功能" class="headerlink" title="5.实现退出登录的功能"></a>5.实现退出登录的功能</h2><p>1.在 MyHeader.vue 组件中，为 退出登录 按钮绑定 click 事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot; @click=&quot;onLogout&quot;&gt;退出登录&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>2.在 methods 中声明如下的事件处理函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-function"><span class="hljs-title">onLogout</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">//跳转到登录页</span><br>    <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>      <span class="hljs-comment">// 清空token</span><br>    <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="6-全局控制路由的访问权限"><a href="#6-全局控制路由的访问权限" class="headerlink" title="6.全局控制路由的访问权限"></a>6.全局控制路由的访问权限</h2><p>在 router.js 模块中，通过 router 路由实例对象，全局挂载路由导航守卫：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导航守卫</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 如果用户访问的是登录页面 直接放行</span><br>    <span class="hljs-keyword">if</span>(to.path===<span class="hljs-string">&#x27;/login&#x27;</span>) <span class="hljs-keyword">return</span> next();<br>    <span class="hljs-comment">// 获取token值</span><br>    <span class="hljs-keyword">const</span> token=<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    <span class="hljs-comment">// 如果token 不存在 则跳转到登录页面</span><br>    <span class="hljs-keyword">if</span>(!token) <span class="hljs-keyword">return</span> next(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    <span class="hljs-comment">// 存在token 则直接放行</span><br>    next();<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="7-将左侧菜单改造为路由链接"><a href="#7-将左侧菜单改造为路由链接" class="headerlink" title="7. 将左侧菜单改造为路由链接"></a>7. 将左侧菜单改造为路由链接</h2><p>1.打开 <code>MyAside.vue</code> 组件，把 li 内部的纯文本升级改造为 <code>&lt;router-link&gt;</code> 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ul class=&quot;user-select-none menu&quot;&gt;<br>  &lt;li class=&quot;menu-item&quot;&gt;<br>    &lt;router-link to=&#x27;/home/users&#x27;&gt;用户管理&lt;/router-link&gt;<br>  &lt;/li&gt;<br>  &lt;li class=&quot;menu-item&quot;&gt;<br>    &lt;router-link to=&#x27;/home/rights&#x27;&gt;权限管理&lt;/router-link&gt;<br>  &lt;/li&gt;<br>  &lt;li class=&quot;menu-item&quot;&gt;<br>    &lt;router-link to=&#x27;/home/goods&#x27;&gt;商品管理&lt;/router-link&gt;<br>  &lt;/li&gt;<br>  &lt;li class=&quot;menu-item&quot;&gt;<br>    &lt;router-link to=&#x27;/home/orders&#x27;&gt;订单管理&lt;/router-link&gt;<br>  &lt;/li&gt;<br>  &lt;li class=&quot;menu-item&quot;&gt;<br>    &lt;router-link to=&#x27;/home/settings&#x27;&gt;系统设置&lt;/router-link&gt;<br>  &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>2.打开 Home.vue 组件，在 右侧内容主体区域 中声明子路由的占位符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;home-container&quot;&gt;<br>    &lt;!-- 头部组件 --&gt;<br>    &lt;my-header&gt;&lt;/my-header&gt;<br>    &lt;!-- 主体区域 --&gt;<br>    &lt;div class=&quot;home-main-box&quot;&gt;<br>      &lt;!-- 左侧边栏区域 --&gt;<br>      &lt;my-aside&gt;<br>      &lt;/my-aside&gt;<br>      &lt;!-- 右侧内容主体区域 --&gt;<br>      &lt;div class=&quot;home-main-body&quot;&gt;<br>        &lt;!-- 子路由的占位符 --&gt;<br>        &lt;router-view&gt;&lt;/router-view&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.在 router.js 中导入左侧菜单对应的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Users <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/menus/MyUsers.vue&#x27;</span><br><span class="hljs-keyword">import</span> Rights <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/menus/MyRights.vue&#x27;</span><br><span class="hljs-keyword">import</span> Goods <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/menus/MyGoods.vue&#x27;</span><br><span class="hljs-keyword">import</span> Orders <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/menus/MyOrders.vue&#x27;</span><br><span class="hljs-keyword">import</span> Settings <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/menus/MySettings.vue&#x27;</span><br></code></pre></td></tr></table></figure><p>4.通过 children 属性，为 home 规则定义子路由规则如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由规则</span><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>    <span class="hljs-attr">history</span>: createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 路由重定向</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: Login, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;login&#x27;</span> &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: Home, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>, <br>            <span class="hljs-comment">// 当用户访问/home时，重定向至/home/users,</span><br>            <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/home/users&#x27;</span>,<br>            <span class="hljs-attr">children</span>: [<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-attr">component</span>: Users &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;rights&#x27;</span>, <span class="hljs-attr">component</span>: Rights &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;goods&#x27;</span>, <span class="hljs-attr">component</span>: Goods &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;orders&#x27;</span>, <span class="hljs-attr">component</span>: Orders &#125;,<br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: Settings &#125;,<br>            ]<br>        &#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="8-渲染用户管理页面的数据"><a href="#8-渲染用户管理页面的数据" class="headerlink" title="8.渲染用户管理页面的数据"></a>8.渲染用户管理页面的数据</h2><p>1.在 MyUsers.vue 组件中，通过 v-for 指令循环渲染用户列表的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;tbody&gt;<br>  &lt;tr v-for=&quot;(item,index) in userlist&quot; :key=&#x27;item.id&#x27;&gt;<br>    &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;&#123;&#123;item.position&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;详情&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/tbody&gt;<br></code></pre></td></tr></table></figure><h2 id="9-实现跳转到用户详情页的功能"><a href="#9-实现跳转到用户详情页的功能" class="headerlink" title="9.实现跳转到用户详情页的功能"></a>9.实现跳转到用户详情页的功能</h2><p>1.在 MyUsers.vue 组件中，渲染详情页的路由链接如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;td&gt;&lt;router-link :to=&quot;&#x27;/home/users/&#x27;+item.id&quot;&gt;详情&lt;/router-link&gt;&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>2.在 router.js 中导入用户详情页组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> UserDetail <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/user/MyUserDetail.vue&#x27;</span><br></code></pre></td></tr></table></figure><p>3.在 home 规则的 children 节点下，声明 用户详情页 的路由规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: Home, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-comment">// 当用户访问/home时，重定向至/home/users,</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home/users&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-attr">component</span>: Users &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;rights&#x27;</span>, <span class="hljs-attr">component</span>: Rights &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;goods&#x27;</span>, <span class="hljs-attr">component</span>: Goods &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;orders&#x27;</span>, <span class="hljs-attr">component</span>: Orders &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: Settings &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;users/:id&#x27;</span>, <span class="hljs-attr">component</span>: UserDetail &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-开启路由的-props-传参"><a href="#10-开启路由的-props-传参" class="headerlink" title="10.开启路由的 props 传参"></a>10.开启路由的 props 传参</h2><p>1.在 router.js 模块中，为 用户详情页 的路由规则开启 props 传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: Home, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-comment">// 当用户访问/home时，重定向至/home/users,</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home/users&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-attr">component</span>: Users &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;rights&#x27;</span>, <span class="hljs-attr">component</span>: Rights &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;goods&#x27;</span>, <span class="hljs-attr">component</span>: Goods &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;orders&#x27;</span>, <span class="hljs-attr">component</span>: Orders &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;settings&#x27;</span>, <span class="hljs-attr">component</span>: Settings &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;users/:id&#x27;</span>, <span class="hljs-attr">component</span>: UserDetail,<span class="hljs-attr">props</span>:<span class="hljs-literal">true</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 MyUserDetail.vue 组件中声明 props 参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">export default &#123;<br>name: &#x27;MyUserDetail&#x27;,<br>props: [&#x27;id&#x27;],<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在 MyUserDetail.vue 组件的结构中直接使用路由参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button type=&quot;button&quot; class=&quot;btn btn-light btn-sm&quot;&gt;后退&lt;/button&gt;<br>    &lt;h4 class=&quot;text-center&quot;&gt;用户详情---&#123;&#123;id&#125;&#125;&lt;/h4&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>11.通过编程式导航实现后退功能</p><p>1.在 MyUserDetail.vue 组件中，为后退按钮绑定点击事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button type=&quot;button&quot; class=&quot;btn btn-light btn-sm&quot; @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;<br>    &lt;h4 class=&quot;text-center&quot;&gt;用户详情---&#123;&#123;id&#125;&#125;&lt;/h4&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>2.在 methods 中声明 goBack 事件处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &#x27;MyUserDetail&#x27;,<br>  props:[&#x27;id&#x27;],<br>  methods: &#123;<br>    goBack()&#123;<br>      this.$router.go(-1);<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="用户列表小案例"><a href="#用户列表小案例" class="headerlink" title="用户列表小案例"></a>用户列表小案例</h1><ul><li><p>vue-cli 创建 vue2 项目</p></li><li><p>element ui 组件库</p></li><li><p>axios 拦截器</p></li><li><p>proxy 跨域接口代理</p></li><li><p>vuer-router 路由  </p></li></ul><h2 id="0-实现步骤-1"><a href="#0-实现步骤-1" class="headerlink" title="0. 实现步骤"></a>0. 实现步骤</h2><ol><li>初始化项目</li><li> 渲染用户列表组件</li><li> 基于全局过滤器处理时间格式</li><li> 实现添加用户的操作</li><li> 实现删除用户的操作</li><li> 通过路由跳转到详情页  </li></ol><h2 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h2><h3 id="1-1-梳理项目结构"><a href="#1-1-梳理项目结构" class="headerlink" title="1.1 梳理项目结构"></a>1.1 梳理项目结构</h3><p>1.基于 vue-cli 运行如下的命令，新建 vue2.x 的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue create code-users<br></code></pre></td></tr></table></figure><p>2.重置 App.vue 组件中的代码：</p><p>3.删除 components 目录下的 HelloWorld.vue 组件。</p><h3 id="1-2-修改项目的开发调试配置"><a href="#1-2-修改项目的开发调试配置" class="headerlink" title="1.2 修改项目的开发调试配置"></a>1.2 修改项目的开发调试配置</h3><p>1.在项目根目录中新建 vue.config.js 配置文件。</p><p>2.在 vue.config.js 配置文件中，通过 devServer 节点添加如下的配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br><span class="hljs-comment">// 修改 dev 期间的端口号</span><br><span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br><span class="hljs-comment">// 自动打开浏览器</span><br><span class="hljs-attr">open</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-初始化路由"><a href="#1-3-初始化路由" class="headerlink" title="1.3 初始化路由"></a>1.3 初始化路由</h3><p>1.运行如下的命令，在 vue2.x 的项目中安装 vue-router：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router -S<br></code></pre></td></tr></table></figure><p>2.在 src 目录下新建 router/index.js 路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 路由模块</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Vue-router&#x27;</span><br><br><span class="hljs-comment">// 安装路由插件</span><br>Vue.use(VueRouter);<br><br><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[]<span class="hljs-comment">// 路由规则</span><br>&#125;)；<br><br><span class="hljs-comment">// 向外共享路由实例对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>3.在 main.js 模块中导入并挂载路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index.js&#x27;</span><br><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="1-4-使用路由渲染-UserList-组件"><a href="#1-4-使用路由渲染-UserList-组件" class="headerlink" title="1.4 使用路由渲染 UserList 组件"></a>1.4 使用路由渲染 UserList 组件</h3><p>1.在 components 目录下新建 UserList.vue 组件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;h3&gt;UserLIst 组件&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;UserList&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>2.在 router/index.js 路由模块中新增如下的路由规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入要被渲染的组件</span><br><span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/UserList.vue&#x27;</span><br><br><span class="hljs-comment">// 声明路由规则</span><br><span class="hljs-keyword">const</span> router=<span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/users&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/users&#x27;</span>,<span class="hljs-attr">component</span>:UserList&#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.在 App.vue 中声明 router-view 路由占位符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="2-渲染用户列表组件"><a href="#2-渲染用户列表组件" class="headerlink" title="2. 渲染用户列表组件"></a>2. 渲染用户列表组件</h2><h3 id="2-1-安装并配置-axios"><a href="#2-1-安装并配置-axios" class="headerlink" title="2.1 安装并配置 axios"></a>2.1 安装并配置 axios</h3><p>1.运行如下的命令，在项目中安装 axios ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios -S<br></code></pre></td></tr></table></figure><p>2.在 main.js 中导入并配置 axios ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index.js&#x27;</span><br><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-comment">//全局配置axios</span><br>Vue.prototype.$http=axios;<br><span class="hljs-comment">//配置根路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span>;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router,<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-2-请求用户列表的数据"><a href="#2-2-请求用户列表的数据" class="headerlink" title="2.2 请求用户列表的数据"></a>2.2 请求用户列表的数据</h3><p>1.在 UserList.vue 组件中声明如下的 data 数据节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">userlist</span>:[],<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2.在 created 生命周期函数中预调用 getUserList 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.getUserList();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在 methods 中声明 getUserList 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getUserList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;data&#125;=<span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&#x27;/api/users&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(data.status!==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取用户信息失败&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.userlist=data.data;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="2-3-解决跨域请求限制"><a href="#2-3-解决跨域请求限制" class="headerlink" title="2.3 解决跨域请求限制"></a>2.3 解决跨域请求限制</h3><blockquote><p>由于 API 接口服务器并没有开启 CORS 跨域资源共享，因此终端会提示如下的错误：<br>Access to XMLHttpRequest at ‘ <a href="https://www.escook.cn/api/users">https://www.escook.cn/api/users</a> ‘ from origin ‘ <a href="http://l/">http://l</a><br>ocalhost:3000 ‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’<br>header is present on the requested resource.  </p></blockquote><p>解决方案：<br>通过 vue.config.js 中的 devServer.proxy 即可在开发环境下将 API 请求代理到 API 服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">devServer</span>:&#123;<br>        <span class="hljs-comment">// 修改dev期间的端口号</span><br>        <span class="hljs-attr">port</span>:<span class="hljs-number">3000</span>,<br>        <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">proxy</span>:<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时，在 main.js 入口文件中，需要把 axios 的根路径改造为开发服务器的根路径：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置根路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>;<br><span class="hljs-comment">//全局配置axios</span><br>Vue.prototype.$http=axios;<br></code></pre></td></tr></table></figure><blockquote><p>注意：devServer.proxy 提供的代理功能，仅在开发调试阶段生效。项目上线发布时，依旧需要<br>API 接口服务器开启 CORS 跨域资源共享  </p></blockquote><p>修改vue.config.js的配置后，需要重启打包的服务器。</p><h3 id="2-4-安装并配置-element-ui"><a href="#2-4-安装并配置-element-ui" class="headerlink" title="2.4 安装并配置 element-ui"></a>2.4 安装并配置 element-ui</h3><p>1.运行如下的命令，在项目中安装 element-ui 组件库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i element-ui -S<br></code></pre></td></tr></table></figure><p>2.在 main.js 中配置 element-ui：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><br>Vue.use(ElementUI);<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><p>3.在UserList.vue 中使用<a href="https://element.eleme.cn/#/zh-CN/component/table">https://element.eleme.cn/#/zh-CN/component/table</a> Element-ui的表格样式，并配置好数据。</p><p>当<code>el-table</code>元素中注入<code>data</code>对象数组后，在<code>el-table-column</code>中用<code>prop</code>属性来对应对象中的键名即可填入数据，用<code>label</code>属性来定义表格的列名。可以使用<code>width</code>属性来定义列宽。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111920170.png" alt="image-20210811192005052"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 用户的表格 --&gt;<br>    &lt;el-table :data=&quot;userlist&quot; style=&quot;width: 100%&quot;&gt;<br>      &lt;el-table-column prop=&quot;id&quot; label=&quot;#&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=&quot;age&quot; label=&quot;年龄&quot;&gt; &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=&quot;position&quot; label=&quot;头衔&quot;&gt; &lt;/el-table-column&gt;<br>      &lt;el-table-column prop=&quot;addtime&quot; label=&quot;创建时间&quot;&gt; &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111930881.png" alt="image-20210811193033787"></p><p>接着为表格添加一些<a href="https://element.eleme.cn/#/zh-CN/component/table#dai-ban-ma-wen-biao-ge">样式</a>，如添加stripe属性。默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用<code>border</code>属性，它接受一个<code>Boolean</code>，设置为<code>true</code>即可启用。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111927544.png" alt="image-20210811192753470"></p><p>如果想要第一列渲染中id，可以使用<code>type=&quot;index&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column type=&quot;index&quot; width=&quot;50&quot; label=&quot;#&quot; &gt; &lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5-自定义时间的格式"><a href="#2-5-自定义时间的格式" class="headerlink" title="2.5 自定义时间的格式"></a>2.5 自定义时间的格式</h3><p><code>el-table-column</code> 组件内部提供了一个默认插槽，可以获取到 row, column, $index这些数据。在UserList.vue中，通过接收插槽的数据，来自定义时间格式。</p><p><code>scope.row</code>会返回当前行的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&quot;创建时间&quot;&gt;<br>  &lt;template v-slot:default=&quot;scope&quot;&gt;&#123;&#123; scope.row.addtime &#125;&#125;&lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>之后使用一个过滤器，对时间进行格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&quot;创建时间&quot;&gt;<br>  &lt;template v-slot:default=&quot;scope&quot;&gt;&#123;&#123; scope.row.addtime|dateFormat &#125;&#125;&lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>在main.js中声明一个全局的过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.filter(<span class="hljs-string">&#x27;dateFormat&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> d=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(value);<br>  <span class="hljs-keyword">const</span> y=d.getFullYear();<br>  <span class="hljs-keyword">const</span> mm=d.getMonth()+<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> date=d.getDate();<br>  <span class="hljs-keyword">const</span> h=d.getHours();<br>  <span class="hljs-keyword">const</span> m=d.getMinutes();<br>  <span class="hljs-keyword">const</span> s=d.getSeconds();<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;padZero(mm)&#125;</span>-<span class="hljs-subst">$&#123;padZero(date)&#125;</span> <span class="hljs-subst">$&#123;padZero(h)&#125;</span>:<span class="hljs-subst">$&#123;padZero(m)&#125;</span>:<span class="hljs-subst">$&#123;padZero(s)&#125;</span>`</span>;<br>&#125;)<br><br><span class="hljs-comment">//声明一个时间不足2位则补0的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">padZero</span>(<span class="hljs-params">n</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> n&gt;<span class="hljs-number">9</span>? n:<span class="hljs-string">&#x27;0&#x27;</span>+n;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-增加操作栏"><a href="#2-6-增加操作栏" class="headerlink" title="2.6 增加操作栏"></a>2.6 增加操作栏</h3><p>首先，在UserList.vue中增加一列，label名为操作，然后在默认插槽中添加2个a标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&#x27;操作&#x27; width=&quot;120&quot;&gt;<br>  &lt;template&gt;<br>    &lt;div&gt;<br>      &lt;a href=&quot;#&quot;&gt;详情&lt;/a&gt; &amp;nbsp;<br>      &lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><h3 id="2-7-添加新用户的弹出框"><a href="#2-7-添加新用户的弹出框" class="headerlink" title="2.7 添加新用户的弹出框"></a>2.7 添加新用户的弹出框</h3><p>在UserList.vue中，添加一个按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 添加按钮 --&gt;<br>&lt;!-- primary 表示 是蓝色的按钮 --&gt;<br>&lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = true&quot;&gt;添加新用户&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><p>此时，希望列表和按钮有一定的间距。而element组件的标签名就是类名，因此可以这样写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-table</span>&#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108112104982.png" alt="image-20210811210439793"></p><p>当点击添加新用户的时候，希望弹出一个填充信息的对话框。在element-ui中，找到对应的对话框组件<a href="https://element.eleme.cn/#/zh-CN/component/dialog%E3%80%82">https://element.eleme.cn/#/zh-CN/component/dialog。</a></p><p>需要设置<code>dialogVisible</code>属性，它接收<code>Boolean</code>，当为<code>true</code>时显示 Dialog。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 添加按钮 --&gt;<br>&lt;!-- primary 表示 是蓝色的按钮 --&gt;<br>&lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = true&quot;&gt;添加新用户&lt;/el-button&gt;<br>&lt;!-- 添加用户的对话框 --&gt;<br>&lt;el-dialog<br>  title=&quot;提示&quot;<br>  :visible.sync=&quot;dialogVisible&quot;<br>  width=&quot;50%&quot;&gt;<br>  &lt;span&gt;这是一段信息&lt;/span&gt;<br>  &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>    &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取 消&lt;/el-button&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确 定&lt;/el-button&gt;<br>  &lt;/span&gt;<br>&lt;/el-dialog&gt;<br></code></pre></td></tr></table></figure><p>在data中，要添加dialogVisible为false这个数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">userlist</span>: [],<br>    <span class="hljs-comment">// 控制对话框的显示与隐藏</span><br>    <span class="hljs-attr">dialogVisible</span>: <span class="hljs-literal">false</span><br>  &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><p>将弹出框的提示内容改为表单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 添加用户的表单 表单中填充的数据会保存在form中 --&gt;<br>&lt;el-form ref=&quot;form&quot; :model=&quot;form&quot;&gt;&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><p>同时，在data中声明一个form的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">userlist</span>: [],<br>    <span class="hljs-comment">// 控制对话框的显示与隐藏</span><br>    <span class="hljs-attr">dialogVisible</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 要采集用户信息的对象</span><br>    <span class="hljs-attr">form</span>:&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">postion</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;<br>  &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><p>接着给表单，增加文本输入框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;<br>  &lt;!-- 采集用户的姓名 --&gt;<br>  &lt;el-form-item label=&quot;用户姓名&quot;&gt;<br>    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;年龄&quot;&gt;<br>    &lt;el-input v-model=&quot;form.age&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;头衔&quot;&gt;<br>    &lt;el-input v-model=&quot;form.postion&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108112126735.png" alt="image-20210811212639641"></p><h3 id="2-8-实现表单验证"><a href="#2-8-实现表单验证" class="headerlink" title="2.8 实现表单验证"></a>2.8 实现表单验证</h3><p>为UserList.vue中的表单，添加表单验证，具体可见在<a href="https://element.eleme.cn/#/zh-CN/component/form#biao-dan-yan-zheng%E3%80%82">https://element.eleme.cn/#/zh-CN/component/form#biao-dan-yan-zheng。</a></p><blockquote><p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。</p></blockquote><p>首先在data中，声明表单的验证规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//表单的验证规则对象</span><br><span class="hljs-attr">formRules</span>: &#123;<br>  <span class="hljs-attr">name</span>: [<br>    <span class="hljs-comment">// messge为错误提示信息，trigger:blur 表示失去焦点时触发验证</span><br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;姓名为必填项&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">15</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;长度在 2 到 15 个字符&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>  ],<br>  <span class="hljs-attr">age</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;年龄为必填项&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>  ],<br>  <span class="hljs-attr">postion</span>:[<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;头衔为必填项&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;长度在 1 到 10个字符&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure><p>接着在表单中，用prop接收验证规则。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form :model=&quot;form&quot; label-width=&quot;80px&quot; :rules=&quot;formRules&quot;&gt;<br>  &lt;!-- 采集用户的姓名 --&gt;<br>  &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;name&quot;&gt;<br>    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;年龄&quot; prop=&#x27;age&#x27;&gt;<br>    &lt;el-input v-model.number=&quot;form.age&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;el-form-item label=&quot;头衔&quot; prop=&#x27;postion&#x27;&gt;<br>    &lt;el-input v-model=&quot;form.postion&quot;&gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><h3 id="2-9-自定义验证规则"><a href="#2-9-自定义验证规则" class="headerlink" title="2.9 自定义验证规则"></a>2.9 自定义验证规则</h3><p>对于年龄大小的验证，element-ui并没有提供相应的验证规则。因此，可以<a href="https://element.eleme.cn/#/zh-CN/component/form#zi-ding-yi-xiao-yan-gui-ze">自定义验证规则</a>。在data中声明一个验证年龄的函数，接着通过规则中的validator属性调用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-comment">// 声明校验年龄的函数</span><br>  <span class="hljs-keyword">let</span> checkAge=<span class="hljs-function">(<span class="hljs-params">rule,value,callback</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(rule);<br>    <span class="hljs-comment">// 判断年龄是否为整数</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">Number</span>.isInteger(value))&#123;<br>      <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;年龄必须为整数&#x27;</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span>(value&gt;<span class="hljs-number">100</span>||value&lt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;年龄必须在1~100之间!&#x27;</span>));<br>    <span class="hljs-comment">// 直接调用callback函数 代表验证通过</span><br>    callback();<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">//表单的验证规则对象</span><br>    <span class="hljs-attr">formRules</span>: &#123;<br>      <span class="hljs-attr">age</span>: [<br>        &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;年龄为必填项&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>        &#123;<span class="hljs-attr">validator</span>: checkAge, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>        ],<br>    &#125;,<br>    <span class="hljs-comment">// 声明校验年龄的函数</span><br>  &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="2-10-清空表单"><a href="#2-10-清空表单" class="headerlink" title="2.10 清空表单"></a>2.10 清空表单</h3><p>在关闭表单后，希望重置表单的内容，并且重置校验的结果。以免第二次打开，还是上一次的结果。</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108112208120.png" alt="image-20210811220826024" style="zoom:50%;" /><p>element-ui的弹出框组件，有如下几种事件。可以通过监听关闭事件，来实现清空表单的功能。</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">open</td><td align="left">Dialog 打开的回调</td><td align="left">—</td></tr><tr><td align="left">opened</td><td align="left">Dialog 打开动画结束时的回调</td><td align="left">—</td></tr><tr><td align="left">close</td><td align="left">Dialog 关闭的回调</td><td align="left">—</td></tr><tr><td align="left">closed</td><td align="left">Dialog 关闭动画结束时的回调</td><td align="left">—</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- @close=&#x27;onDialogClose&#x27;监听对话框的关闭对话框 --&gt;<br>&lt;el-dialog title=&quot;添加新用户&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;50%&quot; @close=&#x27;onDialogClose&#x27;&gt;<br>&lt;/el-dialog&gt;<br></code></pre></td></tr></table></figure><p>接着在methods函数中，声明<code>onDialogClose</code>函数，用于清空表单。</p><p>我的想法很简单，直接将双向绑定的表单数据清空。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-comment">// 监听对话框关闭的事件</span><br>  <span class="hljs-function"><span class="hljs-title">onDialogClose</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.form.name=<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-built_in">this</span>.form.age=<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-built_in">this</span>.form.postion=<span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>老师的想法更加高级，通过使用ref属性，为element-ui的表单组件添加引用名称，接着使用$refs可以调用<a href="https://element.eleme.cn/#/zh-CN/component/form#form-methods">组件清空表单的方法</a>。</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">validate</td><td align="left">对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise</td><td align="left">Function(callback: Function(boolean, object))</td></tr><tr><td align="left">validateField</td><td align="left">对部分表单字段进行校验的方法</td><td align="left">Function(props: array | string, callback: Function(errorMessage: string))</td></tr><tr><td align="left">resetFields</td><td align="left">对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</td><td align="left">—</td></tr><tr><td align="left">clearValidate</td><td align="left">移除表单项的校验结果。传入待移除的表单项的 prop 属性或者 prop 组成的数组，如不传则移除整个表单的校验结果</td><td align="left">Function(props: array | string)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form :model=&quot;form&quot; label-width=&quot;80px&quot; :rules=&quot;formRules&quot; ref=&#x27;myaddForm&#x27;&gt;<br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-comment">// 监听对话框关闭的事件</span><br>  <span class="hljs-function"><span class="hljs-title">onDialogClose</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//拿到Form表单的引用，调用resetFields</span><br>    <span class="hljs-built_in">this</span>.$refs.myaddForm.resetFields();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>);<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="2-11-处理确认按钮"><a href="#2-11-处理确认按钮" class="headerlink" title="2.11 处理确认按钮"></a>2.11 处理确认按钮</h3><p>当点击了确认按钮后，需要对表单的数据进行预校验，当表单验证通过后，再发送ajax请求。</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108120933989.png" alt="image-20210812093321898" style="zoom:33%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>  &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取 消&lt;/el-button&gt;<br>  &lt;el-button type=&quot;primary&quot; @click=&quot;onAddNewUser&quot;<br>    &gt;确 定&lt;/el-button<br>  &gt;<br>&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>新声明一个<code>onAddNewUser</code>的的函数，处理点击确认按钮的事件。Element-ui的表单组件有一个validate方法，用于对整个表单进行校验。</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">validate</td><td align="left">对整个表单进行校验的方法，参数为一个回调函数。该回调函数会在校验结束后被调用，并传入两个参数：是否校验成功和未通过校验的字段。若不传入回调函数，则会返回一个 promise</td><td align="left">Function(callback: Function(boolean, object))</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onAddNewUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs.myaddForm.validate (valid) =&gt; &#123;<br>      <span class="hljs-comment">//验证不通过直接返回</span><br>    <span class="hljs-keyword">if</span> (!valid) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 需要执行添加业务的处理 发送ajax请求</span><br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="3-项目用到的api"><a href="#3-项目用到的api" class="headerlink" title="3. 项目用到的api"></a>3. 项目用到的api</h2><h3 id="3-1-请求根路径"><a href="#3-1-请求根路径" class="headerlink" title="3.1 请求根路径"></a>3.1 请求根路径</h3><p><a href="https://www.escook.cn/">https://www.escook.cn/</a></p><h3 id="3-2-获取用户列表"><a href="#3-2-获取用户列表" class="headerlink" title="3.2 获取用户列表"></a>3.2 获取用户列表</h3><p>请求方式：</p><ul><li>GET  </li></ul><p>请求地址：</p><ul><li>/api/users</li></ul><p>请求参数：</p><ul><li>无  </li></ul><h3 id="3-3-添加用户"><a href="#3-3-添加用户" class="headerlink" title="3.3 添加用户"></a>3.3 添加用户</h3><p>请求方式：</p><ul><li>POST</li></ul><p>请求地址：</p><ul><li>/api/users</li></ul><p>请求参数：</p><ul><li><p>name 用户姓名（1 - 15 个字符之间）</p></li><li><p>age 用户年龄（1 - 100 之间）</p></li><li><p>position 职位（1 - 10 个字符之间）</p></li></ul><p>请求结果：</p><ul><li>status 的值等于 0 表示成功  </li></ul><h3 id="3-4-删除用户"><a href="#3-4-删除用户" class="headerlink" title="3.4 删除用户"></a>3.4 删除用户</h3><p>请求方式：</p><ul><li>delete</li></ul><p>请求地址：</p><ul><li>/api/users/:id</li></ul><p>请求参数：</p><ul><li>id 要删除的用户的Id（URL参数）</li></ul><p>请求结果：</p><ul><li>status 的值等于 0 表示成功  </li></ul><h3 id="3-5-获取用户信息"><a href="#3-5-获取用户信息" class="headerlink" title="3.5 获取用户信息"></a>3.5 获取用户信息</h3><p>请求方式：</p><ul><li>GET</li></ul><p>请求地址：</p><ul><li>/api/users/:id</li></ul><p>请求参数：</p><ul><li>id 要查询的用户的Id（URL参数）</li></ul><p>请求结果：</p><ul><li>status 的值等于 0 表示成功  </li></ul><h2 id="4-发送ajax请求"><a href="#4-发送ajax请求" class="headerlink" title="4. 发送ajax请求"></a>4. 发送ajax请求</h2><h3 id="4-1-发送添加用户的请求"><a href="#4-1-发送添加用户的请求" class="headerlink" title="4.1 发送添加用户的请求"></a>4.1 发送添加用户的请求</h3><p>在UserList.vue中，当点击了确认添加用户后，需要发送ajax请求到服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onAddNewUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs.myaddForm.validate(<span class="hljs-keyword">async</span> (valid) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!valid) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 需要执行添加业务的处理 发送ajax请求</span><br>    <span class="hljs-comment">// 注意async的位置</span><br>    <span class="hljs-keyword">let</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.post(<span class="hljs-string">&quot;/api/users&quot;</span>, &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-built_in">this</span>.form.name,<br>      <span class="hljs-attr">age</span>: <span class="hljs-built_in">this</span>.form.age,<br>      <span class="hljs-attr">position</span>: <span class="hljs-built_in">this</span>.form.position,<br>    &#125;);<br>    <span class="hljs-keyword">if</span> (data.status !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&quot;添加失败&quot;</span>);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;添加成功&#x27;</span>);<br>    <span class="hljs-comment">// 添加成功后，关闭对话框</span><br>    <span class="hljs-built_in">this</span>.dialogVisible = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 重新发起ajax请求，刷新列表</span><br>    <span class="hljs-built_in">this</span>.getUserList();<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="4-2-优化信息提示"><a href="#4-2-优化信息提示" class="headerlink" title="4.2 优化信息提示"></a>4.2 优化信息提示</h3><p>当出错或成功后，不应该直接在控制台输出或者弹出alert对话框。应该将信息输出到页面来提示用户。</p><blockquote><p>如果是完整引入element，则Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 <code>Message</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onAddNewUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs.myaddForm.validate(<span class="hljs-keyword">async</span> (valid) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!valid) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 需要执行添加业务的处理 发送ajax请求</span><br>    <span class="hljs-comment">// 注意async的位置</span><br>    <span class="hljs-keyword">let</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.post(<span class="hljs-string">&quot;/api/users&quot;</span>, &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-built_in">this</span>.form.name,<br>      <span class="hljs-attr">age</span>: <span class="hljs-built_in">this</span>.form.age,<br>      <span class="hljs-attr">position</span>: <span class="hljs-built_in">this</span>.form.position,<br>    &#125;);<br>    <span class="hljs-keyword">if</span> (data.status !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;添加用户失败！&#x27;</span>);<br>    <span class="hljs-comment">// 提示添加成功</span><br>    <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&#x27;添加成功！&#x27;</span>);<br>    <br>    <span class="hljs-comment">// 添加成功后，关闭对话框</span><br>    <span class="hljs-built_in">this</span>.dialogVisible = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 重新发起ajax请求，刷新列表</span><br>    <span class="hljs-built_in">this</span>.getUserList();<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-确认删除弹出框"><a href="#4-3-确认删除弹出框" class="headerlink" title="4.3 确认删除弹出框"></a>4.3 确认删除弹出框</h3><p>在UserList.vue中，当点击了删除后，应该弹出对话框提示用户是否删除。使用element ui的弹出框组件，<a href="https://element.eleme.cn/#/zh-CN/component/message-box#que-ren-xiao-xi%E3%80%82">https://element.eleme.cn/#/zh-CN/component/message-box#que-ren-xiao-xi。</a></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108121038660.png" alt="image-20210812103806599"></p><blockquote><p>调用<code>$confirm</code>方法即可打开消息提示，它模拟了系统的 <code>confirm</code>。Message Box 组件也拥有极高的定制性，我们可以传入<code>options</code>作为第三个参数，它是一个字面量对象。<code>type</code>字段表明消息类型，可以为<code>success</code>，<code>error</code>，<code>info</code>和<code>warning</code>，无效的设置将会被忽略。注意，第二个参数<code>title</code>必须定义为<code>String</code>类型，如果是<code>Object</code>，会被理解为<code>options</code>。在这里我们用了 Promise 来处理后续响应。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&quot;操作&quot; width=&quot;120&quot;&gt;<br>  &lt;template&gt;<br>    &lt;div&gt;<br>      &lt;a href=&quot;#&quot;&gt;详情&lt;/a&gt; &amp;nbsp;<br>      &lt;a href=&quot;#&quot; @click.prevent=&quot;onRemove&quot;&gt;删除&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onRemove</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&quot;此操作将永久删除该用户, 是否继续?&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, &#123;<br>    <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>    <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&quot;取消&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;warning&quot;</span>,<br>  &#125;)<br>    .then(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>    &#125;)<br>    .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.$message.info(<span class="hljs-string">&#x27;已取消删除&#x27;</span>)<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="4-4-实现删除功能"><a href="#4-4-实现删除功能" class="headerlink" title="4.4 实现删除功能"></a>4.4 实现删除功能</h3><p>为了拿到用户的id，应该将默认插槽改为作用域插槽。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table-column label=&quot;操作&quot; width=&quot;120&quot;&gt;<br>  &lt;!-- v-slot=&#x27;&#123;row&#125;&#x27; --&gt;<br>  &lt;!-- #default=&#x27;&#123;row&#125;&#x27; --&gt;<br>  &lt;template v-slot:default=&quot;&#123; row &#125;&quot;&gt;<br>    &lt;div&gt;<br>      &lt;a href=&quot;#&quot;&gt;详情&lt;/a&gt; &amp;nbsp;<br>      &lt;a href=&quot;#&quot; @click.prevent=&quot;onRemove(row.id)&quot;&gt;删除&lt;/a&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>接着当用户点击确认的时候，发起ajax请求，删除数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 点击了删除的链接</span><br><span class="hljs-function"><span class="hljs-title">onRemove</span>(<span class="hljs-params">id</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&quot;此操作将永久删除该用户, 是否继续?&quot;</span>, <span class="hljs-string">&quot;提示&quot;</span>, &#123;<br>    <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>    <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&quot;取消&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;warning&quot;</span>,<br>  &#125;)<br>    <span class="hljs-comment">// 点击确认按钮</span><br>    .then(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">let</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.delete(<span class="hljs-string">&quot;/api/users/&quot;</span> + id);<br>      <span class="hljs-keyword">if</span> (data.status !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&quot;删除用户失败！&quot;</span>);<br>      <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>      <span class="hljs-comment">// 重新发起ajax请求，刷新列表数据</span><br>      <span class="hljs-built_in">this</span>.getUserList();<br>    &#125;)<br>    <span class="hljs-comment">// 点击取消按钮</span><br>    .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.$message.info(<span class="hljs-string">&quot;已取消删除&quot;</span>);<br>    &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="4-5-声明式导航跳转到用户详情页"><a href="#4-5-声明式导航跳转到用户详情页" class="headerlink" title="4.5 声明式导航跳转到用户详情页"></a>4.5 声明式导航跳转到用户详情页</h3><p>将详情的a链接改为<code>&lt;router-link&gt;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template v-slot:default=&quot;&#123; row &#125;&quot;&gt;<br>  &lt;div&gt;<br>    &lt;router-link :to=&quot;&#x27;/users/&#x27;+row.id&quot;&gt;详情&lt;/router-link&gt; &amp;nbsp;<br>    &lt;a href=&quot;#&quot; @click.prevent=&quot;onRemove(row.id)&quot;&gt;删除&lt;/a&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>新建并初始化<code>UserDetails.vue</code> 组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;h3&gt;UserDetail 组件&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;UserDetail&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>在<code>router/index.js</code> 中添加对应的路由规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入要被渲染的组件</span><br><span class="hljs-comment">// 在vue-cli中 @代表src目录</span><br><span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/UserList.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> UserDetail <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/UserDetail.vue&#x27;</span>;<br><br><br><span class="hljs-comment">// 声明路由规则</span><br><span class="hljs-keyword">const</span> router=<span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/users&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/users&#x27;</span>,<span class="hljs-attr">component</span>:UserList&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/users/:id&#x27;</span>,<span class="hljs-attr">component</span>:UserDetail&#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-6-查询用户信息"><a href="#4-6-查询用户信息" class="headerlink" title="4.6 查询用户信息"></a>4.6 查询用户信息</h3><p>在<code>router/index.js</code>，开启props传参。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router=<span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/users&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/users&#x27;</span>,<span class="hljs-attr">component</span>:UserList&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/users/:id&#x27;</span>,<span class="hljs-attr">component</span>:UserDetail,<span class="hljs-attr">props</span>:<span class="hljs-literal">true</span>&#125;<br>    ],<br>&#125;)<br></code></pre></td></tr></table></figure><p>在<code>UserDetails.vue</code> 中接收路由传递的id，并在created生命周期函数中发起ajax请求，查询用户信息，最后将查询到的信息赋值给<code>userInfo</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;UserDetail&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">userInfo</span>: &#123;&#125;,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-comment">// 接收路由传递的id</span><br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;id&quot;</span>],<br>  <span class="hljs-comment">// 发起ajax请求，查询用户信息</span><br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.getUserInfo();<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getUserInfo</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">let</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&quot;api/users/&quot;</span> + <span class="hljs-built_in">this</span>.id);<br>      <span class="hljs-keyword">if</span> (data.status !== <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&quot;获取用户信息失败&quot;</span>);<br>      <span class="hljs-built_in">this</span>.userInfo = data.data;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.userInfo);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-7-展示查询的信息"><a href="#4-7-展示查询的信息" class="headerlink" title="4.7 展示查询的信息"></a>4.7 展示查询的信息</h3><p>使用element-ui的<a href="https://element.eleme.cn/#/zh-CN/component/card#ji-chu-yong-fa">卡片组件</a>，展示查询到的用户信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-card class=&quot;box-card&quot;&gt;<br>      &lt;div slot=&quot;header&quot; class=&quot;clearfix&quot;&gt;<br>        &lt;span&gt;用户详情&lt;/span&gt;<br>        &lt;el-button style=&quot;float: right; padding: 3px 0&quot; type=&quot;text&quot;<br>          &gt;返回&lt;/el-button<br>        &gt;<br>      &lt;/div&gt;<br>      &lt;div  class=&quot;text item&quot;&gt;<br>       &lt;p&gt;姓名：&#123;&#123;userInfo.name&#125;&#125;&lt;/p&gt;<br>       &lt;p&gt;年龄：&#123;&#123;userInfo.age&#125;&#125;&lt;/p&gt;<br>       &lt;p&gt;头衔：&#123;&#123;userInfo.position&#125;&#125;&lt;/p&gt;<br>      &lt;/div&gt;<br>    &lt;/el-card&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>为返回按钮添加点击事件的监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-button style=&quot;float: right; padding: 3px 0&quot; type=&quot;text&quot; @click=&#x27;goBack&#x27;&gt;<br>    返回<br>&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><p>通过编程式导航，实现后退功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">goBack()&#123;<br>    this.$router.go(-1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-实现loading效果"><a href="#5-实现loading效果" class="headerlink" title="5.实现loading效果"></a>5.实现loading效果</h2><p>使用element-ui的<a href="https://element.eleme.cn/#/zh-CN/component/loading#zheng-ye-jia-zai">loading组件</a>，实现加载效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 按需导入Loading效果组件</span><br><span class="hljs-keyword">import</span> &#123;Loading&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br><span class="hljs-comment">//2. 声明变量，用来存储loading组件的实例对象</span><br><span class="hljs-keyword">let</span> loadingInstance = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 配置请求的拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 3.调用loading组件的servie()方法，创建Loading组件的实例，并全屏展示loading效果</span><br>    loadingInstance=Loading.service(&#123;<span class="hljs-attr">fullsreen</span>:<span class="hljs-literal">true</span>&#125;);<br> <span class="hljs-keyword">return</span> config;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 调用loading实例的close 方法即可关闭loading效果</span><br>    loadingInstance.close();<br>    <span class="hljs-keyword">return</span> response;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>小案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-cli学习_ElementUI_axios 拦截器_proxy代理</title>
    <link href="/2021/08/11/Vue-cli%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/11/Vue-cli%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><h2 id="1-什么是-vue-cli"><a href="#1-什么是-vue-cli" class="headerlink" title="1.什么是 vue-cli"></a>1.什么是 vue-cli</h2><p>vue-cli（俗称：vue 脚手架）是 vue 官方提供的、快速生成 vue 工程化项目的工具。</p><p>特点：</p><p>① 开箱即用</p><p>② 基于 webpack</p><p>③ 功能丰富且易于扩展</p><p>④ 支持创建 vue2 和 vue3 的项目</p><p>vue-cli 的中文官网首页：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a> </p><h2 id="2-安装-vue-cli"><a href="#2-安装-vue-cli" class="headerlink" title="2. 安装 vue-cli"></a>2. 安装 vue-cli</h2><p>vue-cli 是基于 Node.js 开发出来的工具，因此需要使用 npm 将它安装为全局可用的工具：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g @vue/cli<br><br><span class="hljs-comment"># 查看vue-cli的版本，检查是否安装成功</span><br>vue --version<br></code></pre></td></tr></table></figure><h2 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h2><p>vue-cli 提供了创建项目的两种方式：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基于命令行创建vue项目</span><br>vue create 项目名称<br><span class="hljs-comment"># OR基于可视化面板创建vue项目</span><br>vue ui<br></code></pre></td></tr></table></figure><h2 id="4-基于-vue-ui-创建-vue-项目"><a href="#4-基于-vue-ui-创建-vue-项目" class="headerlink" title="4.基于 vue ui 创建 vue 项目"></a>4.基于 vue ui 创建 vue 项目</h2><p>步骤1：在终端下运行 vue ui 命令，自动在浏览器中打开创建项目的可视化面板：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111236849.png" alt="image-20210811123643781" style="zoom:50%;" /><p>步骤2：在详情页面填写项目名称：  </p><img src="C:\Users\liujiaqi\AppData\Roaming\Typora\typora-user-images\image-20210811133059381.png" alt="image-20210811133059381" style="zoom:50%;" /><p>步骤3：在预设页面选择手动配置项目：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111331143.png" alt="image-20210811133142100" style="zoom:50%;" /><p>步骤4：在功能页面勾选需要安装的功能（Choose Vue Version、Babel、CSS 预处理器、<strong>使用配置文件</strong>）：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111332107.png" alt="image-20210811133258059" style="zoom:50%;" /><p>步骤5：在配置页面勾选 vue 的版本和需要的预处理器：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111333025.png" alt="image-20210811133339970" style="zoom:50%;" /><p>步骤6：将刚才所有的配置保存为预设（模板），方便下一次创建项目时直接复用之前的配置：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111334801.png" alt="image-20210811133451758"></p><p>步骤7：创建项目并自动安装依赖包：  </p><p>vue ui 的本质：通过可视化的面板<strong>采集</strong>到用户的配置信息后，在后台<strong>基于命令行的方式</strong>自动初始化项目。 </p><p>项目创建完成后，自动进入项目仪表盘：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111338126.png" alt="image-20210811133810035"></p><h2 id="5-基于命令行创建-vue-项目"><a href="#5-基于命令行创建-vue-项目" class="headerlink" title="5. 基于命令行创建 vue 项目"></a>5. 基于命令行创建 vue 项目</h2><p>步骤1：在终端下运行 vue create demo2 命令，基于交互式的命令行创建 vue 的项目：  通过上下箭头选择<code>manually select features</code>。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111350085.png" alt="image-20210811135039039"></p><p>步骤2：选择要安装的功能：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111353298.png" alt="image-20210811135314263"></p><p>步骤3：使用上下箭头选择 vue 的版本，并使用回车键确认选择： </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111354393.png" alt="image-20210811135404359"> </p><p>步骤4：使用上下箭头选择要使用的 css 预处理器，并使用回车键确认选择：  </p><p>步骤5：使用上下箭头选择如何存储插件的配置信息，并使用回车键确认选择：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111354834.png" alt="image-20210811135441797"></p><p>步骤6：是否将刚才的配置保存为预设：  </p><p>步骤7：选择如何安装项目中的依赖包：  </p><p>步骤8：开始创建项目并自动安装依赖包：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111355504.png" alt="image-20210811135535468"></p><p>步骤9：项目创建完成：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111356847.png" alt="image-20210811135600817"></p><h2 id="6-梳理-vue2-项目的基本结构"><a href="#6-梳理-vue2-项目的基本结构" class="headerlink" title="6. 梳理 vue2 项目的基本结构"></a>6. 梳理 vue2 项目的基本结构</h2><p>主要的文件：src -&gt; App.vue，src -&gt; main.js  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111358164.png" alt="image-20210811135839127" style="zoom:50%;" /><h2 id="7-分析-main-js-中的主要代码"><a href="#7-分析-main-js-中的主要代码" class="headerlink" title="7. 分析 main.js 中的主要代码"></a>7. 分析 main.js 中的主要代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 导入Vue的构造函数</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 2. 导入App根组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">//console面板的提示信息</span><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 3. 创建vue实例对象</span><br><span class="hljs-keyword">const</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App), <span class="hljs-comment">// 3.1使用render函数渲染App根组件</span><br>&#125;);<br><br>app.$mount(<span class="hljs-string">&#x27;#app&#x27;</span>) <span class="hljs-comment">// 3.2 把App根组件渲染到$mount 指定的el区域</span><br></code></pre></td></tr></table></figure><h2 id="8-在-vue2-的项目中使用路由"><a href="#8-在-vue2-的项目中使用路由" class="headerlink" title="8. 在 vue2 的项目中使用路由"></a>8. 在 vue2 的项目中使用路由</h2><p>在 vue2 的项目中，只能安装并使用 3.x 版本的 vue-router。</p><p>版本 3 和版本 4 的路由<strong>最主要</strong>的区别：<strong>创建路由模块的方式不同</strong>！  </p><h3 id="8-1-回顾：4-x-版本的路由如何创建路由模块"><a href="#8-1-回顾：4-x-版本的路由如何创建路由模块" class="headerlink" title="8.1 回顾：4.x 版本的路由如何创建路由模块"></a>8.1 回顾：4.x 版本的路由如何创建路由模块</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111416517.png" alt="image-20210811141623444"></p><h3 id="8-2-学习：3-x-版本的路由如何创建路由模块"><a href="#8-2-学习：3-x-版本的路由如何创建路由模块" class="headerlink" title="8.2 学习：3.x 版本的路由如何创建路由模块"></a>8.2 学习：3.x 版本的路由如何创建路由模块</h3><p>步骤1：在 vue2 的项目中安装 3.x 版本的路由：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router<br></code></pre></td></tr></table></figure><p>步骤2：在 src -&gt; components 目录下，创建需要使用路由切换的组件：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111422815.png" alt="image-20210811142250768"></p><p>步骤3：在 src 目录下创建 router -&gt; index.js 路由模块：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.导入vue2的构造函数</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;  <br><span class="hljs-comment">// 2.导入3.x路由的构造函数</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-comment">// 3.导入需要使用路由切换的两个组件</span><br><span class="hljs-comment">// 由vue-cli创建的项目，src目录的别名为@</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Home.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Movie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Movie.vue&#x27;</span>;<br><br><span class="hljs-comment">// 4.调用Vue.use()函数，把路由配置为Vue的插件</span><br>Vue.use(VueRouter);<br><br><span class="hljs-comment">// 5. 创建路由对象</span><br><span class="hljs-keyword">const</span> router= <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/home&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">component</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie&#x27;</span>,<span class="hljs-attr">component</span>:movie&#125;,<br>    ]<br>&#125;)<br><br><span class="hljs-comment">// 6.向外共享路由对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>步骤4：在 main.js 中导入路由模块，并通过 router 属性进行挂载：  </p><h1 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h1><h2 id="1-什么是-vue-组件库"><a href="#1-什么是-vue-组件库" class="headerlink" title="1.什么是 vue 组件库"></a>1.什么是 vue 组件库</h2><p>在实际开发中，前端开发者可以把自己封装的 .vue 组件整理、打包、并发布为 npm 的包，从而供其他人下载和使用。这种可以直接下载并在项目中使用的现成组件，就叫做 vue 组件库。  </p><h2 id="2-vue-组件库和-bootstrap-的区别"><a href="#2-vue-组件库和-bootstrap-的区别" class="headerlink" title="2. vue 组件库和 bootstrap 的区别"></a>2. vue 组件库和 bootstrap 的区别</h2><p>二者之间存在本质的区别：</p><ul><li>bootstrap 只提供了纯粹的原材料（ css 样式、HTML 结构以及 JS 特效），需要由开发者做进一步的组装和改造。</li><li>vue 组件库是遵循 vue 语法、高度定制的现成组件，开箱即用  。</li></ul><h2 id="3-最常用的-vue-组件库"><a href="#3-最常用的-vue-组件库" class="headerlink" title="3. 最常用的 vue 组件库"></a>3. 最常用的 vue 组件库</h2><p>① PC 端</p><ul><li><p>Element UI（<a href="https://element.eleme.cn/#/zh-CN%EF%BC%89">https://element.eleme.cn/#/zh-CN）</a></p></li><li><p>View UI（<a href="http://v1.iviewui.com/%EF%BC%89">http://v1.iviewui.com/）</a></p></li></ul><p>② 移动端</p><ul><li><p>Mint UI（<a href="http://mint-ui.github.io/#!/zh-cn%EF%BC%89">http://mint-ui.github.io/#!/zh-cn）</a></p></li><li><p>Vant（<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/%EF%BC%89">https://vant-contrib.gitee.io/vant/#/zh-CN/）</a>  </p></li></ul><h2 id="4-Element-UI"><a href="#4-Element-UI" class="headerlink" title="4. Element UI"></a>4. Element UI</h2><p>Element UI 是饿了么前端团队开源的一套 PC 端 vue 组件库。支持在 vue2 和 vue3 的项目中使用：</p><ul><li><p>vue2 的项目使用旧版的 Element UI（<a href="https://element.eleme.cn/#/zh-CN%EF%BC%89">https://element.eleme.cn/#/zh-CN）</a></p></li><li><p>vue3 的项目使用新版的 Element Plus（<a href="https://element-plus.gitee.io/#/zh-CN%EF%BC%89">https://element-plus.gitee.io/#/zh-CN）</a>  </p></li></ul><h3 id="4-1-在-vue2-的项目中安装-element-ui"><a href="#4-1-在-vue2-的项目中安装-element-ui" class="headerlink" title="4.1 在 vue2 的项目中安装 element-ui"></a>4.1 在 vue2 的项目中安装 element-ui</h3><p>运行如下的终端命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install element-ui<br></code></pre></td></tr></table></figure><h3 id="4-2-引入-element-ui"><a href="#4-2-引入-element-ui" class="headerlink" title="4.2 引入 element-ui"></a>4.2 引入 element-ui</h3><p>开发者可以一次性完整引入所有的 element-ui 组件，或是根据需求，只按需引入用到的 element-ui 组件：</p><ul><li>完整引入：操作简单，但是会额外引入一些用不到的组件，导致项目体积过大</li><li> 按需引入：操作相对复杂一些，但是只会引入用到的组件，能起到优化项目体积的目的  </li></ul><h3 id="4-3-完整引入"><a href="#4-3-完整引入" class="headerlink" title="4.3 完整引入"></a>4.3 完整引入</h3><p>在 main.js 中写入以下内容：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//1.完整引入element-ui 的组件</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-comment">// 2.导入element-ui的样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><br><span class="hljs-comment">// 3.把element-ui注册为vue的插件（注册后便可以在每一个组件中直接使用element ul的组件）</span><br>Vue.use(ElementUI);<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-4-按需引入"><a href="#4-4-按需引入" class="headerlink" title="4.4 按需引入"></a>4.4 按需引入</h3><p>借助 <code>babel-plugin-component</code>，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><p>步骤1，安装 babel-plugin-component：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-plugin-component -D<br></code></pre></td></tr></table></figure><p>步骤2，修改根目录下的 babel.config.js 配置文件，新增 plugins 节点如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">presets</span>: [<br>    <span class="hljs-string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span><br>  ],<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;component&quot;</span>,<br>      &#123;<br>        <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;element-ui&quot;</span>,<br>        <span class="hljs-string">&quot;styleLibraryName&quot;</span>: <span class="hljs-string">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤3，如果你只希望引入部分组件，比如 Button，那么需要在 main.js 中写入以下内容：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Button, Select &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><br><span class="hljs-comment">// 全局注册</span><br>Vue.component(Button.name, Button);<br>Vue.component(Select.name, Select);<br><span class="hljs-comment">/* 或写为</span><br><span class="hljs-comment"> * Vue.use(Button)</span><br><span class="hljs-comment"> * Vue.use(Select)</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-5-把组件的导入和注册封装为独立的模块"><a href="#4-5-把组件的导入和注册封装为独立的模块" class="headerlink" title="4.5 把组件的导入和注册封装为独立的模块"></a>4.5 把组件的导入和注册封装为独立的模块</h3><p>在 src 目录下新建 element-ui/index.js 模块，并声明如下的代码：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; Button, Select &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br>Vue.use(Button);<br>Vue.use(Select);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./element-ui/&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h1><h2 id="1-回顾：在-vue3-的项目中全局配置-axios"><a href="#1-回顾：在-vue3-的项目中全局配置-axios" class="headerlink" title="1. 回顾：在 vue3 的项目中全局配置 axios"></a>1. 回顾：在 vue3 的项目中全局配置 axios</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/06.network/App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-comment">// 1.导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><span class="hljs-comment">//2.配置请求根路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;http://www.escook.cn&#x27;</span>;<br><br><span class="hljs-comment">// 3.全局挂载axios</span><br>app.config.globalProperties.$http=axios;<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-在-vue2-的项目中全局配置-axios"><a href="#2-在-vue2-的项目中全局配置-axios" class="headerlink" title="2. 在 vue2 的项目中全局配置 axios"></a>2. 在 vue2 的项目中全局配置 axios</h2><p>需要在 main.js 入口文件中，通过 Vue 构造函数的 prototype 原型对象全局配置 axios：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Vue&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-comment">//1.导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-comment">//2.配置请求路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span>;<br><br><span class="hljs-comment">//3.通过vue构造函数的原型对象，全局配置axios</span><br>Vue.prototype.$http=axios<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">render</span>:<span class="hljs-function"><span class="hljs-params">h</span>=&gt;</span>h(App)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h2 id="3-什么是拦截器"><a href="#3-什么是拦截器" class="headerlink" title="3. 什么是拦截器"></a>3. 什么是拦截器</h2><p>拦截器（英文：Interceptors）会在每次发起 ajax 请求或得到响应的时候自动被触发。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111630897.png" alt="image-20210811163040844"></p><p>应用场景：</p><p>① Token 身份认证</p><p>② Loading 效果</p><h2 id="4-配置请求拦截器"><a href="#4-配置请求拦截器" class="headerlink" title="4. 配置请求拦截器"></a>4. 配置请求拦截器</h2><p>通过 <code>axios.interceptors.request.use(成功的回调, 失败的回调)</code> 可以配置请求拦截器。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>    <span class="hljs-comment">// 在发送请求之前做些什么</span><br>    <span class="hljs-comment">// 一定要把config return 出去</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>注意：失败的回调函数可以被省略！  </p><h3 id="4-1-请求拦截器-–-Token-认证"><a href="#4-1-请求拦截器-–-Token-认证" class="headerlink" title="4.1 请求拦截器 – Token 认证"></a>4.1 请求拦截器 – Token 认证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span>;<br><br><span class="hljs-comment">//配置请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//为当前请求配置token认证字段</span><br>    config.headers.Authorization=<span class="hljs-string">&#x27;Bearer xxx&#x27;</span>;<br>    <span class="hljs-comment">// 一定要把config return出去</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;)<br><br>Vue.prototype.$http=axios;<br></code></pre></td></tr></table></figure><h3 id="4-2-请求拦截器-–-展示-Loading-效果"><a href="#4-2-请求拦截器-–-展示-Loading-效果" class="headerlink" title="4.2 请求拦截器 – 展示 Loading 效果"></a>4.2 请求拦截器 – 展示 Loading 效果</h3><p>借助于 element ui 提供的 Loading 效果组件 （<a href="https://element.eleme.cn/#/zh-CN/component/loading%EF%BC%89">https://element.eleme.cn/#/zh-CN/component/loading）</a> 可以方便的实现 Loading 效果的展示：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 按需导入Loading效果组件</span><br><span class="hljs-keyword">import</span> &#123;Loading&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br><span class="hljs-comment">//2. 声明变量，用来存储loading组件的实例对象</span><br><span class="hljs-keyword">let</span> loadingInstance = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 配置请求的拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 3.调用loading组件的servie()方法，创建Loading组件的实例，并全屏展示loading效果</span><br>    loadingInstance=Loading.service(&#123;<span class="hljs-attr">fullsreen</span>:<span class="hljs-literal">true</span>&#125;);<br> <span class="hljs-keyword">return</span> config;<br>&#125;)<br></code></pre></td></tr></table></figure><p>不过，当加载完成后，loading的效果并没有被关闭，因此需要使用后面的响应拦截器。</p><h2 id="5-配置响应拦截器"><a href="#5-配置响应拦截器" class="headerlink" title="5. 配置响应拦截器"></a>5. 配置响应拦截器</h2><p>通过 <code>axios.interceptors.response.use(成功的回调, 失败的回调)</code> 可以配置响应拦截器。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// 2xx 范围内的状态码都会触发该函数。</span><br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 超出 2xx 范围的状态码都会触发该函数。</span><br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="5-1-响应拦截器-–-关闭-Loading-效果"><a href="#5-1-响应拦截器-–-关闭-Loading-效果" class="headerlink" title="5.1 响应拦截器 – 关闭 Loading 效果"></a>5.1 响应拦截器 – 关闭 Loading 效果</h3><p>调用 Loading 实例提供的 close() 方法即可关闭 Loading 效果，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 调用loading实例的close 方法即可关闭loading效果</span><br>    loadingInstance.close();<br>    <span class="hljs-keyword">return</span> response;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="proxy-跨域代理"><a href="#proxy-跨域代理" class="headerlink" title="proxy 跨域代理"></a>proxy 跨域代理</h1><h2 id="1-回顾：接口的跨域问题"><a href="#1-回顾：接口的跨域问题" class="headerlink" title="1. 回顾：接口的跨域问题"></a>1. 回顾：接口的跨域问题</h2><p>vue 项目运行的地址：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>API 接口运行的地址：<a href="https://www.escook.cn/api/users">https://www.escook.cn/api/users</a>  </p><p>由于当前的 API 接口没有开启 CORS 跨域资源共享，因此默认情况下，上面的接口无法请求成功！  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111706491.png" alt="image-20210811170621432"></p><h2 id="2-通过代理解决接口的跨域问题"><a href="#2-通过代理解决接口的跨域问题" class="headerlink" title="2. 通过代理解决接口的跨域问题"></a>2. 通过代理解决接口的跨域问题</h2><p>通过 vue-cli 创建的项目在遇到接口跨域问题时，可以通过代理的方式来解决：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108111707217.png" alt="image-20210811170744136"></p><p>① 把 axios 的请求根路径设置<strong>为 vue 项目的运行地址</strong>（接口请求不再跨域）</p><p>② vue 项目发现请求的接口不存在，把请求转交给 proxy 代理</p><p>③ 代理把请求根路径替换为 devServer.proxy 属性的值，发起真正的数据请求</p><p>④ 代理把请求到的数据，转发给 axios  </p><h2 id="3-在项目中配置-proxy-代理"><a href="#3-在项目中配置-proxy-代理" class="headerlink" title="3. 在项目中配置 proxy 代理"></a>3. 在项目中配置 proxy 代理</h2><p>步骤1，在 main.js 入口文件中，把 axios 的请求根路径改造为当前 web 项目的根路径：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求路径</span><br><span class="hljs-comment">// axios.defaults.baseURL=&#x27;https://www.escook.cn&#x27;;</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;http://localhost:8080/&#x27;</span>;<br></code></pre></td></tr></table></figure><p>步骤2，在项目<strong>根目录</strong>下创建 vue.config.js 的配置文件（是项目根目录，不是src目录下），并声明如下的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">devServer</span>:&#123;<br>        <span class="hljs-comment">//当前项目在开发调试阶段会将</span><br>        <span class="hljs-comment">// 任何未知请求配置（没有匹配到静态文件的请求）</span><br>        <span class="hljs-comment">// 代理到 https://www.escook.cn</span><br>        <span class="hljs-attr">proxy</span>:<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span>,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>① devServer.proxy 提供的代理功能，仅在开发调试阶段生效</p><p>② 项目上线发布时，依旧需要 API 接口服务器开启 CORS 跨域资源共享  </p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue-cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件基础</title>
    <link href="/2021/08/10/Vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/10/Vue%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h1><p>单页面应用程序（英文名：Single Page Application）简称 SPA，顾<br>名思义，指的是一个 Web 网站中只有唯一的一个 HTML 页面，所有的<br>功能与交互都在这唯一的一个页面内完成。  </p><h2 id="1-单页面应用程序的特点"><a href="#1-单页面应用程序的特点" class="headerlink" title="1. 单页面应用程序的特点"></a>1. 单页面应用程序的特点</h2><p>单页面应用程序将所有的功能局限于一个 web 页面中，<strong>仅在该 web 页面初始化时加载相应的资源</strong>（ HTML、JavaScript 和 CSS）。</p><p>一旦页面加载完成了，SPA <strong>不会</strong>因为用户的操作而<strong>进行页面的重新加载或跳转</strong>。而是利用 JavaScript 动态地变换HTML 的内容，从而实现页面与用户的交互。  </p><h2 id="2-单页面应用程序的优点"><a href="#2-单页面应用程序的优点" class="headerlink" title="2. 单页面应用程序的优点"></a>2. 单页面应用程序的优点</h2><p>SPA 单页面应用程序最显著的 3 个优点如下：</p><p>① 良好的交互体验</p><ul><li><p>单页应用的内容的改变不需要重新加载整个页面</p></li><li><p>获取数据也是通过 Ajax 异步获取</p></li><li><p>没有页面之间的跳转，不会出现“白屏现象”</p></li></ul><p>② 良好的前后端工作分离模式</p><ul><li><p>后端专注于提供 API 接口，更易实现 API 接口的复用</p></li><li><p>前端专注于页面的渲染，更利于前端工程化的发展</p></li></ul><p>③ 减轻服务器的压力</p><ul><li>服务器只提供数据，不负责页面的合成与逻辑的处理，吞吐能力会提高几倍  </li></ul><h2 id="3-单页面应用程序的缺点"><a href="#3-单页面应用程序的缺点" class="headerlink" title="3.单页面应用程序的缺点"></a>3.单页面应用程序的缺点</h2><p>任何一种技术都有自己的局限性，对于 SPA 单页面应用程序来说，主要的缺点有如下两个：</p><p>① 首屏加载慢，但可以通过以下方式解决：</p><ul><li>路由懒加载</li><li>代码压缩</li><li>CDN 加速</li><li>网络传输压缩</li></ul><p>② 不利于 SEO，但可以通过以下方式解决：</p><ul><li>SSR 服务器端渲染  </li></ul><h2 id="4-如何快速创建-vue-的-SPA-项目"><a href="#4-如何快速创建-vue-的-SPA-项目" class="headerlink" title="4. 如何快速创建 vue 的 SPA 项目"></a>4. 如何快速创建 vue 的 SPA 项目</h2><p>vue 官方提供了两种快速创建工程化的 SPA 项目的方式：</p><p>① 基于 vite 创建 SPA 项目</p><p>② 基于 vue-cli 创建 SPA 项目  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051617916.png" alt="image-20210805161719813" style="zoom:50%;" /><h1 id="vite的基本使用"><a href="#vite的基本使用" class="headerlink" title="vite的基本使用"></a>vite的基本使用</h1><p>vite官网：<a href="https://cn.vitejs.dev/">https://cn.vitejs.dev/</a></p><h2 id="1-创建vite的项目"><a href="#1-创建vite的项目" class="headerlink" title="1.创建vite的项目"></a>1.创建vite的项目</h2><p>按照顺序执行如下的命令，即可基于 vite 创建 vue 3.x 的工程化项目：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init vite-app <span class="hljs-string">&#x27;项目名称&#x27;</span><br><span class="hljs-built_in">cd</span> code1<br>npm install <br>npm run dev<br></code></pre></td></tr></table></figure><h2 id="2-梳理项目的结构"><a href="#2-梳理项目的结构" class="headerlink" title="2. 梳理项目的结构"></a>2. 梳理项目的结构</h2><p>使用vite创建的项目目录：</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051631447.png" alt="image-20210805163142399" style="zoom:50%;" /><p>其中：</p><ul><li><p>node_modules 目录用来存放第三方依赖包</p></li><li><p>public 是公共的静态资源目录</p></li><li><p>src 是项目的源代码目录（程序员写的所有代码都要放在此目录下）</p></li><li><p>.gitignore 是 Git 的忽略文件</p></li><li><p>index.html 是 SPA 单页面应用程序中唯一的 HTML 页面</p></li><li><p>package.json 是项目的包管理配置文件  </p></li></ul><p>在 src 这个项目源代码目录之下，包含了如下的文件和文件夹：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051633861.png" alt="image-20210805163330821"></p><p>其中：</p><ul><li><p>assets 目录用来存放项目中所有的<strong>静态资源文件</strong>（css、fonts等）</p></li><li><p>components 目录用来存放项目中所有的自定义组件</p></li><li><p>App.vue 是项目的<strong>根组件</strong></p></li><li><p>index.css 是项目的<strong>全局样式表文件</strong></p></li><li><p>main.js 是整个项目的<strong>打包入口文件</strong></p></li></ul><h2 id="3-vite-项目的运行流程"><a href="#3-vite-项目的运行流程" class="headerlink" title="3. vite 项目的运行流程"></a>3. vite 项目的运行流程</h2><p>在工程化的项目中，vue 要做的事情很单纯：<strong>通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。</strong></p><p>其中：</p><p>① App.vue 用来编写待渲染的<strong>模板结构</strong></p><p>② index.html 中需要预留一个 el 区域</p><p>③ main.js 把 App.vue 渲染到了 index.html 所预留的区域中  </p><h3 id="3-1-在-App-vue-中编写模板结构"><a href="#3-1-在-App-vue-中编写模板结构" class="headerlink" title="3.1 在 App.vue 中编写模板结构"></a>3.1 在 App.vue 中编写模板结构</h3><p>清空 App.vue 的默认内容，并书写如下的模板结构：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;这是app.vue根组件&lt;/h1&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.2 在 index.html 中预留 el 区域</p><p>打开 index.html 页面，确认预留了 el 区域：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-在-main-js-中进行渲染"><a href="#3-3-在-main-js-中进行渲染" class="headerlink" title="3.3 在 main.js 中进行渲染"></a>3.3 在 main.js 中进行渲染</h3><p>按照 vue 3.x 的标准用法，把 App.vue 中的模板内容渲染到 index.html 页面的 el 区域中：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-comment">// 1. 从vue中按需导入createApp函数</span><br><span class="hljs-comment">//  createApp函数的作用 ：创建vue的spa</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 2. 导入待渲染的App组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-comment">// 3. 调用createAPP()函数，返回值是SPA实例</span><br><span class="hljs-comment">//  同时将导入的APP 组件作为参数传给 createApp函数（将APP渲染到index.html上）</span><br><span class="hljs-keyword">const</span> spa_app=createApp(App);<br><br><span class="hljs-comment">// 4. 调用spa_app实例的mount方法，用来指定vue实际要控制的区域</span><br>spa_app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-comment">// 1. 从vue中按需导入createApp函数</span><br><span class="hljs-comment">//  createApp函数的作用 ：创建vue的spa</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 2. 导入待渲染的App组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-comment">// 3. 调用createAPP()函数，返回值是SPA实例</span><br><span class="hljs-comment">//  同时将导入的APP 组件作为参数传给 createApp函数（将APP渲染到index.html上）</span><br><span class="hljs-keyword">const</span> spa_app=createApp(App);<br><br><span class="hljs-comment">// 4. 调用spa_app实例的mount方法，用来指定vue实际要控制的区域</span><br>spa_app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h1 id="组件化开发思想"><a href="#组件化开发思想" class="headerlink" title="组件化开发思想"></a>组件化开发思想</h1><h2 id="1-什么是组件化开发"><a href="#1-什么是组件化开发" class="headerlink" title="1.什么是组件化开发"></a>1.什么是组件化开发</h2><p>组件化开发指的是：根据封装的思想，把页面上可重用的部分封装为组件，从而方便项目的开发和维护。</p><p>例如：<a href="http://www.ibootstrap.cn/">http://www.ibootstrap.cn/</a> 所展示的效果，就契合了组件化开发的思想。用户可以通过拖拽组件的方式，快速生成一个页面的布局结构。  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051700807.png" alt="image-20210805170030731"></p><h2 id="2-组件化开发的好处"><a href="#2-组件化开发的好处" class="headerlink" title="2. 组件化开发的好处"></a>2. 组件化开发的好处</h2><p>前端组件化开发的好处主要体现在以下两方面：</p><ul><li>提高了前端代码的复用性和灵活性</li><li>提升了开发效率和后期的可维护性  </li></ul><h2 id="3-vue-中的组件化开发"><a href="#3-vue-中的组件化开发" class="headerlink" title="3. vue 中的组件化开发"></a>3. vue 中的组件化开发</h2><p>vue 是一个完全支持组件化开发的框架。<strong>vue 中规定组件的后缀名是 .vue。</strong>之前接触到的 App.vue 文件本质上就是一个 vue 的组件。  </p><h1 id="vue组件的构成"><a href="#vue组件的构成" class="headerlink" title="vue组件的构成"></a>vue组件的构成</h1><h2 id="1-vue组件的构成"><a href="#1-vue组件的构成" class="headerlink" title="1.vue组件的构成"></a>1.vue组件的构成</h2><p>每个 .vue 组件都由 3 部分构成，分别是：</p><ul><li><p>template -&gt; 组件的模板结构</p></li><li><p>script -&gt; 组件的 JavaScript 行为</p></li><li><p>style -&gt; 组件的样式</p></li></ul><p>其中，<strong>每个组件中必须包含 template 模板结构</strong>，而 script 行为和 style 样式是可选的组成部分。  </p><h2 id="2-组件的template节点"><a href="#2-组件的template节点" class="headerlink" title="2.组件的template节点"></a>2.组件的template节点</h2><p>vue规定：每个组件对应的模板结构，需要定义到 <code>&lt;template&gt; </code>节点中。</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051714617.png" alt="image-20210805171410574" style="zoom:67%;" /><p>注意：<code>&lt;template&gt;</code> 是 vue 提供的容器标签，只起到包裹性质的作用，它不会被渲染为真正的 DOM 元素。  </p><ol><li><p>在template中使用指令</p><p>在组件的 <code>&lt;template&gt; </code>节点中，支持使用前面所学的指令语法，来辅助开发者渲染当前组件的 DOM 结构。</p><p>代码示例如下：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051717821.png" alt="image-20210805171703762"></p></li><li><p>在template中定义根节点</p><p>在 vue 2.x 的版本中，<code>&lt;template&gt;</code> 节点内的 DOM 结构仅支持单个根节点：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051718841.png" alt="image-20210805171811774"></p><p>但是，在 vue 3.x 的版本中，<code>&lt;template&gt;</code> 中支持定义多个根节点： </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051718042.png" alt="image-20210805171853981"> </p></li></ol><h2 id="3-组件中的script节点"><a href="#3-组件中的script节点" class="headerlink" title="3.组件中的script节点"></a>3.组件中的script节点</h2><p>vue 规定：组件内的 <code>&lt;script&gt; </code>节点是<strong>可选</strong>的，开发者可以在 <code>&lt;script&gt; </code>节点中封装组件的 JavaScript 业务逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;这是app.vue根组件&lt;/h1&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 今后，组件相关的data数据、 methods方法等，都需要定义到 export default所导出的对象中。<br>export default &#123;<br>  <br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.1 script 中的 name 节点</p><p>可以通过 name 节点为当前组件定义一个名称：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// name属性指向的是当前组件的名称（建议：每个单词的首字母大写）</span><br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyAPP&#x27;</span><br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在使用 vue-devtools 进行项目调试的时候，自定义的组件名称可以清晰的区分每个组件：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051727353.png" alt="image-20210805172753292"></p><p>3.2 script 中的 data 节点  </p><p><strong>vue 组件渲染期间需要用到的数据</strong>，可以定义在 data 节点中：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h1&gt;这是app.vue根组件 &#123;&#123;username&#125;&#125;&lt;/h1&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 今后，组件相关的data数据、 methods方法等，都需要定义到 export default所导出的对象中。<br>export default &#123;<br>  // name属性指向的是当前组件的名称（建议：每个单词的首字母大写）<br>  name: &quot;MyAPP&quot;,<br>  data()&#123;<br>    return &#123;<br>      // 组件的数据（data方法中 return出去的对象，就是当前组件渲染期间需要用到的数据对象）<br>      username:&#x27;jiaqi&#x27;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>组件中的 data 必须是<strong>函数</strong>!</p><p>vue 规定：组件中的 data 必须是一个函数，不能直接指向一个数据对象。因此在组件中定义 data 数据节点。</p><p>3.3 script 中的 methods 节点</p><p>组件中的事件处理函数，必须定义到 methods 节点中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;这是app.vue根组件 &#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&#x27;addCount&#x27;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>  <br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 组件相关的data数据、 methods方法等，都需要定义到 export default所导出的对象中。<br>export default &#123;<br>  // name属性指向的是当前组件的名称（建议：每个单词的首字母大写）<br>  name: &quot;MyAPP&quot;,<br>  data()&#123;<br>    return &#123;<br>      count:0,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    addCount()&#123;<br>      this.count++;<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-组件中的style节点"><a href="#4-组件中的style节点" class="headerlink" title="4.组件中的style节点"></a>4.组件中的style节点</h2><p>vue 规定：组件内的 <code>&lt;style&gt; </code>节点是可选的，开发者可以在 <code>&lt;style&gt;</code> 节点中编写样式美化当前组件的 UI 结构。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;这是app.vue根组件 &#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&#x27;addCount&#x27;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>  <br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 组件相关的data数据、 methods方法等，都需要定义到 export default所导出的对象中。<br>export default &#123;<br>  // name属性指向的是当前组件的名称（建议：每个单词的首字母大写）<br>  name: &quot;MyAPP&quot;,<br>  data()&#123;<br>    return &#123;<br>      count:0,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    addCount()&#123;<br>      this.count++;<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>    h1&#123;<br>      color: red;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;style&gt; </code>标签上的 lang=”css” 属性是可选的，它表示所使用的样式语言。默认只支持普通的 css 语法，可选值还有 less、scss 等。  </p><h3 id="4-1-让-style-中支持-less-语法"><a href="#4-1-让-style-中支持-less-语法" class="headerlink" title="4.1 让 style 中支持 less 语法"></a>4.1 让 style 中支持 less 语法</h3><p>如果希望使用 less 语法编写组件的 style 样式，可以按照如下两个步骤进行配置：</p><p>① 运行 <code>npm install less -D</code> 命令安装依赖包，从而提供 less 语法的编译支持</p><p>② 在 <code>&lt;style&gt;</code> 标签上添加 lang=”less” 属性，即可使用 less 语法编写组件的样式  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot;&gt;<br>    h1 &#123;<br>      color: red;<br>      i &#123;<br>        color:blue;<br>      &#125;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h1><h2 id="1-组件的注册"><a href="#1-组件的注册" class="headerlink" title="1.组件的注册"></a>1.组件的注册</h2><p>组件之间可以进行相互的引用，例如：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051811991.png" alt="image-20210805181154925" style="zoom:50%;" /><p>vue 中组件的<strong>引用</strong>原则：<strong>先注册后使用</strong>。  </p><h3 id="1-1-组件注册的两种方式"><a href="#1-1-组件注册的两种方式" class="headerlink" title="1.1 组件注册的两种方式"></a>1.1 组件注册的两种方式</h3><p>vue 中注册组件的方式分为“全局注册”和“局部注册”两种，其中：</p><ul><li><p>被全局注册的组件，可以在全局任何一个组件内使用</p></li><li><p>被局部注册的组件，只能在当前注册的范围内使用  </p></li></ul><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051814792.png" alt="image-20210805181439691"></p><h3 id="1-2-全局注册组件"><a href="#1-2-全局注册组件" class="headerlink" title="1.2 全局注册组件"></a>1.2 全局注册组件</h3><p>首先准备好两个组件文件如 <code>Swiper.vue</code>和<code>Test.vue</code>，并放在components文件夹下。</p><p>接着在main.js中导入这两个组件，并使用app.component()全局注册组件，app.component()的第一个参数是为组件自定义的名字，第二个参数是需要被注册的组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><br><span class="hljs-comment">// 1.按需导入createApp函数</span><br><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 2.导入待渲染的app.vue 组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>    <span class="hljs-comment">// 全局注册组件 1.导入需要被全局注册的组件</span><br><span class="hljs-keyword">import</span> Swiper <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/01.globalReg/Swiper.vue&#x27;</span><br><br><span class="hljs-comment">// 3.创建实例：调用createApp函数，并将App作为参数</span><br><span class="hljs-keyword">const</span> app=createApp(App);<br><br>    <span class="hljs-comment">//  全局注册组件 2.调用 app.component()方法来全局注册组件</span><br>app.component(<span class="hljs-string">&#x27;my-swiper&#x27;</span>,Swiper);<br><br><br><span class="hljs-comment">// 4.调用mount方法把APP组件的模板结构，渲染到指定的el区域中。</span><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>接着可以在其他组件中，以标签的形式，使用刚才注册的全局组件即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;这是&lt;i&gt;app.vue&lt;/i&gt;根组件 &#123;&#123; count &#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&quot;addCount&quot;&gt;+1&lt;/button&gt;<br>    &lt;my-swiper&gt;&lt;/my-swiper&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="1-3-局部注册组件"><a href="#1-3-局部注册组件" class="headerlink" title="1.3 局部注册组件"></a>1.3 局部注册组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;这是&lt;i&gt;app.vue&lt;/i&gt;根组件 &#123;&#123; count &#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&quot;addCount&quot;&gt;+1&lt;/button&gt;<br>    &lt;my-search&gt;&lt;/my-search&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Search from &#x27;./components/02.privateReg/search.vue&#x27;<br>export default &#123;<br>  name: &quot;MyAPP&quot;,<br>  data() &#123;<br>    return &#123;<br>      count: 0,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    addCount() &#123;<br>      this.count++;<br>    &#125;,<br>  &#125;,<br>  components:&#123;<br>    &#x27;my-search&#x27;:Search<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4-全局注册和局部注册的区别"><a href="#1-4-全局注册和局部注册的区别" class="headerlink" title="1.4  全局注册和局部注册的区别"></a>1.4  全局注册和局部注册的区别</h3><ul><li><p>被全局注册的组件，可以在全局任何一个组件内使用</p></li><li><p>被局部注册的组件，只能在当前注册的范围内使用  </p></li></ul><h3 id="1-5组件注册时名称的大小写"><a href="#1-5组件注册时名称的大小写" class="headerlink" title="1.5组件注册时名称的大小写"></a>1.5组件注册时名称的大小写</h3><p>在进行组件的注册时，定义组件注册名称的方式有两种：</p><p>① 使用 kebab-case 命名法（俗称短横线命名法，例如 my-swiper 和 my-search）</p><p>② 使用 PascalCase 命名法（俗称帕斯卡命名法或大驼峰命名法，例如 MySwiper 和 MySearch）  </p><p>短横线命名法的特点：</p><ul><li>必须严格按照短横线名称进行使用</li></ul><p>帕斯卡命名法的特点：</p><ul><li><strong>既可以严格按照帕斯卡名称进行使用，又可以转化为短横线名称进行使用</strong>。</li><li>注意：在实际开发中，推荐使用帕斯卡命名法为组件注册名称，因为它的适用性更强。  </li></ul><h3 id="1-6-通过name属性注册组件"><a href="#1-6-通过name属性注册组件" class="headerlink" title="1.6 通过name属性注册组件"></a>1.6 通过name属性注册组件</h3><p>除了可以直接提供组件的注册名称:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">//components/swiper.vue<br><br>&lt;template&gt;<br>    &lt;h3&gt;Swiper轮播图组件&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    // 指定组件的名字<br>    name:&#x27;MySwiper&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> Swiper <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/01.globalReg/Swiper.vue&#x27;</span><br>app.component(<span class="hljs-string">&#x27;my-swiper&#x27;</span>,Swiper);<br></code></pre></td></tr></table></figure><p>还可以把组件的 name 属性作为注册后组件的名称，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> Swiper <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/01.globalReg/Swiper.vue&#x27;</span><br>app.component(Swiper.name,Swiper);<br></code></pre></td></tr></table></figure><h2 id="2-组件之间的样式冲突问题"><a href="#2-组件之间的样式冲突问题" class="headerlink" title="2. 组件之间的样式冲突问题"></a>2. 组件之间的样式冲突问题</h2><p>默认情况下，写在 .vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。导致组件之间样式冲突的根本原因是：</p><p>① 单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的。</p><p>② 每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素  。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;App.vue组件&lt;/h1&gt;<br>        &lt;p&gt;App.vue中的p&lt;/p&gt;<br>        &lt;p&gt;App.vue中的p&lt;/p&gt;<br>        &lt;my-list&gt;&lt;/my-list&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyList from &#x27;./List.vue&#x27;;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyList<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>    p&#123;<br>        color:red;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>在父组件中p标签文字变红了，子组件同样的p标签文字同样变红了。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051951848.png" alt="image-20210805195116759"></p><h3 id="2-1-思考：如何解决组件样式冲突的问题"><a href="#2-1-思考：如何解决组件样式冲突的问题" class="headerlink" title="2.1 思考：如何解决组件样式冲突的问题"></a>2.1 思考：如何解决组件样式冲突的问题</h3><p>为每个组件分配<strong>唯一的自定义属性</strong>，在编写组件样式时，通过属性选择器来控制样式的作用域，示例代码如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div &gt;<br>        &lt;h1 &gt;App.vue组件&lt;/h1&gt;<br>        &lt;p data-v-001&gt;App.vue中的p&lt;/p&gt;<br>        &lt;p data-v-001&gt;App.vue中的p&lt;/p&gt;<br>        &lt;my-list&gt;&lt;/my-list&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyList from &#x27;./List.vue&#x27;;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyList<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>/* 通过中括号“属性选择器”，<br>来防止组件之间的样式冲突问题，因为每个组件分配的自定义属性是“唯一的” */<br>    p[data-v-001]&#123;<br>        color:red;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-style-节点的-scoped-属性"><a href="#2-2-style-节点的-scoped-属性" class="headerlink" title="2.2 style 节点的 scoped 属性"></a>2.2 style 节点的 scoped 属性</h3><p>为了提高开发效率和开发体验，vue 为 <strong>style 节点提供了 scoped 属性</strong>，从而防止组件之间的样式冲突问题： </p><p>style节点的 scoped属性，用来自动为每个组件分配唯一的“自定义属性”，并自动为当前组件的DOM标签和style样式应用这个自定义属性，防止组件的样式冲突问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App.vue组件&lt;/h1&gt;<br>    &lt;p&gt;App.vue中的p&lt;/p&gt;<br>    &lt;p&gt;App.vue中的p&lt;/p&gt;<br>    &lt;my-list&gt;&lt;/my-list&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyList from &quot;./List.vue&quot;;<br><br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components: &#123;<br>    MyList,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot; scoped&gt;<br>/* <br>style节点的 scoped属性，用来自动为每个组件分配唯一的“自定义属性”，<br>并自动为当前组件的DOM标签和style样式应用这个自定义属性，防止组件的样式冲突问题。<br> */<br>p &#123;<br>  color: red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3 class=&quot;title&quot;&gt;list.vue组件&lt;/h3&gt;<br>    &lt;p&gt;list.vue中的p&lt;/p&gt;<br>    &lt;p&gt;list.vue中的p&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyList&quot;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2-3-deep-样式穿透"><a href="#2-3-deep-样式穿透" class="headerlink" title="2.3 :deep()样式穿透"></a>2.3 :deep()样式穿透</h3><p>如果给当前组件的 style 节点添加了<strong>scoped</strong> 属性，则<strong>当前组件的样式对其子组件是不生效的</strong>。如果想让某些样式对子组件生效，可以使用**<code>:deep()</code> 深度选择器**。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;css&quot; scoped&gt;<br>/* <br>style节点的 scoped属性，用来自动为每个组件分配唯一的自定义属性，<br>并自动为当前组件的DOM标签和style样式应用这个自定义属性，防止组件的样式冲突问题。<br> */<br><br>p &#123;<br>  color: red;<br>&#125;<br><br>.title &#123;<br>  color: bisque;<br>  /* 不加:deep()时生成的选择器格式为 .data-v-7bc0fb25[title] */<br>&#125;<br><br>:deep().title &#123;<br>  color: bisque;<br>  /* 加:deep()时生成的选择器格式为 [data-v-7bc0fb25] .title */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>注意：<code>/deep/</code> 是 vue2.x 中实现样式穿透的方案。在 vue3.x 中推荐使用 <code>:deep()</code> 替代 <code>/deep/</code>。 </p><h2 id="3-组件的-props"><a href="#3-组件的-props" class="headerlink" title="3. 组件的 props"></a>3. 组件的 props</h2><p>为了提高组件的复用性，在封装 vue 组件时需要遵守如下的原则：</p><ul><li><p>组件的 DOM 结构、Style 样式要尽量复用</p></li><li><p>组件中要展示的数据，尽量由组件的使用者提供</p></li></ul><p>为了方便使用者为组件提供要展示的数据，vue 组件提供了 props 的概念。  </p><h3 id="3-1-什么是组件的-props"><a href="#3-1-什么是组件的-props" class="headerlink" title="3.1 什么是组件的 props"></a>3.1 什么是组件的 props</h3><p>props 是<strong>组件的自定义属性</strong>，<strong>组件的使用者可以通过 props 把数据传递到子组件内部</strong>，供子组件内部进行使用。代码示例如下：  </p><p>props 的作用：父组件通过 props 向子组件传递要展示的数据。</p><p>props 的好处：提高了组件的复用性。 </p><h3 id="3-2-在组件中声明-props"><a href="#3-2-在组件中声明-props" class="headerlink" title="3.2 在组件中声明 props"></a>3.2 在组件中声明 props</h3><p>在封装 vue 组件时，<strong>可以把动态的数据项声明为 props 自定义属性</strong>。自定义属性可以在当前组件的模板结构中被直接使用。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">//article.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;标题：&#123;&#123;title&#125;&#125;&lt;/h3&gt;<br>        &lt;h5&gt;作者: &#123;&#123;author&#125;&#125;&lt;/h5&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyArticle&#x27;,<br>    // props接收外界传递的数据<br>    props:[&#x27;title&#x27;,&#x27;author&#x27;],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;这是App.vue 根组件&lt;/h1&gt;<br>        &lt;hr&gt;<br>        &lt;my-article title=&quot;面朝大海&quot;  author=&quot;海子&quot;&gt;&lt;/my-article&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyArticle from &#x27;./Article.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyArticle<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061151404.png" alt="image-20210806115102272"></p><h3 id="3-3-无法使用未声明的-props"><a href="#3-3-无法使用未声明的-props" class="headerlink" title="3.3 无法使用未声明的 props"></a>3.3 无法使用未声明的 props</h3><p>如果父组件给子组件传递了子组件并没有声明的 props 属性，则这些属性会被忽略，无法被子组件使用，示例代码如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;标题：&#123;&#123;title&#125;&#125;&lt;/h3&gt;<br>        &lt;h5&gt;作者: &#123;&#123;author&#125;&#125;&lt;/h5&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyArticle&#x27;,<br>    // props接收外界传递的数据<br>    props:[&#x27;title&#x27;], <br>    // 并没有声明author属性，因此子组件无法访问到author的值<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>App.vue的代码同上个例子，故省略。最终渲染结果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061154576.png" alt="image-20210806115419523"></p><h3 id="3-4-动态绑定-props-的值"><a href="#3-4-动态绑定-props-的值" class="headerlink" title="3.4 动态绑定 props 的值"></a>3.4 动态绑定 props 的值</h3><p>可以使用 v-bind 属性绑定的形式，为组件动态绑定 props 的值，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">// App.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;这是App.vue 根组件&lt;/h1&gt;<br>        &lt;hr&gt;<br>        &lt;my-article :title=&quot;info.title&quot;  :author=&quot;info.author&quot;&gt;&lt;/my-article&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyArticle from &#x27;./Article.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyArticle<br>    &#125;,<br>    data() &#123;<br>        return &#123;<br>            info:&#123;title:&#x27;abc&#x27;,author:&#x27;jiaqi&#x27;&#125;<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-5-props-的大小写命名"><a href="#3-5-props-的大小写命名" class="headerlink" title="3.5 props 的大小写命名"></a>3.5 props 的大小写命名</h3><p>组件中如果使用“camelCase (驼峰命名法)”声明了 props 属性的名称，则有两种方式为其绑定属性的值：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">//article.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h5&gt;发布时间: &#123;&#123;pubTime&#125;&#125;&lt;/h5&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyArticle&#x27;,<br>    // props接收外界传递的数据<br>    props:[&#x27;title&#x27;,&#x27;author&#x27;,&#x27;pubTime&#x27;],<br>&#125;<br>&lt;/script&gt;<br><br>//====================================<br>// App.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;这是App.vue 根组件&lt;/h1&gt;<br>        &lt;my-article  pubTime=&#x27;1989&#x27;&gt;&lt;/my-article&gt;<br>        &lt;my-article  pub-time=&#x27;1989&#x27;&gt;&lt;/my-article&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="4-Props验证"><a href="#4-Props验证" class="headerlink" title="4. Props验证"></a>4. Props验证</h2><h3 id="1-什么是-props-验证"><a href="#1-什么是-props-验证" class="headerlink" title="1.什么是 props 验证"></a>1.什么是 props 验证</h3><p>在封装组件时对外界传递过来的 props 数据进行合法性的校验，从而防止数据不合法的问题。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061422528.png" alt="image-20210806142210426"></p><p>使用数组类型的 props 节点的缺点：无法为每个 prop 指定具体的数据类型。  </p><h3 id="2-对象类型的-props-节点"><a href="#2-对象类型的-props-节点" class="headerlink" title="2. 对象类型的 props 节点"></a>2. 对象类型的 props 节点</h3><p>使用对象类型的 props 节点，可以对每个 prop 进行数据类型的校验，示意图如下： </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061423096.png" alt="image-20210806142342004"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;p&gt;数量：&#123;&#123;count&#125;&#125;&lt;/p&gt;<br>        &lt;p&gt;状态：&#123;&#123;state&#125;&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;Count&#x27;,<br>    props:&#123;<br>        count:Number,<br>        state:Boolean<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-props-验证"><a href="#3-props-验证" class="headerlink" title="3. props 验证"></a>3. props 验证</h3><p>对象类型的 props 节点提供了多种数据验证方案，例如：</p><p>① 基础的类型检查</p><p>可以直接为组件的 prop 属性指定基础的校验类型，从而防止组件的使用者为其绑定错误类型的数据：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    props:&#123;<br>        // 支持8种基础类型<br>        propA:String,<br>        propB:Number,<br>        propC:Boolean,<br>        propD:Array,<br>        propE:Object,<br>        propF:Date,<br>        propG:Function,<br>        propH:Symbol<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>② 多个可能的类型</p><p>如果某个 prop 属性值的类型不唯一，此时可以通过数组的形式，为其指定多个可能的类型，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    // propA的的值可以为字符串或者数字<br>    propA: [String, Number],<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>③ 必填项校验</p><p>如果组件的某个 prop 属性是必填项，必须让组件的使用者为其传递属性的值。此时，可以通过如下的方式将其设置为必填项：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    propA: [String, Number],<br>    propB:&#123;<br>        type:String,<br>        required:true<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>④ 属性默认值</p><p>在封装组件时，可以为某个 prop 属性指定默认值。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    propB:&#123;<br>        type:Number,<br>        default:100<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>⑤ 自定义验证函数    </p><p>在封装组件时，可以为 prop 属性指定自定义的验证<code>validator</code>函数，从而对 prop 属性的值进行更加精确的控制：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    propB:&#123;<br>        // 属性的值通过形参value进行接收<br>        validator(value)&#123;<br>            //validator 函数返回值为true表示验证成功，false为验证失败<br>            return [&#x27;success&#x27;,&#x27;warning&#x27;,&#x27;danger&#x27;].indexOf(value)!==-1;<br>            //propB的值必须为其中的一个<br><br>        &#125;<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="5-class与style样式绑定"><a href="#5-class与style样式绑定" class="headerlink" title="5.class与style样式绑定"></a>5.class与style样式绑定</h2><p>在实际开发中经常会遇到动态操作元素样式的需求。因此，vue 允许开发者通过 v-bind 属性绑定指令，为元素动态绑定 class 属性的值和行内的 style 样式。  </p><h3 id="5-1-动态绑定-HTML-的-class"><a href="#5-1-动态绑定-HTML-的-class" class="headerlink" title="5.1 动态绑定 HTML 的 class"></a>5.1 动态绑定 HTML 的 class</h3><p>可以通过三元表达式，动态的为元素绑定 class 的类名。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;h3 class=&#x27;thin&#x27; :class=&quot; isItalic?&#x27;italic&#x27;:&#x27;&#x27;&quot;&gt;MyStyle组件&lt;/h3&gt;<br>      &lt;button @click=&#x27;isItalic=!isItalic&#x27;&gt;Toggle Italic&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyStyle&#x27;,<br>    data()&#123;<br>        return&#123;<br>            // 字体是否倾斜<br>            isItalic:true<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>    .thin&#123;<br>        font-weight: 200;<br>    &#125;<br>    .italic&#123;<br>        font-style: italic;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="5-2-以数组语法绑定-HTML-的-class"><a href="#5-2-以数组语法绑定-HTML-的-class" class="headerlink" title="5.2 以数组语法绑定 HTML 的 class"></a>5.2 以数组语法绑定 HTML 的 class</h3><p>如果元素需要动态<strong>绑定多个</strong> class 的类名，此时可以<strong>使用数组</strong>的语法格式：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3 class=&quot;thin&quot; :class=&quot;[isItalic ? &#x27;italic&#x27; : &#x27;&#x27;,isDelete?&#x27;delete&#x27;:&#x27;&#x27;]&quot;&gt;MyStyle组件&lt;/h3&gt;<br>    &lt;button @click=&quot;isItalic = !isItalic&quot;&gt;Toggle Italic&lt;/button&gt;<br>    &lt;button @click=&quot;isDelete = !isDelete&quot;&gt;Toggle Delete&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyStyle&quot;,<br>  data() &#123;<br>    return &#123;<br>      // 字体是否倾斜<br>      isItalic: true,<br>      isDelete: true,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>.thin &#123;<br>  font-weight: 200;<br>&#125;<br>.italic &#123;<br>  font-style: italic;<br>&#125;<br>.delete &#123;<br>  text-decoration: line-through;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061250434.png" alt="image-20210806125040359"></p><h3 id="5-3-以对象语法绑定-HTML-的-class"><a href="#5-3-以对象语法绑定-HTML-的-class" class="headerlink" title="5.3 以对象语法绑定 HTML 的 class"></a>5.3 以对象语法绑定 HTML 的 class</h3><p>使用数组语法动态绑定 class 会导致模板结构臃肿的问题。此时可以使用<strong>对象语法</strong>进行简化：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3 class=&quot;thin&quot; :class=&quot;classObj&quot;&gt;MyStyle组件&lt;/h3&gt;<br>    <br>    &lt;button @click=&quot;classObj.italic = !classObj.italic&quot;&gt;Toggle Italic&lt;/button&gt;<br>    &lt;button @click=&quot;classObj.delete = !classObj.delete&quot;&gt;Toggle Delete&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyStyle&quot;,<br>  data() &#123;<br>    return &#123;<br>      classObj:&#123;<br>          delete:false,<br>          italic:false<br>      &#125;<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5-4-以对象语法绑定内联的-style"><a href="#5-4-以对象语法绑定内联的-style" class="headerlink" title="5.4 以对象语法绑定内联的 style"></a>5.4 以对象语法绑定内联的 style</h3><p><code>:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 <strong>JavaScript 对象</strong>。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div :style=&quot;&#123;color:active,&#x27;font-size&#x27;:fsize+&#x27;px&#x27;,backgroundColor:bgcolor&#125;&quot;&gt;今天好热&lt;/div&gt;<br>    &lt;button @click=&#x27;fsize++&#x27;&gt;字号+1&lt;/button&gt;<br>    &lt;button  @click=&#x27;fsize--&#x27;&gt;字号-1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyStyle&quot;,<br>  data() &#123;<br>    return &#123;<br>    //   高亮时的文本颜色<br>    active:&#x27;red&#x27;,<br>    // 文字大小<br>    fsize:30,<br>    // 背景颜色<br>    bgcolor:&#x27;pink&#x27;<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="封装组件的案例"><a href="#封装组件的案例" class="headerlink" title="封装组件的案例"></a>封装组件的案例</h2><p>封装要求：<br>① 允许用户自定义 title 标题</p><p>② 允许用户自定义 bgcolor 背景色</p><p>③ 允许用户自定义 color 文本颜色</p><p>④ MyHeader 组件需要在页面顶部进行 fixed 固定定位，且 z-index 等于 999  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue<br>&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        &lt;h1&gt;App根组件&lt;/h1&gt;<br>        &lt;hr&gt;<br>        &lt;my-header title=&quot;电商平台A&quot; bgcolor=&quot;red&quot; color=&#x27;#fff&#x27;&gt;&lt;/my-header&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyHeader from &#x27;./MyHeader.vue&#x27;;<br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyHeader<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>    .app-container&#123;<br>        margin-top: 45px;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">//MyHeader.vue<br><br>&lt;template&gt;<br>    &lt;div class=&quot;header-container&quot; :style=&quot;&#123;backgroundColor:bgcolor,color:color&#125;&quot;&gt;<br>        &#123;&#123;title ||&#x27;Header-container&#x27;&#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyHeader&#x27;,<br>    props:[&#x27;title&#x27;,&#x27;bgcolor&#x27;,&#x27;color&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>    .header-container&#123;<br>        height: 45px;<br>        background-color: pink;<br>        text-align: center;<br>        line-height: 45px;<br>        position: fixed;<br>        top: 0;<br>        left:0;<br>        width: 100%;<br>        z-index: 9999;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="6-自定义事件"><a href="#6-自定义事件" class="headerlink" title="6.自定义事件"></a>6.自定义事件</h2><h3 id="1-什么是自定义事件"><a href="#1-什么是自定义事件" class="headerlink" title="1.什么是自定义事件"></a>1.什么是自定义事件</h3><p>在封装组件时，为了让<strong>组件的使用者</strong>可以<strong>监听到组件内状态的变化</strong>，此时需要用到组件的自定义事件  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061559242.png" alt="image-20210806155958160"></p><h3 id="2-自定义事件的-3-个使用步骤"><a href="#2-自定义事件的-3-个使用步骤" class="headerlink" title="2. 自定义事件的 3 个使用步骤"></a>2. 自定义事件的 3 个使用步骤</h3><h4 id="在封装组件时："><a href="#在封装组件时：" class="headerlink" title="在封装组件时："></a>在封装组件时：</h4><p>① <strong>声明</strong>自定义事件 (但这步可以省略)</p><p>开发者为自定义组件封装的自定义事件，必须事先在 <code>emits</code> 节点中声明，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">//counter.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;Counter 组件&lt;/h3&gt;<br>    &lt;button @click=&quot;onBtnClick&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    emits:[&#x27;change&#x27;],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>② <strong>触发</strong>自定义事件</p><p>在 emits 节点下声明的自定义事件，可以通过 <code>this.$emit(&#39;自定义事件的名称&#39;)</code> 方法进行触发，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">//counter.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;Counter 组件&lt;/h3&gt;<br>    &lt;button @click=&quot;onBtnClick&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    emits:[&#x27;change&#x27;],<br>    methods: &#123;<br>        onBtnClick()&#123;<br>            this.$emit(&#x27;change&#x27;)<br>            // 当点击+1按钮时，调用this.$emit()方法，触发自定义的change事件<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="在使用组件时："><a href="#在使用组件时：" class="headerlink" title="在使用组件时："></a>在使用组件时：</h4><p>③ <strong>监听</strong>自定义事件  </p><p>在使用自定义的组件时，可以通过 v-on 的形式监听自定义事件。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- 使用v-on监听自定义事件 --&gt;<br>        &lt;my-counter @change=&#x27;getCount&#x27;&gt;&lt;/my-counter&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyCounter from &#x27;./Counter.vue&#x27;<br>export default &#123;<br>    components:&#123;<br>        MyCounter<br>    &#125;,<br>    methods: &#123;<br>        getCount()&#123;<br>            console.log(&#x27;监听到count值的变化&#x27;);<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-自定义事件传参"><a href="#3-自定义事件传参" class="headerlink" title="3. 自定义事件传参"></a>3. 自定义事件传参</h3><p>在调用 <code>this.$emit()</code>方法触发自定义事件时，可以通过第 2 个参数为自定义事件传参，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">//counter.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;Counter 组件&lt;/h3&gt;<br>    &lt;button @click=&quot;onBtnClick&quot;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    emits:[&#x27;change&#x27;],<br>    methods: &#123;<br>        onBtnClick()&#123;<br>            this.$emit(&#x27;change&#x27;,this.count)<br>            // 触发自定义事件时，通过第二个参数传递数据<br>            // 第一个参数为自定义事件的名称<br>        &#125;<br>    &#125;,<br>    data()&#123;<br>        return &#123;count:0&#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- 使用v-on监听自定义事件 --&gt;<br>        &lt;my-counter @change=&#x27;getCount&#x27;&gt;&lt;/my-counter&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyCounter from &#x27;./Counter.vue&#x27;<br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MyCounter<br>    &#125;,<br>    methods: &#123;<br>        getCount(val)&#123;<br>            console.log(&#x27;监听到count值的变化 &#x27;+val);<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="7-组件上的v-model"><a href="#7-组件上的v-model" class="headerlink" title="7.组件上的v-model"></a>7.组件上的v-model</h2><h3 id="1-为什么需要在组件上使用-v-model"><a href="#1-为什么需要在组件上使用-v-model" class="headerlink" title="1. 为什么需要在组件上使用 v-model"></a>1. 为什么需要在组件上使用 v-model</h3><p>v-model 是双向数据绑定指令，当需要<strong>维护组件内外数据的同步</strong>时，可以在组件上使用 v-model 指令。示意图如下：  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061645006.png" alt="image-20210806164507918" style="zoom:80%;" /><ul><li>外界数据的变化会自动同步到 counter 组件中</li><li>counter 组件中数据的变化，也会自动同步到外界</li></ul><h3 id="2-在组件上使用-v-model-的步骤"><a href="#2-在组件上使用-v-model-的步骤" class="headerlink" title="2. 在组件上使用 v-model 的步骤"></a>2. 在组件上使用 v-model 的步骤</h3><h4 id="父向子同步数据-数据由父提供-："><a href="#父向子同步数据-数据由父提供-：" class="headerlink" title="父向子同步数据(数据由父提供)："></a>父向子同步数据(数据由父提供)：</h4><p>① 父组件通过 v-bind: 属性绑定的形式，把数据传递给子组件</p><p>② 子组件中，通过 props 接收父组件传递过来的数据  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061647767.png" alt="image-20210806164753694" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">//父组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;APP根组件----&#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+1&lt;/button&gt;<br>        &lt;hr&gt;<br>        &lt;my-counter :number=&#x27;count&#x27;&gt;&lt;/my-counter&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import MyCounter from &#x27;./Count.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;,<br>    components:&#123;<br>        MyCounter<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">//子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;p&gt;<br>            count值是：&#123;&#123;number&#125;&#125;<br>        &lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyCounter&#x27;,<br>    props:[&#x27;number&#x27;]<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="子向父传递数据-数据由父提供-："><a href="#子向父传递数据-数据由父提供-：" class="headerlink" title="子向父传递数据(数据由父提供)："></a>子向父传递数据(数据由父提供)：</h4><p>① 在 v-bind: 指令之前添加 v-model 指令</p><p>② 在子组件中声明 emits 自定义事件，格式为 update:xxx</p><p>③ 调用 $emit() 触发自定义事件，更新父组件中的数据  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061700899.png" alt="image-20210806170013827" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 父组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;APP根组件----&#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+1&lt;/button&gt;<br>        &lt;hr&gt;<br>        &lt;my-counter v-model:number=&#x27;count&#x27;&gt;&lt;/my-counter&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import MyCounter from &#x27;./Count.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;,<br>    components:&#123;<br>        MyCounter<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;p&gt;count值是：&#123;&#123;number&#125;&#125;&lt;/p&gt;<br>        &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyCounter&#x27;,<br>    props:[&#x27;number&#x27;],<br>    emits:[&#x27;update:number&#x27;],<br>    methods: &#123;<br>        add()&#123;<br>            // 注意不是this.number++, 通过props接收的值不应该被修改，但是可以将props接收的值+1传递给父组件，由父组件来更新props的值<br>            this.$emit(&#x27;update:number&#x27;,this.number+1)<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a>Vue知识点</h1><h2 id="1-计算属性"><a href="#1-计算属性" class="headerlink" title="1.计算属性"></a>1.计算属性</h2><h3 id="1-什么是计算属性"><a href="#1-什么是计算属性" class="headerlink" title="1.什么是计算属性"></a>1.什么是计算属性</h3><p>计算属性本质上就是一个 function 函数，它可以实时监听 data 中数据的变化，并 return 一个计算后的新值，供组件渲染 DOM 时使用。  </p><h3 id="2-如何声明计算属性"><a href="#2-如何声明计算属性" class="headerlink" title="2. 如何声明计算属性"></a>2. 如何声明计算属性</h3><p>计算属性需要以 function 函数的形式声明到组件的 computed 选项中，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input type=&quot;text&quot; v-model.number=&quot;count&quot; &gt;<br>    &lt;p&gt;&#123;&#123;count&#125;&#125;乘以2的值为：&#123;&#123;plus&#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return &#123;count:1&#125;<br>    &#125;,<br>    computed:&#123;<br>        plus()&#123;<br>            // 计算属性，监听data中count值的变化，并自动计算出 count*2的新值<br>            return this.count*2;<br>        &#125;<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意：计算属性侧重于得到一个计算的结果，因此计算属性中必须有 return 返回值！  </p><h3 id="3-计算属性的使用注意点"><a href="#3-计算属性的使用注意点" class="headerlink" title="3. 计算属性的使用注意点"></a>3. 计算属性的使用注意点</h3><p>① 计算属性必须定义在 computed 节点中</p><p>② 计算属性必须是一个 function 函数</p><p>③ 计算属性必须有返回值</p><p>④ 计算属性必须当做普通属性使用  </p><h3 id="4-计算属性-vs-方法"><a href="#4-计算属性-vs-方法" class="headerlink" title="4. 计算属性 vs 方法"></a>4. 计算属性 vs 方法</h3><p>相对于方法来说，计算属性会缓存计算的结果，只有计算属性的依赖项发生变化时，才会重新进行运算。因此计算属性的性能更好  :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input type=&quot;text&quot; v-model.number=&quot;count&quot; &gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;乘以2的值为：&#123;&#123; plus &#125;&#125;  &#123;&#123;time()&#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;乘以2的值为：&#123;&#123; plus &#125;&#125;  &#123;&#123;time()&#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;乘以2的值为：&#123;&#123; plus &#125;&#125;  &#123;&#123;time()&#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123; count: 1 &#125;;<br>  &#125;,<br>  computed: &#123;<br>    plus() &#123;<br>      console.log(&#x27;计算属性被执行了&#x27;);<br>      return this.count * 2;<br>    &#125;,<br>  &#125;,<br>  methods: &#123;<br>      time()&#123;<br>          console.log(&#x27;方法被执行了&#x27;);<br>          return this.count*2;<br>      &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="2-watch侦听器"><a href="#2-watch侦听器" class="headerlink" title="2.watch侦听器"></a>2.watch侦听器</h2><h3 id="1-什么是-watch-侦听器"><a href="#1-什么是-watch-侦听器" class="headerlink" title="1.什么是 watch 侦听器"></a>1.什么是 watch 侦听器</h3><p>watch 侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作。例如监视用户名的变化并发起请求，判断用户名是否可用 。</p><p>2.watch 侦听器的基本语法</p><p>开发者需要在 watch 节点下，定义自己的侦听器。实例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;watch 侦听器的用法&lt;/h3&gt;<br>        &lt;input type=&quot;text&quot; v-model.trim=&quot;username&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return &#123;<br>            username:&#x27;&#x27;<br>        &#125;<br>    &#125;,<br>    watch:&#123;<br>        username(newValue,oldValue)&#123;<br>            console.log(newValue,oldValue);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-使用-watch-查询商铺"><a href="#3-使用-watch-查询商铺" class="headerlink" title="3. 使用 watch 查询商铺"></a>3. 使用 watch 查询商铺</h3><p>监听 username 值的变化，并使用 axios 发起 Ajax 请求，检测当前输入的用户名是否可用。</p><p>首先需要下载<code>axios</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;watch 侦听器的用法&lt;/h3&gt;<br>        &lt;input type=&quot;text&quot; v-model.trim=&quot;shopid&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br><br><br>export default &#123;<br>    name:&#x27;MyWatch&#x27;,<br>    data()&#123;<br>        return &#123;<br>            shopid:&#x27;&#x27;<br>        &#125;<br>    &#125;,<br>    watch:&#123;<br>        async shopid(newValue,oldValue)&#123;<br>            //解析出data，并重命名为res<br>            const &#123;data:res&#125;=await axios.get(&#x27;https://www.escook.cn/shops/&#x27;+newValue);<br>            console.log(res);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4-immediate-选项"><a href="#4-immediate-选项" class="headerlink" title="4. immediate 选项"></a>4. immediate 选项</h3><p>默认情况下，组件在初次加载完毕后不会调用 watch 侦听器。比如，,设置shopid的默认值为1，会发现此时控制台并没有打印店铺信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyWatch&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">shopid</span>:<span class="hljs-number">1</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">shopid</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;<br>            <span class="hljs-comment">//解析出data，并重命名为res</span><br>            <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>:res&#125;=<span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;https://www.escook.cn/shops/&#x27;</span>+newValue);<br>            <span class="hljs-built_in">console</span>.log(res);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想让 watch 侦听器<strong>立即被调用</strong>，则需要使用 immediate 选项。实例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyWatch&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">shopid</span>:<span class="hljs-number">1</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-comment">// async shopid(newValue,oldValue)&#123;</span><br>        <span class="hljs-comment">//     //解析出data，并重命名为res</span><br>        <span class="hljs-comment">//     const &#123;data:res&#125;=await axios.get(&#x27;https://www.escook.cn/shops/&#x27;+newValue);</span><br>        <span class="hljs-comment">//     console.log(res);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <br>        <br>        <span class="hljs-comment">// 1.监听shopid值的变化，此时的shopid变成了对象</span><br>        <span class="hljs-attr">shopid</span>:&#123;<br>            <span class="hljs-comment">// 2.handler属性为固定写法，当username变化时，调用handler</span><br>            <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;<br>                <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>:res&#125;=<span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;https://www.escook.cn/shops/&#x27;</span>+newValue);<br>                <span class="hljs-built_in">console</span>.log(res);<br>            &#125;,<br>            <span class="hljs-comment">// 3.表示组件加载完毕后调用一次当前的watch侦听器</span><br>            <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5-deep-选项"><a href="#5-deep-选项" class="headerlink" title="5. deep 选项"></a>5. deep 选项</h3><p>当 <strong>watch 侦听的是一个对象</strong>，如果对象中的属性值发生了变化，则无法被监听到。此时需要使用 deep 选项，代码示例如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br>export default &#123;<br>    name:&#x27;MyWatch&#x27;,<br>    data()&#123;<br>        return &#123;<br>            info:&#123;<br>                shopid:1<br>            &#125;<br>        &#125;<br>    &#125;,<br>    watch:&#123;<br>        info:&#123;<br>            // handler属性为固定写法，当username变化时，调用handler<br>            async handler(newValue,oldValue)&#123;<br>                const &#123;data:res&#125;=await axios.get(&#x27;https://www.escook.cn/shops/&#x27;+newValue.shopid);<br>                console.log(res);<br>            &#125;,<br>            // 表示组件加载完毕后调用一次当前的watch侦听器<br>            immediate:true,<br>            //需要使用deep选项，否则info.shopid值的变化无法被监听<br>            deep:true<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="6-监听对象单个属性的变化"><a href="#6-监听对象单个属性的变化" class="headerlink" title="6. 监听对象单个属性的变化"></a>6. 监听对象单个属性的变化</h3><p>开启deep选项后，watch会监听对象中的每一个属性值，任何一个属性值发生变化，都会触发handler处理函数。<strong>如果只想监听对象中单个属性的变化</strong>，则可以按照如下的方式定义 watch 侦听器：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&lt;script&gt;<br>import axios from &quot;axios&quot;;<br><br>export default &#123;<br>  name: &quot;MyWatch&quot;,<br>  data() &#123;<br>    return &#123;<br>      info: &#123;<br>        shopid: 1,<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br>    &quot;info.shopid&quot;: &#123;<br>      async handler(newValue, oldValue) &#123;<br>        const &#123; data: res &#125; = await axios.get(<br>          &quot;https://www.escook.cn/shops/&quot; + newValue<br>        );<br>        console.log(res);<br>      &#125;,<br>      immediate:true,<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="7-计算属性-vs-侦听器"><a href="#7-计算属性-vs-侦听器" class="headerlink" title="7. 计算属性 vs 侦听器"></a>7. 计算属性 vs 侦听器</h3><p>计算属性和侦听器侧重的应用场景不同：</p><p><strong>计算属性侧重于监听多个值的变化，最终计算并返回一个新值。</strong></p><p><strong>侦听器侧重于监听单个数据的变化，最终执行特定的业务处理</strong>，不需要有任何返回值。</p><h2 id="3-组件的声明周期"><a href="#3-组件的声明周期" class="headerlink" title="3. 组件的声明周期"></a>3. 组件的声明周期</h2><h3 id="1-组件运行的过程"><a href="#1-组件运行的过程" class="headerlink" title="1. 组件运行的过程"></a>1. 组件运行的过程</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081628645.png" alt="image-20210808162852517"></p><p>组件的生命周期指的是：组件从创建 -&gt; 运行（渲染） -&gt; 销毁的整个过程，强调的是一个时间段。  </p><h3 id="2-如何监听组件的不同时刻"><a href="#2-如何监听组件的不同时刻" class="headerlink" title="2. 如何监听组件的不同时刻"></a>2. 如何监听组件的不同时刻</h3><p>vue 框架为组件<strong>内置</strong>了不同时刻的生命周期函数，<strong>生命周期函数会伴随着组件的运行而自动调用。</strong>例如：</p><p>① 当组件在内存中被<strong>创建完毕</strong>之后，会自动调用 <strong>created</strong> 函数</p><p>② 当组件被成功的<strong>渲染到页面上</strong>之后，会自动调用 <strong>mounted</strong> 函数</p><p>③ 当组件被<strong>销毁完毕</strong>之后，会自动调用 <strong>unmounted</strong> 函数  </p><p>当在父组件中使用子组件后，会调用created函数和mounted函数，<strong>当使用v-if隐藏子组件后，会调用unmounted函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">// app.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;根组件&lt;/h1&gt;<br>    &lt;life-cycle v-if=&quot;flag&quot;&gt;&lt;/life-cycle&gt;<br>    &lt;button @click=&quot;flag = !flag&quot;&gt;Toggle&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import LifeCycle from &quot;./LifeCycle.vue&quot;;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  data() &#123;<br>    return &#123;<br>      flag: true,<br>    &#125;;<br>  &#125;,<br>  components: &#123;<br>    LifeCycle,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">//LifeCycle.vue<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;LifeCycle 组件&lt;/h3&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;LifeCycle&#x27;,<br>    // 组件在内存中被创建完毕了<br>    created()&#123;<br>        console.log(&#x27;created:组件在内存中被创建完毕了&#x27;);<br>    &#125;,<br>    // 组件被渲染到页面中<br>    mounted() &#123;<br>        console.log(&#x27;mounted:组件被渲染到页面中&#x27;);<br>    &#125;,<br>    // 组件被销毁<br>    unmounted() &#123;<br>        console.log(&#x27;unmounted:组件被销毁&#x27;);<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-如何监听组件的更新"><a href="#3-如何监听组件的更新" class="headerlink" title="3. 如何监听组件的更新"></a>3. 如何监听组件的更新</h3><p><strong>当组件的 <em>data</em> 数据更新之后，vue 会自动重新渲染组件的 DOM 结构，从而保证 View 视图展示的数据和Model 数据源保持一致。</strong></p><p>当组件被重新渲染完毕之后，会自动调用 <code>updated</code> 生命周期函数。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;LifeCycle 组件---&#123;&#123;count&#125;&#125;&lt;/h3&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+1&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;LifeCycle&#x27;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;,<br>    // 组件在内存中被创建完毕了<br>    created()&#123;<br>        console.log(&#x27;created:组件在内存中被创建完毕了&#x27;);<br>    &#125;,<br>    // 组件被渲染到页面中<br>    mounted() &#123;<br>        console.log(&#x27;mounted:组件被渲染到页面中&#x27;);<br>    &#125;,<br>    // 组件更新<br>    updated() &#123;<br>        console.log(&#x27;updated:组件被重新渲染完毕了&#x27;);<br>    &#125;,<br>    // 组件被销毁<br>    unmounted() &#123;<br>        console.log(&#x27;unmounted:组件被销毁&#x27;);<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081704197.gif" alt="动23"></p><h3 id="4-组件中主要的生命周期函数"><a href="#4-组件中主要的生命周期函数" class="headerlink" title="4. 组件中主要的生命周期函数"></a>4. 组件中主要的生命周期函数</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081707478.png" alt="image-20210808170708405"></p><p>注意：在实际开发中，created 是最常用的生命周期函数！  </p><h3 id="5-组件中全部的生命周期函数"><a href="#5-组件中全部的生命周期函数" class="headerlink" title="5. 组件中全部的生命周期函数"></a>5. 组件中全部的生命周期函数</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081709280.png" alt="image-20210808170909186"></p><h3 id="6-完整的生命周期图示"><a href="#6-完整的生命周期图示" class="headerlink" title="6. 完整的生命周期图示"></a>6. 完整的生命周期图示</h3><p>可以参考 vue <a href="https://www.vue3js.cn/docs/zh/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">官方文档</a>给出的“生命周期图示”，进一步理解组件生命周期执行的过程：</p><p><img src="https://www.vue3js.cn/docs/zh/images/lifecycle.png" alt="生命周期图示"></p><h2 id="4-组件中的数据共享"><a href="#4-组件中的数据共享" class="headerlink" title="4.组件中的数据共享"></a>4.组件中的数据共享</h2><h3 id="1-组件之间的关系"><a href="#1-组件之间的关系" class="headerlink" title="1. 组件之间的关系"></a>1. 组件之间的关系</h3><p>在项目开发中，组件之间的关系分为如下 3 种：</p><p>① 父子关系</p><p>② 兄弟关系</p><p>③ 后代关系  </p><h3 id="2-父子组件之间的数据共享"><a href="#2-父子组件之间的数据共享" class="headerlink" title="2. 父子组件之间的数据共享"></a>2. 父子组件之间的数据共享</h3><p>父子组件之间的数据共享又分为：</p><p>① 父 -&gt; 子共享数据</p><p>父组件通过 <strong>v-bind 属性</strong>绑定向子组件共享数据。同时，子组件需要使用 <strong>props</strong> 接收数据。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 父组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;App 根组件--&#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+ 1&lt;/button&gt;<br>        &lt;hr&gt;<br>        &lt;my-son :num=&#x27;count&#x27;&gt;&lt;/my-son&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MySon from &#x27;./Son.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MySon<br>    &#125;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;   <br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;子组件 &#123;&#123;num&#125;&#125;&lt;/h3&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;SON&#x27;,<br>    props:[&#x27;num&#x27;],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>② 子 -&gt; 父共享数据</p><p>子组件通过自定义事件的方式向父组件共享数据。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 父组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;App 根组件--&#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+ 1&lt;/button&gt;<br>        &lt;hr&gt;<br>        &lt;my-son :num=&#x27;count&#x27; @numChange=&quot;getNum&quot;&gt;&lt;/my-son&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MySon from &#x27;./Son.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MySon<br>    &#125;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        getNum(value)&#123;<br>            // 将子组件传递的num + 1 赋值给count<br>            this.count=value;<br>        &#125;<br>    &#125;,   <br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;子组件 &#123;&#123;num&#125;&#125;&lt;/h3&gt;<br>        &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;SON&#x27;,<br>    props:[&#x27;num&#x27;],<br>    emits:[&#x27;numChange&#x27;],<br>    methods: &#123;<br>        add()&#123;<br>            // 将最新的num加1，然后通过自定义事件传递出去<br>            this.$emit(&#x27;numChange&#x27;,this.num+1);<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>③ 父 &lt;-&gt; 子双向数据同步  </p><p>父组件在使用子组件期间，可以使用 v-model 指令维护组件内外数据的双向同步：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081749342.png" alt="image-20210808174949239"></p><p>使用<code>v-model</code> 后，父组件便不需要监听子组件自定义的事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 父组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;App 根组件--&#123;&#123;count&#125;&#125;&lt;/h1&gt;<br>        &lt;button @click=&#x27;count++&#x27;&gt;+ 1&lt;/button&gt;<br>        &lt;hr&gt;<br>        &lt;!--要传递给子组件的值，前面加v-model --&gt;<br>        &lt;my-son v-model:num=&#x27;count&#x27; &gt;&lt;/my-son&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MySon from &#x27;./Son.vue&#x27;<br><br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    components:&#123;<br>        MySon<br>    &#125;,<br>    data()&#123;<br>        return &#123;<br>            count:0<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 子组件<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;子组件 &#123;&#123;num&#125;&#125;&lt;/h3&gt;<br>        &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;SON&#x27;,<br>    props:[&#x27;num&#x27;],<br>    // &#x27;update:要更新的值&#x27; 是固定写法<br>    emits:[&#x27;update:num&#x27;],<br>    methods: &#123;<br>        add()&#123;<br>            // 将最新的num加1<br>            // &#x27;update:要更新的值&#x27; 是固定写法<br>            this.$emit(&#x27;update:num&#x27;,this.num+1);<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-兄弟组件之间的数据共享"><a href="#3-兄弟组件之间的数据共享" class="headerlink" title="3. 兄弟组件之间的数据共享"></a>3. 兄弟组件之间的数据共享</h3><p>兄弟组件之间实现数据共享的方案是 <code>EventBus</code>。可以借助于第三方的包 <code>mitt</code> 来创建 eventBus 对象，从而实现兄弟组件之间的数据共享。示意图如下：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081759439.png" alt="image-20210808175921307"></p><h4 id="3-1-安装-mitt-依赖包"><a href="#3-1-安装-mitt-依赖包" class="headerlink" title="3.1 安装 mitt 依赖包"></a>3.1 安装 mitt 依赖包</h4><p>在项目中运行如下的命令，安装 mitt 依赖包：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install mitt<br></code></pre></td></tr></table></figure><h4 id="3-2-创建公共的-EventBus-模块"><a href="#3-2-创建公共的-EventBus-模块" class="headerlink" title="3.2 创建公共的 EventBus 模块"></a>3.2 创建公共的 EventBus 模块</h4><p>在项目中创建公共的 <code>eventBus 模块</code>如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个JS文件 eventBus.js</span><br><br><span class="hljs-comment">// 导入mitt包</span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span>;<br><br><span class="hljs-comment">// 创建EventBus的实例对象</span><br><span class="hljs-keyword">const</span> bus=mitt();<br><br><span class="hljs-comment">// 将EventBus的实例对象共享出去</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> bus;<br></code></pre></td></tr></table></figure><h4 id="3-3-在数据接收方自定义事件"><a href="#3-3-在数据接收方自定义事件" class="headerlink" title="3.3 在数据接收方自定义事件"></a>3.3 在数据接收方自定义事件</h4><p>在数据接收方，调用 <code>bus.on(&#39;事件名称&#39;, 事件处理函数)</code> 方法注册一个自定义事件。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 数据接收方<br>&lt;script&gt;<br><br>// 导入eventBus.js 模块，得到共享的bus对象<br>import bus from &#x27;./eventBus&#x27;<br><br>export default &#123;<br>    name:&#x27;MyRight&#x27;,<br>    data()&#123;<br>        return &#123;num:0&#125;;<br>    &#125;,<br>    //当组件在内存中被创建完毕后<br>    created()&#123;<br>        //调用bus.on()方法注册一个自定义事件，通过事件处理函数的形参接收数据<br>        bus.on(&#x27;countChange&#x27;,(count)=&gt;&#123;<br>            this.num=count;<br>        &#125;)<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-4-在数据接发送方触发事件"><a href="#3-4-在数据接发送方触发事件" class="headerlink" title="3.4 在数据接发送方触发事件"></a>3.4 在数据接发送方触发事件</h4><p>在数据发送方，调用 <code>bus.emit(&#39;事件名称&#39;, 要发送的数据) </code>方法<strong>触发自定义事件</strong>。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;数据发送&lt;/div&gt;<br>        &lt;p&gt;count的值:&#123;&#123;count&#125;&#125;&lt;/p&gt;<br>        &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;<br>    &lt;/div&gt;<br><br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>// 导入eventBus.js模块，得到共享的bus对象<br>import bus from &#x27;./eventBus&#x27;;<br><br>export default &#123;<br>    data()&#123;<br>        return &#123;count:0&#125;;<br>    &#125;,<br>    methods: &#123;<br>        add()&#123;<br>            this.count++;<br>            // 调用bus.emit()方法触发自定义事件，并发送数据<br>            bus.emit(&#x27;countChange&#x27;,this.count);<br>        &#125;<br>    &#125;,<br><br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4-后代关系组件之间的数据共享"><a href="#4-后代关系组件之间的数据共享" class="headerlink" title="4. 后代关系组件之间的数据共享"></a>4. 后代关系组件之间的数据共享</h3><p>后代关系组件之间共享数据，指的是<strong>父节点的组件</strong>向其<strong>子孙组件</strong>共享数据。此时组件之间的嵌套关系比较复杂，可以使用 <code>provide</code> 和 <code>inject</code> 实现后代关系组件之间的数据共享。  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108081943125.png" alt="image-20210808194300054"></p><h4 id="4-1-父节点通过-provide-共享数据"><a href="#4-1-父节点通过-provide-共享数据" class="headerlink" title="4.1 父节点通过 provide 共享数据"></a>4.1 父节点通过 provide 共享数据</h4><p>父节点的组件可以通过 <strong><code>provide</code> 方法</strong>，对其<strong>子孙组件</strong>共享数据：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return &#123;<br>            // 定义父组件要向子组件共享的数据<br>            color:&#x27;red&#x27;<br>        &#125;<br>    &#125;,<br>    provide()&#123;<br>        // 向子孙组件提供需要共享的数据<br>        return &#123;<br>            color:this.color<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-子孙节点通过-inject-接收数据"><a href="#4-2-子孙节点通过-inject-接收数据" class="headerlink" title="4.2 子孙节点通过 inject 接收数据"></a>4.2 子孙节点通过 inject 接收数据</h4><p>子孙节点可以使用 <code>inject</code> <strong>数组</strong>，接收父级节点向下共享的数据。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    name:&#x27;level-three&#x27;,<br>    // 子孙组件，使用inject接收父节点向下共享的color数据<br>    inject:[&#x27;color&#x27;],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="4-3-父节点对外共享响应式的数据"><a href="#4-3-父节点对外共享响应式的数据" class="headerlink" title="4.3 父节点对外共享响应式的数据"></a>4.3 父节点对外共享响应式的数据</h4><p>如果父节点修改了数据，但子节点接收的值并没有改变。因此，父节点使用 provide 向下共享数据时，可以结合 <strong>computed</strong> <strong>函数</strong>向下共享响应式的数据。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import LevelTwo from &#x27;./LevelTwo.vue&#x27;<br>// 1.从vue中按需导入computed函数<br>import &#123;computed&#125; from &#x27;vue&#x27;<br><br>export default &#123;<br>    name:&#x27;level-one&#x27;,<br>    components:&#123;<br>        LevelTwo<br>    &#125;,<br>    data()&#123;<br>        return &#123;<br>            color:&#x27;red&#x27;,<br>        &#125;<br>    &#125;,<br>    provide()&#123;<br>        // 2.使用computed函数，可以要共享的数据包装为响应式的数据<br>        return &#123;<br>            color:computed(()=&gt;this.color),<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="4-4-子孙节点使用响应式的数据"><a href="#4-4-子孙节点使用响应式的数据" class="headerlink" title="4.4 子孙节点使用响应式的数据"></a>4.4 子孙节点使用响应式的数据</h4><p>如果父级节点共享的是响应式的数据，则子孙节点必须以 .value 的形式进行使用。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h5&gt;第三层级 &#123;&#123;color.value&#125;&#125;&lt;/h5&gt;<br>        &lt;hr&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;level-three&#x27;,<br>    // 子孙组件，使用inject接收父节点向下共享的color数据<br>    inject:[&#x27;color&#x27;],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5-vuex"><a href="#5-vuex" class="headerlink" title="5. vuex"></a>5. vuex</h3><p>vuex 是终极的组件之间的数据共享方案。在企业级的 vue 项目开发中，vuex 可以让组件之间的数据共享变得高效、清晰、且易于维护。</p> <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108082021382.png" alt="image-20210808202145298" style="zoom:80%;" /><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>1.父子关系</p><p>① 父 -&gt; 子 属性绑定</p><p>② 子 -&gt; 父 事件绑定</p><p>③ 父 &lt;-&gt; 子 组件上的 v-model</p><p>2.兄弟关系</p><p>④ EventBus</p><p>3.后代关系</p><p>⑤ provide &amp; inject</p><p>4.全局数据共享<br>⑥ vuex  </p><h1 id="全局配置-axios"><a href="#全局配置-axios" class="headerlink" title="全局配置 axios"></a>全局配置 axios</h1><h2 id="1-为什么要全局配置-axios"><a href="#1-为什么要全局配置-axios" class="headerlink" title="1. 为什么要全局配置 axios"></a>1. 为什么要全局配置 axios</h2><p>在实际项目开发中，几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题：</p><p>① 每个组件中都需要导入 axios（代码臃肿）</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108082025860.png" alt="image-20210808202541733"></p><p>② 每次发请求都需要填写完整的请求路径（不利于后期的维护）  </p><h2 id="2-如何全局配置-axios"><a href="#2-如何全局配置-axios" class="headerlink" title="2. 如何全局配置 axios"></a>2. 如何全局配置 axios</h2><p>在 main.js 入口文件中，通过 <code>app.config.globalProperties</code> 全局挂载 axios，其中$http为自定义属性，示例代码如下：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108082028265.png" alt="image-20210808202805130"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/06.network/App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-comment">// 1.导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><span class="hljs-comment">//2.配置请求根路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;http://www.escook.cn&#x27;</span>;<br><br><span class="hljs-comment">// 3全局挂载axios</span><br>app.config.globalProperties.$http=axios;<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p>组件便可以简便地使用<code>axios</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h3&gt;Get Info 组件&lt;/h3&gt;<br>        &lt;hr&gt;<br>        &lt;button @click=&quot; getInfo&quot;&gt;发起GET请求&lt;/button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;GetInfo&#x27;,<br>    methods: &#123;<br>        async getInfo()&#123;<br>           let res=await this.$http.get(&#x27;/shops&#x27;,&#123;params:&#123;<br>               id:1<br>           &#125;&#125;);<br>           console.log(res.data);<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h1><h2 id="1-什么是-ref-引用"><a href="#1-什么是-ref-引用" class="headerlink" title="1. 什么是 ref 引用"></a>1. 什么是 ref 引用</h2><p>ref 用来辅助开发者在<strong>不依赖于 jQuery</strong> 的情况下，<em>获取 DOM 元素或组件的引用</em>。<br>每个 vue 的组件实例上，都包含一个 <strong>$refs 对象</strong>，里面存储着对应的 DOM 元素或组件的引用。默认情况下，<strong>组件的 $refs 指向一个空对象</strong>。  </p><h2 id="2-使用-ref-引用-DOM-元素"><a href="#2-使用-ref-引用-DOM-元素" class="headerlink" title="2. 使用 ref 引用 DOM 元素"></a>2. 使用 ref 引用 DOM 元素</h2><p>如果想要使用 ref 引用页面上的 DOM 元素，则可以按照如下的方式进行操作：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 使用ref属性，为对应的DOM对象添加引用名称 --&gt;<br>    &lt;h1 ref=&#x27;myH1&#x27;&gt;App根组件&lt;/h1&gt;<br>    &lt;button @click=&quot;getRefs&quot;&gt;获取$refs引用&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  methods: &#123;<br>    getRefs() &#123;<br>    // 通过this.$refs 引用的名称可以获取到dom元素的引用<br>      console.log(this.$refs); //&#123;myH1: h1&#125;<br>      this.$refs.myH1.style.color=&#x27;red&#x27;;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-使用-ref-引用组件实例"><a href="#3-使用-ref-引用组件实例" class="headerlink" title="3. 使用 ref 引用组件实例"></a>3. 使用 ref 引用组件实例</h2><p>使用$refs拿到组件的引用后，可以调用组件的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">//父组件<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1 &gt;App根组件&lt;/h1&gt;<br>    &lt;button @click=&quot;getRefs&quot; &gt;重置为0&lt;/button&gt;<br>    &lt;my-counter ref=&#x27;counterRef&#x27;&gt;&lt;/my-counter&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyCounter from &#x27;./counter.vue&#x27;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components:&#123;MyCounter&#125;,<br>  methods: &#123;<br>    getRefs() &#123;<br>        // this.$refs.counterRef获取到组件<br>        // 然后调用组件的方法reset<br>        this.$refs.counterRef.reset();<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">//被引用的组件<br>&lt;template&gt;<br>  &lt;div class=&quot;counter-container&quot;&gt;<br>      &lt;h3&gt;counter组件---&#123;&#123;count&#125;&#125;&lt;/h3&gt;<br>      &lt;button type=&#x27;button&#x27; class=&quot;btn btn-info&quot; @click=&#x27;count+=1&#x27;&gt;+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyCounter&#x27;,<br>    data()&#123;<br>        return &#123;<br>            count:0,<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        reset()&#123;<br>            this.count=0;<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="4-this-nextTick-回调函数-方法"><a href="#4-this-nextTick-回调函数-方法" class="headerlink" title="4. this.$nextTick(回调函数) 方法"></a>4. this.$nextTick(回调函数) 方法</h2><p>通过布尔值 inputVisible 来控制组件中的文本框与按钮的按需切换。当文本框展示出来之后，如果希望它立即获得焦点，则尝试为其添加 ref 引用，并调用原生 DOM 对象的.focus() 方法，但由于组件的dom元素是异步更新的，当执行.focus()方法时，还没有获取到对应的dom元素。因此，会在控制台看到报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;h1&gt;App 根组件&lt;/h1&gt;<br>      &lt;hr&gt;<br>      &lt;input type=&quot;text&quot; v-if=&#x27;inputVisible&#x27; ref=&#x27;ipt&#x27;&gt;<br>      &lt;button v-else @click=&#x27;showInput&#x27;&gt;展示输入框&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    data()&#123;<br>        return &#123;inputVisible:false&#125;<br>    &#125;,<br>    methods: &#123;<br>        showInput()&#123;<br>            //展示文本框<br>            this.inputVisible=true;<br>            // dom元素是异步更新的，当点击了按钮后，dom还没有来得及更新<br>            // 因此this.$refs.ipt 为undefined<br>            console.log(this.$refs.ipt); //undefined<br>            // 自动获取焦点<br>            this.$refs.ipt.focus();<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>组件的 <code>$nextTick(回调函数)</code> 方法，会<strong>把回调函数推迟到下一个 DOM 更新周期之后执行。</strong>通俗的理解是：等组件的DOM 异步地重新渲染完成后，再执行 回调函数，从而能保证 回调函数可以操作到最新的 DOM 元素。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyApp&#x27;,<br>    data()&#123;<br>        return &#123;inputVisible:false&#125;<br>    &#125;,<br>    methods: &#123;<br>        showInput()&#123;<br>            //展示文本框<br>            this.inputVisible=true;<br>            // 把对文本框的操作推迟到下次dom更新后，否则页面上根本不存在文本框<br>            this.$nextTick(()=&gt;&#123;<br>                this.$refs.ipt.focus();<br>            &#125;)<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><h2 id="1-什么是动态组件"><a href="#1-什么是动态组件" class="headerlink" title="1. 什么是动态组件"></a>1. 什么是动态组件</h2><p>动态组件指的是<strong>动态切换组件的显示与隐藏</strong>。vue 提供了一个内置的 <code>&lt;component&gt;</code> 组件，专门用来实现组件的动态渲染。  </p><p>① <code>&lt;component&gt;</code> 是组件的占位符</p><p>② 通过 <code>is</code> 属性动态指定要渲染的组件名称</p><p>③ <code>&lt;component is=&quot;要渲染的组件的名称&quot;&gt;&lt;/component&gt;</code>  </p><h2 id="2-如何实现动态组件渲染"><a href="#2-如何实现动态组件渲染" class="headerlink" title="2. 如何实现动态组件渲染"></a>2. 如何实现动态组件渲染</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;h1&gt;App 根组件&lt;/h1&gt;<br>      &lt;!-- 3.点击按钮动态切换组件的名称 --&gt;<br>      &lt;!-- 注意组件的有引号包裹着 --&gt;<br>      &lt;button @click=&quot;comName=&#x27;MyHome&#x27;&quot;&gt;首页&lt;/button&gt;<br>      &lt;button @click=&quot;comName=&#x27;MyMovie&#x27;&quot;&gt;电影&lt;/button&gt;<br>      &lt;!-- 2.通过is属性，动态指定要渲染的组件名称 --&gt;<br>      &lt;component :is=&#x27;comName&#x27;&gt;&lt;/component&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    components:&#123;<br>        MyHome,MyMovie<br>    &#125;,<br>    data()&#123;<br>        return &#123;<br>            // 1.当前要渲染的组件名称<br>            comName:&#x27;MyHome&#x27;,<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="3-使用-keep-alive-保持状态"><a href="#3-使用-keep-alive-保持状态" class="headerlink" title="3. 使用 keep-alive 保持状态"></a>3. 使用 keep-alive 保持状态</h2><p>在home组件声明了一个计数的变量count=0，点击按钮count的时候，count值会增加。但是当切换到了moive组件，再切换回home组件后，会发现count的值恢复到0了。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108091826851.gif" alt="组件"></p><p>默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组件的状态。组件切换后，并没有被销毁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive&gt;<br>    &lt;component :is=&#x27;comName&#x27;&gt;&lt;/component&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108091829447.gif" alt="组件没有被销毁"></p><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><h2 id="1-什么是插槽"><a href="#1-什么是插槽" class="headerlink" title="1. 什么是插槽"></a>1. 什么是插槽</h2><p>插槽（Slot）是 vue 为组件的封装者提供的能力。允许开发者在封装组件时，把<strong>不确定的、希望由用户指定的部分</strong>定义为插槽。  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108091832326.png" alt="image-20210809183221206"></p><p>可以把插槽认为是组件封装期间，为用户预留的<strong>内容的占位符</strong>。  </p><h2 id="2-体验插槽的基础用法"><a href="#2-体验插槽的基础用法" class="headerlink" title="2. 体验插槽的基础用法"></a>2. 体验插槽的基础用法</h2><p>在封装组件时，可以通过 <code>&lt;slot&gt;</code> 元素定义插槽，从而<strong>为用户预留内容占位符</strong>。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">//MyCom.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;p&gt;这是第一个p标签&lt;/p&gt;<br>      &lt;!-- 通过slot标签，为用户预留内容占位符 --&gt;<br>      &lt;slot&gt;&lt;/slot&gt;<br>      &lt;p&gt;最后一个p标签&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">//App.vue <br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;my-com&gt;<br>        &lt;!-- 在使用my-com组件时，为插槽填充内容 --&gt;<br>      &lt;p&gt;hhhhhhh&lt;/p&gt;<br>    &lt;/my-com&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="2-1-没有预留插槽的内容会被丢弃"><a href="#2-1-没有预留插槽的内容会被丢弃" class="headerlink" title="2.1 没有预留插槽的内容会被丢弃"></a>2.1 没有预留插槽的内容会被丢弃</h3><p>如果在封装组件时没有预留任何 <code>&lt;slot&gt;</code> 插槽，则用户提供的任何自定义内容都会被丢弃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>      &lt;p&gt;这是第一个p标签&lt;/p&gt;<br>      &lt;!-- 封装组件时，没有预留任何插槽 --&gt;<br>      &lt;p&gt;最后一个p标签&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-com&gt;<br>    &lt;!-- 自定义的内容会被丢弃 --&gt;<br>  &lt;p&gt;hhhhhhh&lt;/p&gt;<br>&lt;/my-com&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-后备内容"><a href="#2-2-后备内容" class="headerlink" title="2.2 后备内容"></a>2.2 后备内容</h3><p>封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供后备内容（默认内容）。如果组件的使用者没有为插槽提供任何内容，则后备内容会生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;这是第一个p标签&lt;/p&gt;<br>    &lt;slot&gt;这是后备内容&lt;/slot&gt;<br>    &lt;p&gt;最后一个p标签&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="3-具名插槽"><a href="#3-具名插槽" class="headerlink" title="3. 具名插槽"></a>3. 具名插槽</h2><p>如果在封装组件时需要<strong>预留多个插槽节点</strong>，则需要为每个 <code>&lt;slot&gt;</code> 插槽指定具体的 name 名称。这种带有具体名称的插槽叫做“<strong>具名插槽</strong>”。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>    &lt;header&gt;<br>      &lt;!-- 希望把页头放在这里 --&gt;<br>      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;<br>    &lt;/header&gt;<br>    &lt;main&gt;<br>      &lt;!-- 我们希望把主要内容放在这里 --&gt;<br>      &lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt;<br>    &lt;/main&gt;<br>    &lt;footer&gt;<br>      &lt;!-- 我们希望把页脚放在这里 --&gt;<br>      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;<br>    &lt;/footer&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>注意：没有指定 name 名称的插槽，会有隐含的名称叫做 “default”。  </p><h3 id="3-1-为具名插槽提供内容"><a href="#3-1-为具名插槽提供内容" class="headerlink" title="3.1 为具名插槽提供内容"></a>3.1 为具名插槽提供内容</h3><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;APP 根组件&lt;/h1&gt;<br>    &lt;my-com&gt;<br>      &lt;template v-slot:header&gt;<br>        &lt;p&gt;文章标题&lt;/p&gt;<br>      &lt;/template&gt;<br>      &lt;template v-slot:main&gt;<br>        &lt;p&gt;文章内容&lt;/p&gt;<br>      &lt;/template&gt;<br>      &lt;template v-slot:footer&gt;<br>        &lt;p&gt;结尾&lt;/p&gt;<br>      &lt;/template&gt;<br>    &lt;/my-com&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>只有默认插槽使用的时候可以省略template，其余的插槽均不能省略template。</p><h3 id="3-2-具名插槽的简写形式"><a href="#3-2-具名插槽的简写形式" class="headerlink" title="3.2 具名插槽的简写形式"></a>3.2 具名插槽的简写形式</h3><p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code>可以被重写为 <code>#header</code>  。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-com&gt;<br>  &lt;template #header&gt;<br>    &lt;p&gt;文章标题&lt;/p&gt;<br>  &lt;/template&gt;<br>  &lt;template #main&gt;<br>    &lt;p&gt;文章内容&lt;/p&gt;<br>  &lt;/template&gt;<br>  &lt;template #footer&gt;<br>    &lt;p&gt;结尾&lt;/p&gt;<br>  &lt;/template&gt;<br>&lt;/my-com&gt;<br></code></pre></td></tr></table></figure><h2 id="4-作用域插槽"><a href="#4-作用域插槽" class="headerlink" title="4. 作用域插槽"></a>4. 作用域插槽</h2><p>在封装组件的过程中，可以为预留的 <code>&lt;slot&gt;</code> 插槽绑定 props 数据，这种<strong>带有 props 数据的 <code>&lt;slot&gt;</code> 叫做“作用域插槽”</strong>。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;box&quot;&gt;<br>    &lt;h3&gt;这是MyCom组件&lt;/h3&gt;<br>    &lt;!-- 插槽给组件提供数据 --&gt;<br>    &lt;slot :info=&quot;information&quot;&gt;&lt;/slot&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      information: &#123;<br>        phone: 12122133,<br>        address: &quot;北京市&quot;,<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>接收插槽中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-com&gt;<br>  &lt;!-- 如把接收的数据命名为scope --&gt;<br>  &lt;template v-slot:default=&#x27;scope&#x27;&gt;<br>    &lt;p&gt;&#123;&#123;scope&#125;&#125;&lt;/p&gt;<br>&lt;!-- &#123; &quot;info&quot;: &#123; &quot;phone&quot;: 12122133, &quot;address&quot;: &quot;北京市&quot; &#125; &#125; --&gt;<br>  &lt;/template&gt;<br>&lt;/my-com&gt;<br></code></pre></td></tr></table></figure><h3 id="4-1-解构作用域插槽的-Prop"><a href="#4-1-解构作用域插槽的-Prop" class="headerlink" title="4.1 解构作用域插槽的 Prop"></a>4.1 解构作用域插槽的 Prop</h3><p>作用域插槽对外提供的数据对象，可以使用解构赋值简化数据的接收过程。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-com&gt;<br>  &lt;!-- 解构赋值接收的数据 --&gt;<br>  &lt;template v-slot:default=&quot;&#123; info &#125;&quot;&gt;<br>    &lt;p&gt;&#123;&#123; info.address &#125;&#125;&lt;/p&gt;<br>    &lt;!-- 北京市 --&gt;<br>  &lt;/template&gt;<br>&lt;/my-com&gt;<br></code></pre></td></tr></table></figure><h3 id="4-2-使用作用域插槽的小案例"><a href="#4-2-使用作用域插槽的小案例" class="headerlink" title="4.2 使用作用域插槽的小案例"></a>4.2 使用作用域插槽的小案例</h3><p>向用户提供mytable组件和table中的数据，但是用户想要按照自己的想法渲染表格。在封装 MyTable 组件的过程中，可以通过作用域插槽把表格每一行的数据传递给组件的使用者。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">//mytable.vue<br>&lt;template&gt;<br>  &lt;table&gt;<br>      &lt;tr&gt;<br>          &lt;th&gt;Id&lt;/th&gt;<br>          &lt;th&gt;Name&lt;/th&gt;<br>          &lt;th&gt;State&lt;/th&gt;<br>      &lt;/tr&gt;<br>      &lt;tr v-for=&#x27;item in list&#x27; :key=&#x27;item.id&#x27;&gt;<br>          &lt;slot :user=&#x27;item&#x27;&gt;<br>          &lt;/slot&gt;<br>      &lt;/tr&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyTable&#x27;,<br>    data()&#123;<br>        return&#123;<br>            // 列表的数据<br>            list:[<br>                &#123;id:1,name:&#x27;张三&#x27;,state:true&#125;,<br>                &#123;id:2,name:&#x27;李四&#x27;,state:false&#125;,<br>                &#123;id:3,name:&#x27;王五&#x27;,state:true&#125;,<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在使用 MyTable 组件时，自定义单元格的渲染方式，并接收作用域插槽对外提供的数据。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-table&gt;<br>  &lt;template #default=&#x27;&#123;user&#125;&#x27;&gt;<br>    &lt;td&gt;&#123;&#123;user.id&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;&#123;&#123;user.name&#125;&#125;&lt;/td&gt;<br>    &lt;td&gt;&lt;input type=&quot;checkbox&quot; :checked=&quot;user.state&quot;&gt;&lt;/td&gt;<br>  &lt;/template&gt;<br>&lt;/my-table&gt;<br></code></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="1-什么是自定义指令"><a href="#1-什么是自定义指令" class="headerlink" title="1. 什么是自定义指令"></a>1. 什么是自定义指令</h2><p>vue 官方提供了 v-for、v-model、v-if 等常用的内置指令。除此之外 vue 还允许开发者自定义指vue 中的自定义指令分为两类，分别是：</p><ul><li><p>私有自定义指令</p></li><li><p>全局自定义指令  </p></li></ul><h2 id="2-声明私有自定义指令的语法"><a href="#2-声明私有自定义指令的语法" class="headerlink" title="2. 声明私有自定义指令的语法"></a>2. 声明私有自定义指令的语法</h2><p>在每个 vue 组件中，可以在 directives 节点下声明私有自定义指令。示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">directives:&#123;<br>    <span class="hljs-comment">// 自定义一个私有指令</span><br>    <span class="hljs-comment">// 声明指令的时候不需要加v- ,使用自定义指令的时候需要加v-</span><br>    <span class="hljs-attr">focus</span>:&#123;<br>        <span class="hljs-comment">// 当被绑定的元素插入到dom中时，自动触发mounted函数</span><br>        <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params">el</span>)</span> &#123;<br>            <span class="hljs-comment">// 让绑定的元素获得焦点</span><br>            el.focus() <br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-使用自定义指令"><a href="#3-使用自定义指令" class="headerlink" title="3. 使用自定义指令"></a>3. 使用自定义指令</h2><p>在使用自定义指令时，需要加上 v- 前缀。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 声明自定义指令时，指令的名字是focus --&gt;<br>&lt;!-- 使用自定义指令时，需要加v-前缀 --&gt;<br>&lt;input type=&quot;text&quot; v-focus&gt;<br></code></pre></td></tr></table></figure><h2 id="4-声明全局自定义指令的语法"><a href="#4-声明全局自定义指令的语法" class="headerlink" title="4. 声明全局自定义指令的语法"></a>4. 声明全局自定义指令的语法</h2><p>全局共享的自定义指令需要通过“单页面应用程序的实例对象”进行声明，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/05.directive/App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><br><span class="hljs-comment">//===========================</span><br><span class="hljs-comment">//注册一个全局自定义指令，&#x27;v-focus&#x27;</span><br>app.directive(<span class="hljs-string">&#x27;focus&#x27;</span>,&#123;<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params">el</span>)</span>&#123;<br>        el.focus();<br>    &#125;<br>&#125;)<br><span class="hljs-comment">//===========================</span><br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5-updated-函数"><a href="#5-updated-函数" class="headerlink" title="5.updated 函数"></a>5.updated 函数</h2><p><strong>mounted 函数只在元素第一次插入 DOM 时被调用</strong>，当 DOM 更新时 mounted 函数不会被触发。 <strong>updated函数会在每次 DOM 更新完成后被调用。</strong>示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">directives: &#123;<br><span class="hljs-attr">focus</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-comment">//第一次插入dom时触发这个函数</span><br>    el.focus();<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-comment">// 每次dom更新时 都会触发updated函数</span><br>    el.focus();<br>    &#125;,<br>&#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><p>注意：在 vue2 的项目中使用自定义指令时，【 mounted -&gt; bind 】【 updated -&gt; update 】  </p><h2 id="6-函数简写"><a href="#6-函数简写" class="headerlink" title="6. 函数简写"></a>6. 函数简写</h2><p>如果 mounted 和updated 函数中的逻辑完全相同，则可以简写成如下格式：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//全局</span><br>app.directive(<span class="hljs-string">&#x27;focus&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">el</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 在mounted和updated时都会被触发</span><br>    el.focus();<br>&#125;)<br><span class="hljs-comment">//===============</span><br><span class="hljs-comment">// 私有指令</span><br><span class="hljs-attr">directives</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-title">focus</span>(<span class="hljs-params">el</span>)</span>&#123;<br>        el.focus();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-指令的参数值"><a href="#7-指令的参数值" class="headerlink" title="7. 指令的参数值"></a>7. 指令的参数值</h2><p>在绑定指令时，可以通过“等号”的形式为指令绑定具体的参数值，示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;h1 v-color=&quot;&#x27;red&#x27;&quot;&gt;App 根组件&lt;/h1&gt;<br><br>app.directive(&#x27;color&#x27;,(el,binding)=&gt;&#123;<br>    // binding.value 便可以获取通过等号为指令绑定的值<br>    el.style.color=binding.value;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue小案例|TodoList_购物车_table案例</title>
    <link href="/2021/08/10/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-TodoList%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <url>/2021/08/10/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-TodoList%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="todo-list小案例"><a href="#todo-list小案例" class="headerlink" title="todo-list小案例"></a>todo-list小案例</h1><p>案例效果</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061721870.png" alt="image-20210806172116797"></p><p>用到的知识点</p><p>① vite 创建项目</p><p>② 组件的封装与注册</p><p>③ props</p><p>④ 样式绑定</p><p>⑤ 计算属性</p><p>⑥ 自定义事件</p><p>⑦ 组件上的 v-model  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108061950527.png" alt="image-20210806195021439" style="zoom:50%;" /><h2 id="1-使用-vite-初始化项目"><a href="#1-使用-vite-初始化项目" class="headerlink" title="1.使用 vite 初始化项目"></a>1.使用 vite 初始化项目</h2><p>在终端运行以下的命令，初始化 vite 项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bahs">npm init vite-app todos<br></code></pre></td></tr></table></figure><p> 使用 vscode 打开项目，并安装依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>安装 less 语法相关的依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i less -D  <br></code></pre></td></tr></table></figure><h2 id="2-梳理项目结构"><a href="#2-梳理项目结构" class="headerlink" title="2. 梳理项目结构"></a>2. 梳理项目结构</h2><ul><li><p>重置 index.css 中的全局样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重置 App.vue 组件的代码结构如下  :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  data() &#123;<br>    return &#123;<br>      // 任务列表数据<br>      todolist: [<br>        &#123; id: 1, task: &quot;周一早晨9点开会&quot;, done: false &#125;,<br>        &#123; id: 2, task: &quot;周一晚上8点聚餐&quot;, done: false &#125;,<br>        &#123; id: 3, task: &quot;准备周三上午的演讲稿&quot;, done: true &#125;,<br>      ],<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>  <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>删除 components 目录下的 HelloWorld.vue 组件  </p></li><li><p>在终端运行’npm run dev’命令，把项目运行起来  </p></li></ul><h2 id="3-封装-todo-list-组件"><a href="#3-封装-todo-list-组件" class="headerlink" title="3.封装 todo-list 组件"></a>3.封装 todo-list 组件</h2><h3 id="3-1-创建并注册-TodoList-组件"><a href="#3-1-创建并注册-TodoList-组件" class="headerlink" title="3.1 创建并注册 TodoList 组件"></a>3.1 创建并注册 TodoList 组件</h3><ol><li><p>在 src/components/todo-list/ 目录下新建 <code>TodoList.vue</code> 组件： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;TodoList 组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;TodoList&#x27;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>    <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>App.vue </code>组件中导入并注册 <code>TodoList.vue</code>组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  import TodoList from &#x27;./components/todo-list/TodoList.vue&#x27;;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components:&#123;<br>    TodoList<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 App.vue 的 template 模板结构中使用注册的 TodoList 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;todo-list&gt;&lt;/todo-list&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-基于-bootstrap-渲染列表组件"><a href="#3-2-基于-bootstrap-渲染列表组件" class="headerlink" title="3.2 基于 bootstrap 渲染列表组件"></a>3.2 基于 bootstrap 渲染列表组件</h3><ol><li><p>将 资料 目录下的 css 文件夹拷贝到 src/assets/ 静态资源目录中。</p></li><li><p>在 main.js 入口文件中，导入 src/assets/css/bootstrap.css 样式表：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/bootstrap.css&#x27;</span><br><br>createApp(App).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>根据 bootstrap 提供的列表组（<a href="https://v4.bootcss.com/docs/components/list-group/#with-badges%EF%BC%89%E5%92%8C%E5%A4%8D%E9%80%89%E6%A1%86%EF%BC%88https://v4.bootcss.com/docs/components/forms/#checkboxes-and-radios-1%EF%BC%89%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%88%E6%9E%9C%EF%BC%9A">https://v4.bootcss.com/docs/components/list-group/#with-badges）和复选框（https://v4.bootcss.com/docs/components/forms/#checkboxes-and-radios-1）渲染列表组件的基本效果：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ul class=&quot;list-group&quot;&gt;<br>    &lt;!-- 列表组 --&gt;<br>    &lt;li class=&quot;list-group-item d-flex justify-content-between align-items-center&quot;&gt;<br>      &lt;!-- 复选框 --&gt;<br>      &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>        &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;customCheck1&quot; /&gt;<br>        &lt;label class=&quot;custom-control-label&quot; for=&quot;customCheck1&quot;&gt;Check this custom checkbox<br>        &lt;/label&gt;<br>      &lt;/div&gt;<br>      &lt;!-- 徽标 --&gt;<br>      &lt;span class=&quot;badge badge-success badge-pill&quot;&gt;完成&lt;/span&gt;<br>      &lt;span class=&quot;badge badge-warning badge-pill&quot;&gt;未完成&lt;/span&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;TodoList&quot;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-3-为-TodoList-声明-props-属性"><a href="#3-3-为-TodoList-声明-props-属性" class="headerlink" title="3.3 为 TodoList 声明 props 属性"></a>3.3 为 TodoList 声明 props 属性</h3><ol><li><p>为了接受外界传递过来的列表数据，需要在 TodoList 组件中声明如下的 props 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;TodoList&quot;,<br>  props:&#123;<br>    //   列表数据<br>      list:&#123;<br>          type:Array,<br>          required:true,<br>          default:[]<br>      &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 App 组件中通过 list 属性，将数据传递到 TodoList 组件之中：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;todo-list :list=&#x27;todolist&#x27;&gt;&lt;/todo-list&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-4-渲染列表的-DOM-结构"><a href="#3-4-渲染列表的-DOM-结构" class="headerlink" title="3.4 渲染列表的 DOM 结构"></a>3.4 渲染列表的 DOM 结构</h3><ol><li><p>通过 v-for 指令，循环渲染列表的 DOM 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;ul class=&quot;list-group&quot;&gt;<br>    &lt;!-- 列表组 --&gt;<br>    &lt;li class=&quot;list-group-item d-flex justify-content-between align-items-center&quot; :key=&#x27;item.id&#x27; v-for=&#x27;item in list&#x27;&gt;<br>      &lt;!-- 复选框 --&gt;<br>      &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>        &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;item.id&quot; /&gt;<br>        &lt;label class=&quot;custom-control-label&quot; :for=&quot;item.id&quot;&gt;&#123;&#123;item.task&#125;&#125;&lt;/label&gt;<br>      &lt;/div&gt;<br>      &lt;!-- 徽标 --&gt;<br>        &lt;span class=&quot;badge badge-success badge-pill&quot; v-if=&#x27;item.done&#x27;&gt;完成&lt;/span&gt;<br>        &lt;span class=&quot;badge badge-warning badge-pill&quot; v-else&gt;未完成&lt;/span&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>通过 v-if 和 v-else 指令，按需渲染 badge 效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;span class=&quot;badge badge-success badge-pill&quot; v-if=&#x27;item.done&#x27;&gt;完成&lt;/span&gt;<br>&lt;span class=&quot;badge badge-warning badge-pill&quot; v-else&gt;未完成&lt;/span&gt;<br></code></pre></td></tr></table></figure></li><li><p>通过 v-model 指令，双向绑定任务的完成状态：</p><p>因为父组件提供的todolist数据是一个非常复杂的数组，因此使用proprs传递数据时传递的是<strong>引用</strong>。在子组件循环该数组时，使用v-model对input进行绑定时，修改的会是原数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 复选框 --&gt;<br>&lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;item.id&quot;<br>v-model=&quot;item.done&quot; /&gt;<br>&lt;!-- 注意：App 父组件通过 props 传递过来的 list 是“引用类型”的数， --&gt;<br>&lt;!-- 这里 v-model 双向绑定的结果是：用户的操作修改的是 App 组件中数据的状态 --&gt;<br></code></pre></td></tr></table></figure></li><li><p>通过 v-bind 属性绑定，动态切换元素的 class 类名：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot; scoped&gt;<br>// 为列表设置高度<br>.list-group&#123;<br>    max-width: 600px;<br>    margin: 50px auto;<br>&#125;<br><br>// 删除效果<br>.delete&#123;<br>    text-decoration: line-through;<br>    color:gray;<br>    font-style: italic;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;label class=&quot;custom-control-label&quot; :for=&quot;item.id&quot; :class=&#x27;item.done?&quot;delete&quot;:&quot;&quot;&#x27;&gt;&#123;&#123;item.task&#125;&#125;&lt;/label&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-封装-todo-input-组件"><a href="#4-封装-todo-input-组件" class="headerlink" title="4. 封装 todo-input 组件"></a>4. 封装 todo-input 组件</h2><h3 id="4-1-创建并注册-TodoInput-组件"><a href="#4-1-创建并注册-TodoInput-组件" class="headerlink" title="4.1 创建并注册 TodoInput 组件"></a>4.1 创建并注册 TodoInput 组件</h3><ol><li><p>在 src/components/todo-input/ 目录下新建 TodoInput.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;Todo Input 组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;TodoInput&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&#x27;less&#x27; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 App.vue 组件中导入并注册 TodoInput.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import TodoList from &quot;./components/todo-list/TodoList.vue&quot;;<br>import TodoInput from &#x27;./components/todo-input/todoinput.vue&#x27;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components: &#123;<br>    TodoList,TodoInput<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 App.vue 的 template 模板结构中使用注册的 TodoInput 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;todo-input&gt;&lt;/todo-input&gt;<br>    &lt;hr&gt;<br>    &lt;todo-list :list=&quot;todolist&quot;&gt;&lt;/todo-list&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-2-基于-bootstrap-渲染组件结构"><a href="#4-2-基于-bootstrap-渲染组件结构" class="headerlink" title="4.2 基于 bootstrap 渲染组件结构"></a>4.2 基于 bootstrap 渲染组件结构</h3><ol><li><p>根据 bootstrap 提供的 inline-forms（<a href="https://v4.bootcss.com/docs/components/forms/#inline-forms%EF%BC%89%E6%B8%B2%E6%9F%93">https://v4.bootcss.com/docs/components/forms/#inline-forms）渲染</a> TodoInput 组件的基本结构。</p></li><li><p>在 TodoInput 组件中渲染如下的 DOM 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br><br>    &lt;form class=&quot;form-inline&quot;&gt;<br>        &lt;div class=&quot;input-group mb-2 mr-sm-2&quot;&gt;<br>            &lt;div class=&quot;input-group-prepend&quot;&gt;<br>                &lt;div class=&quot;input-group-text&quot;&gt;任务&lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入任务...&quot; style=&quot;width:320px&quot;&gt;<br>        &lt;/div&gt;<br>        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary mb-2&quot;&gt;添加&lt;/button&gt;<br>    &lt;/form&gt;<br><br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;TodoInput&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&#x27;less&#x27; scoped&gt;<br>    form&#123;<br>        margin: 20px auto 0;<br>        width: 550px;<br>        display: flex;<br>        justify-content: center;<br>    &#125;<br>    <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-3-通过自定义事件向外传递数据"><a href="#4-3-通过自定义事件向外传递数据" class="headerlink" title="4.3 通过自定义事件向外传递数据"></a>4.3 通过自定义事件向外传递数据</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108062009652.png" alt="image-20210806200940579"></p><ol><li><p>在 TodoList 组件的 data 中声明如下的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">data()&#123;<br>    return&#123;<br>        // 新任务名称<br>        taskname:&#x27;&#x27;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>为 input 输入框进行 v-model 的双向数据绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入任务...&quot; style=&quot;width:320px&quot; v-model.trim=&quot;taskname&quot;&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>监听 form 表单的 submit 事件，阻止默认提交行为并指定事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;form class=&quot;form-inline&quot; @submit.prevent=&quot;onFormSubmit&quot;&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 methods 中声明 onFormSubmit 事件处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>    // 表单提交处理函数<br>    onFormSubmit()&#123;<br>        // 1.判断任务名称是否为空<br>        if(!this.taskname) return alert(&#x27;待办事项不能为空！&#x27;);<br>        // 2.触发自定义的add事件<br><br>        // 3.清空文本框<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>声明自定义事件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">export default &#123;<br>    name:&#x27;TodoInput&#x27;,<br>    // 声明自定义事件<br>    emits:[&#x27;add&#x27;],<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进一步完善 onFormSubmit 事件处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>    // 表单提交处理函数<br>    onFormSubmit()&#123;<br>        // 1.判断任务名称是否为空<br>        if(!this.taskname) return alert(&#x27;待办事项不能为空！&#x27;);<br>        // 2.触发自定义的add事件<br>        this.$emit(&#x27;add&#x27;,this.taskname);<br>        // 3.清空文本框<br>        this.taskname=&#x27;&#x27;;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-4-实现添加任务的功能"><a href="#4-4-实现添加任务的功能" class="headerlink" title="4.4 实现添加任务的功能"></a>4.4 实现添加任务的功能</h3><ol><li><p>在 App.vue 组件中监听 TodoInput 组件自定义的 add 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;todo-input @add=&#x27;onAddNewTask&#x27;&gt;&lt;/todo-input&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 App.vue 组件的 methods 中声明 onAddNewTask 事件处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>  onAddNewTask(task) &#123;<br>    //向任务列表中新增任务信息<br>    this.todolist.push(&#123;<br>      id:this.todolist.length+1,<br>      task:task,<br>      done:false<br>    &#125;)<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-封装-todo-button-组件"><a href="#5-封装-todo-button-组件" class="headerlink" title="5. 封装 todo-button 组件"></a>5. 封装 todo-button 组件</h2><h3 id="5-1-创建并注册-TodoButton-组件"><a href="#5-1-创建并注册-TodoButton-组件" class="headerlink" title="5.1 创建并注册 TodoButton 组件"></a>5.1 创建并注册 TodoButton 组件</h3><ol><li><p>在 src/components/todo-button/ 目录下新建 TodoButton.vue 组件：</p></li><li><p>在 App.vue 组件中导入并注册 TodoButton.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import TodoList from &quot;./components/todo-list/TodoList.vue&quot;;<br>import TodoInput from &quot;./components/todo-input/todoinput.vue&quot;;<br>import TodoButton from &#x27;./components/todo-button/TodoButton.vue&#x27;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components: &#123;<br>    TodoList,<br>    TodoInput,<br>    TodoButton<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-2-基于-bootstrap-渲染组件结构"><a href="#5-2-基于-bootstrap-渲染组件结构" class="headerlink" title="5.2 基于 bootstrap 渲染组件结构"></a>5.2 基于 bootstrap 渲染组件结构</h3><ol><li><p>根据 bootstrap 提供的 Button group（<a href="https://v4.bootcss.com/docs/components/button-group/%EF%BC%89%E6%B8%B2%E6%9F%93">https://v4.bootcss.com/docs/components/button-group/）渲染</a> Todobutton 组件的基本结构。</p></li><li><p>在 TodoButton 组件中渲染如下的 DOM 结构：  </p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;mt-3 btn-container&quot;&gt;<br>    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;Basic example&quot;&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;全部&lt;/button&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;已经完成&lt;/button&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;未完成&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li> 并通过 button-container 类名美化组件的样式：</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot; scoped&gt;<br>.btn-container&#123;<br>    max-width: 450px;<br>    margin:0px auto;<br>    <br>    text-align: center;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="5-3-给按钮添加点击事件"><a href="#5-3-给按钮添加点击事件" class="headerlink" title="5.3 给按钮添加点击事件"></a>5.3 给按钮添加点击事件</h3><ol><li><p>在 TodoButton 声明active变量，用于记录当前激活的按钮，默认为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;TodoButton&quot;,<br>  data()&#123;<br>    return&#123;<br>      active:0,<br>    &#125;<br>  &#125;,<br><br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>通过 动态绑定 class 类名 的方式控制按钮的激活状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;mt-3 btn-container&quot;&gt;<br>    &lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;Basic example&quot;&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==0?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot;&gt;全部&lt;/button&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==1?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot;&gt;已经完成&lt;/button&gt;<br>      &lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==2?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot;&gt;未完成&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>监听按钮的点击事件，并传递按钮的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==0?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot; @click=&#x27;onBtnClick(0)&#x27;&gt;<br>  全部&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==1?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot; @click=&#x27;onBtnClick(1)&#x27;&gt;<br>    已经完成&lt;/button&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn&quot; :class=&quot;active==2?&#x27;btn-primary&#x27;:&#x27;btn-secondary&#x27;&quot; @click=&#x27;onBtnClick(2)&#x27;&gt;<br>    未完成&lt;/button&gt;<br></code></pre></td></tr></table></figure></li><li><p>当点击按钮时，把按钮的索引赋值给active，并将按钮的索引通过自定义事件传递给出去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;TodoButton&quot;,<br>  emits:[&#x27;button-change&#x27;],<br>  methods: &#123;<br>    onBtnClick(value)&#123;<br>      this.active=value;<br>        //把按钮的索引值传递出去<br>      this.$emit(&#x27;button-change&#x27;,value);<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-4-通过计算属性动态切换列表的数据"><a href="#5-4-通过计算属性动态切换列表的数据" class="headerlink" title="5.4 通过计算属性动态切换列表的数据"></a>5.4 通过计算属性动态切换列表的数据</h3><ol><li><p>App.vue接收子组件传递的按钮激活索引。</p><p>声明一个激活按钮索引名的变量，默认值 为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    // 任务列表数据<br>    todolist: [<br>      &#123; id: 1, task: &quot;周一早晨9点开会&quot;, done: false &#125;,<br>      &#123; id: 2, task: &quot;周一晚上8点聚餐&quot;, done: false &#125;,<br>      &#123; id: 3, task: &quot;准备周三上午的演讲稿&quot;, done: true &#125;,<br>    ],<br>    btn_index:0<br>  &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><p>然后通过监听自定义事件，把子组件传递的索引值赋值给btn_index。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;todo-button @button-change=&quot;list_change&quot;&gt;&lt;/todo-button&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>  list_change(value) &#123;<br>    // 接收此时的按钮索引<br>    this.btn_index=value;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>根据btn_index值，此时可以根据当前激活按钮的索引，动态计算出要显<br>示的列表数据并返回即可，因此在 App 根组件中声明如下的计算属性 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed:&#123;<br>  tasks()&#123;<br>    switch(this.btn_index)&#123;<br>      case 0: return this.todolist;<br>      case 1:return this.todolist.filter(item=&gt;item.done);<br>      case 2: return this.todolist.filter(item=&gt;!item.done);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>在 App 根组件的 DOM 结构中，将 TodoList 组件的 :list=”todolist” 修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;todo-list :list=&quot;tasks&quot; class=&quot;mt-2&quot;&gt;&lt;/todo-list&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="购物车小案例"><a href="#购物车小案例" class="headerlink" title="购物车小案例"></a>购物车小案例</h1><h2 id="0-实现步骤"><a href="#0-实现步骤" class="headerlink" title="0.实现步骤"></a>0.实现步骤</h2><p>① 初始化项目基本结构</p><p>② 封装 EsHeader 组件</p><p>③ 基于 axios 请求商品列表数据</p><p>④ 封装 EsFooter 组件</p><p>⑤ 封装 EsGoods 组件</p><p>⑥ 封装 EsCounter 组件  </p><h2 id="1-初始化项目结构"><a href="#1-初始化项目结构" class="headerlink" title="1. 初始化项目结构"></a>1. 初始化项目结构</h2><p>在终端运行以下的命令，初始化 vite 项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bahs">npm init vite-app code-cart<br>cd code-cart<br></code></pre></td></tr></table></figure><p> 使用 vscode 打开项目，并安装依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>安装 less 语法相关的依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i less -D  <br></code></pre></td></tr></table></figure><p>初始化 index.css 全局样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>清理项目结构：</p><ul><li><p>把 bootstrap 相关的文件放入 src/assets 目录下</p></li><li><p>在 main.js 中导入 bootstrap.css</p></li><li><p>清空 App.vue 组件</p></li><li><p>删除 components 目录下的 HelloWorld.vue 组件  </p></li></ul><h2 id="2-封装-es-header-组件"><a href="#2-封装-es-header-组件" class="headerlink" title="2. 封装 es-header 组件"></a>2. 封装 es-header 组件</h2><h3 id="2-1-创建并注册-EsHeader-组件"><a href="#2-1-创建并注册-EsHeader-组件" class="headerlink" title="2.1 创建并注册 EsHeader 组件"></a>2.1 创建并注册 EsHeader 组件</h3><p>1.在 src/components/es-header/ 目录下新建 EsHeader.vue 组件：</p><p>2.在 App.vue 组件中导入并注册 EsHeader.vue 组件：</p><p>3.在 App.vue 的 template 模板结构中使用 EsHeader 组件：</p><h3 id="2-2-封装-es-header-组件"><a href="#2-2-封装-es-header-组件" class="headerlink" title="2.2 封装 es-header 组件"></a>2.2 封装 es-header 组件</h3><p>0.封装需求</p><ul><li><p>允许用户自定义 title 标题内容</p></li><li><p>允许用户自定义 color 文字颜色</p></li><li><p>允许用户自定义 bgcolor 背景颜色</p></li><li><p>允许用户自定义 fsize 字体大小</p></li><li><p>es-header 组件必须固定定位到页面顶部的位置，高度为 45px，文本居中，z-index 为 999  </p></li></ul><p>1.在 es-header 组件中封装以下的 props 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsHeader&quot;,<br>  props: &#123;<br>    title: &#123;<br>      // 标题内容<br>      type: String,<br>      default: &quot;es-header&quot;,<br>    &#125;,<br>    bgcolor: &#123;<br>      // 背景颜色<br>      type: String,<br>      default: &quot;#007BFF&quot;,<br>    &#125;,<br>    color: &#123;<br>      // 文字颜色<br>      type: String,<br>      default: &quot;#ffffff&quot;,<br>    &#125;,<br>    fsize: &#123;<br>      // 文字大小<br>      type: Number,<br>      default: 12,<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.渲染标题内容，并动态为 DOM 元素绑定行内的 style 样式对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div<br>    :style=&quot;&#123; color: color, backgroundColor: bgcolor, fontSize: fsize + &#x27;px&#x27; &#125;&quot;&gt;<br>    &#123;&#123; title &#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.为 DOM 节点添加 header-container 类名，进一步美化 es-header 组件的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&#x27;header-container&#x27;  :style=&#x27;&#123;backgroundColor:bgcolor,color:color,fontSize:fsize+&quot;px&quot;&#125;&#x27; &gt;<br>        &#123;&#123;title&#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>    .header-container&#123;<br>        position: fixed;<br>        top:0;<br>        left:0;<br>        width: 100%;<br>        height: 45px;<br>        text-align: center;<br>        line-height: 45px;<br>        z-index: 999;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>4.在 App 根组件中使用 es-header 组件时，通过 title 属性 指定 标题内容 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;es-header title=&quot;购物车案例&quot;&gt;&lt;/es-header&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="3-基于-axios-请求商品列表数据"><a href="#3-基于-axios-请求商品列表数据" class="headerlink" title="3. 基于 axios 请求商品列表数据"></a>3. 基于 axios 请求商品列表数据</h2><h3 id="3-1-全局配置-axios"><a href="#3-1-全局配置-axios" class="headerlink" title="3.1 全局配置 axios"></a>3.1 全局配置 axios</h3><p>1.运行如下的命令安装 axios :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i axios<br></code></pre></td></tr></table></figure><p>2.在 main.js 入口文件中导入并全局配置 axios：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/bootstrap.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-comment">// 导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><br><span class="hljs-comment">// 配置请求的根路径</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span>;<br><span class="hljs-comment">// 将axios挂载为全局的$http 自定义属性</span><br>app.config.globalProperties.$http=axios;<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-2-请求商品列表数据"><a href="#3-2-请求商品列表数据" class="headerlink" title="3.2 请求商品列表数据"></a>3.2 请求商品列表数据</h3><p>1.在 App.vue 根组件中声明如下的 data 数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-comment">// 商品列表的数据</span><br><span class="hljs-attr">goodslist</span>: [],<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 根组件的 created 生命周期函数中，预调用 获取商品列表数据 的<br>methods 方法：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 组件实例创建完毕之后的生命周期函数</span><br><span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// 调用methods中的getGoodsList方法，请求商品列表数据</span><br>  <span class="hljs-built_in">this</span>.getGoodsList();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在 Ap.vue 根组件的 methods 节点中，声明刚才预调用的 getGoodsList 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-comment">// 获取商品列表数据的方法</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getGoodsList</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&quot;/api/cart&quot;</span>);<br>    <span class="hljs-keyword">if</span>(res.status!==<span class="hljs-number">200</span>) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;数据请求失败&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.goodslist=res.data;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="4-封装-es-footer-组件"><a href="#4-封装-es-footer-组件" class="headerlink" title="4. 封装 es-footer 组件"></a>4. 封装 es-footer 组件</h2><h3 id="4-1-创建并注册-EsFooter-组件"><a href="#4-1-创建并注册-EsFooter-组件" class="headerlink" title="4.1 创建并注册 EsFooter 组件"></a>4.1 创建并注册 EsFooter 组件</h3><p>1.在 src/components/es-footer/ 目录下新建 EsFooter.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;footer&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&quot;EsFooter&quot;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 组件中导入并注册 EsFooter.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import EsHeader from &quot;./components/es-header/EsHeader.vue&quot;;<br>import EsFooter from &#x27;./components/es-footer/EsFooter.vue&#x27;;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components: &#123;<br>    EsHeader,EsFooter<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.在 App.vue 的 template 模板结构中使用 EsFooter 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;es-header title=&quot;购物车案例&quot;&gt;&lt;/es-header&gt;<br>    &lt;es-footer&gt;&lt;/es-footer&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="4-2-封装-es-footer-组件"><a href="#4-2-封装-es-footer-组件" class="headerlink" title="4.2 封装 es-footer 组件"></a>4.2 封装 es-footer 组件</h3><h4 id="4-2-0-封装需求"><a href="#4-2-0-封装需求" class="headerlink" title="4.2.0 封装需求"></a>4.2.0 封装需求</h4><p>1.es-footer 组件必须固定定位到 页面底部 的位置，高度为 50px，内容两端贴边对齐，z-index 为 999</p><p>2.允许用户自定义 <code>amount</code> 总价格（单位是元），并在渲染时 保留两位小数</p><p>3.允许用户自定义 <code>total</code> 总数量，并渲染到 结算按钮 中；如果要结算的商品数量为0，则禁用结算按钮</p><p>4.允许用户自定义 <code>isfull</code> 全选按钮的选中状态</p><p>5.允许用户通过 <code>自定义事件</code> 的形式，监听全选按钮 选中状态的变化 ，并获取到 最新的选中状态</p><h4 id="4-2-1-渲染组件的基础布局"><a href="#4-2-1-渲染组件的基础布局" class="headerlink" title="4.2.1 渲染组件的基础布局"></a>4.2.1 渲染组件的基础布局</h4><p>1.将 EsFooter.vue 组件在页面底部进行固定定位：</p><p>2.根据 bootstrap 提供的 Checkboxes <a href="https://v4.bootcss.com/docs/components/forms/#checkboxes">https://v4.bootcss.com/docs/components/forms/#checkboxes</a> 渲染左侧的 全选 按钮：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;footer-container&quot;&gt;<br>    &lt;!-- 全选区域 --&gt;<br>    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;fullCheck&quot; /&gt;<br>      &lt;label class=&quot;custom-control-label&quot; for=&quot;fullCheck&quot;&gt;<br>          全选&lt;/label&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsFooter&quot;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.footer-container &#123;<br>  position: fixed;<br>  bottom: 0;<br>  left: 0;<br>  box-sizing: border-box;<br>  width: 100%;<br>  height: 50px;<br>  background-color: #fff;<br>  border-top: 1px solid #efefef;<br>  display: flex;<br>  justify-content: space-between;<br>  padding: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>并在全局样式表 index.css 中覆盖 全选 按钮的圆角样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-checkbox</span> <span class="hljs-selector-class">.custom-control-label</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.渲染合计对应的价格区域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;footer-container&quot;&gt;<br>    &lt;!-- 全选区域 --&gt;<br>    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;fullCheck&quot; /&gt;<br>      &lt;label class=&quot;custom-control-label&quot; for=&quot;fullCheck&quot;&gt;<br>          全选&lt;/label&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 合计区域 --&gt;<br>    &lt;div&gt;<br>        &lt;span&gt;合计：&lt;/span&gt;<br>        &lt;span class=&quot;amount&quot;&gt;￥0.00&lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>    <br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>并在当前组件的 <style> 节点中美化总价格的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">.amount&#123;<br>    font-weight: bold;<br>    color:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.根据 bootstrap 提供的 Buttons <a href="https://v4.bootcss.com/docs/components/buttons/#examples">https://v4.bootcss.com/docs/components/buttons/#examples</a> 渲染结算按钮：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;footer-container&quot;&gt;<br>    &lt;!-- 全选区域 --&gt;<br>    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;fullCheck&quot; /&gt;<br>      &lt;label class=&quot;custom-control-label&quot; for=&quot;fullCheck&quot;&gt; 全选&lt;/label&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 合计区域 --&gt;<br>    &lt;div&gt;<br>      &lt;span&gt;合计：&lt;/span&gt;<br>      &lt;span class=&quot;amount&quot;&gt;￥0.00&lt;/span&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 结算按钮 --&gt;<br>    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;结算(0)&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsFooter&quot;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.footer-container &#123;<br>  position: fixed;<br>  bottom: 0;<br>  left: 0;<br>  box-sizing: border-box;<br>  width: 100%;<br>  height: 50px;<br>  background-color: #fff;<br>  border-top: 1px solid #efefef;<br>  display: flex;<br>  justify-content: space-between;<br>  align-items: center;<br>  padding: 10px;<br>&#125;<br>.amount &#123;<br>  font-weight: bold;<br>  color: red;<br>&#125;<br>button&#123;<br>    min-width: 90px;<br>    height: 38px;<br>    border-radius: 19px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-封装自定义属性-amount"><a href="#4-2-2-封装自定义属性-amount" class="headerlink" title="4.2.2 封装自定义属性 amount"></a>4.2.2 封装自定义属性 amount</h4><blockquote><p>amount 是已勾选商品的总价格</p></blockquote><p>1.在 EsFooter.vue 组件的 props 节点中，声明如下的自定义属性：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">props:&#123;<br>//   已勾选商品的总价格<br>    amount:&#123;<br>        type:Number,<br>        default:0,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 EsFooter.vue 组件的 DOM 结构中渲染 amount 的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 合计区域 --&gt;<br>&lt;div&gt;<br>    &lt;span&gt;合计：&lt;/span&gt;<br>    &lt;span class=&quot;amount&quot;&gt;￥&#123;&#123;amount.toFixed(2)&#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-封装自定义属性-total"><a href="#4-2-3-封装自定义属性-total" class="headerlink" title="4.2.3 封装自定义属性 total"></a>4.2.3 封装自定义属性 total</h4><blockquote><p>total 为已勾选商品的总数量</p></blockquote><p>1.在 EsFooter.vue 组件的 props 节点中，声明如下的自定义属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsFooter&quot;,<br>props:&#123;<br><br>// 已经勾选商品的总数量<br>    total:&#123;<br>        type:Number,<br>        default:0,<br>    &#125;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在 EsFooter.vue 组件的 DOM 结构中渲染 total 的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;结算&#123;&#123;total&#125;&#125;&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>3.动态控制结算按钮的禁用状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; :disabled=&#x27;total===0&#x27;&gt;结算&#123;&#123;total&#125;&#125;&lt;/button&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-封装自定义属性-isfull"><a href="#4-2-4-封装自定义属性-isfull" class="headerlink" title="4.2.4 封装自定义属性 isfull"></a>4.2.4 封装自定义属性 isfull</h4><blockquote><p>isfull 是全选按钮的选中状态，true 表示选中，false 表示未选中</p></blockquote><p>1.在 EsFooter.vue 组件的 props 节点中，声明如下的自定义属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">props: &#123;<br>//   已勾选商品的总价格<br>amount: &#123;<br>    type: Number,<br>    default: 0,<br>&#125;,<br>//   已经勾选商品的总数量<br>total: &#123;<br>    type: Number,<br>    default: 0,<br>&#125;,<br>//  全选按钮是否选中<br>isfull:&#123;<br>    type:Boolean,<br>    default:false,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2.为复选框动态绑定 ckecked 属性的值：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 全选区域 --&gt;<br>&lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>    &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;fullCheck&quot;  checked=&#x27;isfull&#x27;/&gt;<br>    &lt;label class=&quot;custom-control-label&quot; for=&quot;fullCheck&quot;&gt; 全选&lt;/label&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="4-2-5-封装自定义事件-fullChange"><a href="#4-2-5-封装自定义事件-fullChange" class="headerlink" title="4.2.5 封装自定义事件 fullChange"></a>4.2.5 封装自定义事件 fullChange</h4><blockquote><p>通过自定义事件 fullChange，把最新的选中状态传递给组件的使用者</p></blockquote><p>1.监听复选框选中状态变化的 change 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>    &lt;input<br>    type=&quot;checkbox&quot;<br>    class=&quot;custom-control-input&quot;<br>    id=&quot;fullCheck&quot;<br>    checked=&quot;isfull&quot;<br>    @change=&#x27;onCheckBoxChange&#x27;<br>    /&gt;<br>    &lt;label class=&quot;custom-control-label&quot; for=&quot;fullCheck&quot;&gt; 全选&lt;/label&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>2.在 methods 中声明 onCheckBoxChange ，并通过事件对象 e 获取到最新的选中状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>//   监听checkbox选中状态变化的事件<br>    onCheckBoxChange(e)&#123;<br>        this.$emit(&#x27;fullChange&#x27;,e.target.checked)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.在 emits 中声明自定义事件：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">emits:[&#x27;fullChange&#x27;],<br></code></pre></td></tr></table></figure><p>4.在 onCheckBoxChange 事件处理函数中，通过 $emit() 触发自定义事件，把最新的选中状态传递给当前组件的使用者：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>//   监听checkbox选中状态变化的事件<br>    onCheckBoxChange(e)&#123;<br>        this.$emit(&#x27;fullChange&#x27;,e.target.checked)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>5.在 App.vue 根组件中测试 EsFooter.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;es-header title=&quot;购物车案例&quot;&gt;&lt;/es-header&gt;<br>    &lt;es-footer @fullChange=&quot;onFullStateChange&quot;&gt;&lt;/es-footer&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>并在 methods 中声明 onFullStateChange 处理函数，通过形参获取到全选按钮最新的选中状态：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-comment">// 监听选中状态</span><br>  <span class="hljs-function"><span class="hljs-title">onFullStateChange</span>(<span class="hljs-params">isFull</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(isFull);<br>  &#125;<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-封装-es-goods-组件"><a href="#5-封装-es-goods-组件" class="headerlink" title="5. 封装 es-goods 组件"></a>5. 封装 es-goods 组件</h2><p>1.在 src/components/es-goods/ 目录下新建 EsGoods.vue 组件：  </p><p>2.在 App.vue 组件中导入并注册 EsGoods.vue 组件：</p><p>3.在 App.vue 的 template 模板结构中使用 EsGoods 组件：</p><h3 id="5-2-封装-es-goods-组件"><a href="#5-2-封装-es-goods-组件" class="headerlink" title="5.2 封装 es-goods 组件"></a>5.2 封装 es-goods 组件</h3><h4 id="5-2-0-封装需求"><a href="#5-2-0-封装需求" class="headerlink" title="5.2.0 封装需求"></a>5.2.0 封装需求</h4><p>1.实现 EsGoods 组件的基础布局</p><p>2.封装组件的 6 个自定义属性（id, thumb，title，price，count，checked）</p><p>3.封装组件的自定义事件 stateChange ，允许外界监听组件选中状态的变化  </p><h4 id="5-2-1-渲染组件的基础布局"><a href="#5-2-1-渲染组件的基础布局" class="headerlink" title="5.2.1 渲染组件的基础布局"></a>5.2.1 渲染组件的基础布局</h4><p>1.渲染 EsGoods 组件的基础 DOM 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;goods-container&quot;&gt;<br>    &lt;!-- 左侧图片区域 --&gt;<br>    &lt;div class=&quot;left&quot;&gt;<br>      &lt;!-- 商品的缩略图 --&gt;<br>      &lt;img src=&quot;&quot; alt=&quot;商品图片&quot; class=&quot;thumb&quot; /&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 右侧信息区域 --&gt;<br>    &lt;div class=&quot;right&quot;&gt;<br>      &lt;!-- 商品名称 --&gt;<br>      &lt;div class=&quot;top&quot;&gt;xxxx&lt;/div&gt;<br>      &lt;div class=&quot;bottom&quot;&gt;<br>        &lt;!-- 商品价格 --&gt;<br>        &lt;div class=&quot;price&quot;&gt;￥0.00&lt;/div&gt;<br>        &lt;!-- 商品数量 --&gt;<br>        &lt;div class=&quot;count&quot;&gt;数量&lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsGoods&quot;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.美化组件的布局样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;less&quot;&gt;<br>.goods-container &#123;<br>  display: flex;<br>  padding: 10px;<br>  /* 左侧图片的样式 */<br>  .left &#123;<br>    margin-right: 10px;<br>    /* 商品图片 */<br>    .thumb &#123;<br>      display: block;<br>      width: 100px;<br>      height: 100px;<br>      background-color: #efefef;<br>    &#125;<br>  &#125;<br>  /* 右侧商品名称、单价、数量的样式 */<br>  .right &#123;<br>    display: flex;<br>    flex-direction: column;<br>    justify-content: space-between;<br>    flex: 1;<br>    .top &#123;<br>      font-weight: bold;<br>    &#125;<br>    .bottom &#123;<br>      display: flex;<br>      justify-content: space-between;<br>      align-items: center;<br>      .price &#123;<br>        color: red;<br>        font-weight: bold;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>3.在商品缩略图之外包裹复选框( <a href="https://v4.bootcss.com/docs/components/forms/#checkboxes">https://v4.bootcss.com/docs/components/forms/#checkboxes</a> )效果：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 左侧图片区域 --&gt;<br>&lt;div class=&quot;left&quot;&gt;<br>    &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>    &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;customCheck1&quot; /&gt;<br>    &lt;label class=&quot;custom-control-label&quot; for=&quot;customCheck1&quot;&gt;<br>        &lt;!-- 商品的缩略图 --&gt;<br>        &lt;img src=&quot;&quot; alt=&quot;商品图片&quot; class=&quot;thumb&quot; /&gt;<br>    &lt;/label&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>4.覆盖复选框的默认样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">.custom-checkbox .custom-control-label::before,<br>.custom-checkbox .custom-control-label::after<br>&#123;<br>    top:3.4rem;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.在 App.vue 组件中循环渲染 EsGoods.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-goods v-for=&#x27;item in goodslist&#x27; :key=&#x27;item.id&#x27;&gt;&lt;/es-goods&gt;<br></code></pre></td></tr></table></figure><p>6.为 EsGoods.vue 添加顶边框：</p><p>通过+ 选择器，排除第一项，为其他兄弟元素添加+选择器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less">&lt;<span class="hljs-selector-tag">style</span> <span class="hljs-selector-tag">lang</span>=&quot;<span class="hljs-selector-tag">less</span>&quot;&gt;<br><span class="hljs-selector-class">.goods-container</span> &#123;<br>    <span class="hljs-comment">// 最终生成的选择器为 .goods-container + .goods-container</span><br>  + <span class="hljs-selector-class">.goods-container</span> &#123;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#efefef</span>;<br>  &#125;<br> <span class="hljs-comment">// 其他样式省略</span><br>&#125;<br><br>&lt;/<span class="hljs-selector-tag">style</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-封装自定义属性-id"><a href="#5-2-2-封装自定义属性-id" class="headerlink" title="5.2.2 封装自定义属性 id"></a>5.2.2 封装自定义属性 id</h4><blockquote><p>id 是每件商品的唯一标识  </p></blockquote><p>1.在 EsGoods.vue 组件的 props 节点中，声明如下的自定义属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;EsGoods&quot;</span>,<br>  <span class="hljs-attr">props</span>:&#123;<br>    <span class="hljs-comment">//   唯一的key值</span><br>    <span class="hljs-attr">id</span>:&#123;<br>        <span class="hljs-attr">type</span>:[<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Number</span>],<br>        <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.在渲染复选框时动态绑定 input 的 id 属性和 label 的 for 属性值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>&lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;id&quot; /&gt;<br>&lt;label class=&quot;custom-control-label&quot; :for=&quot;id&quot;&gt;<br>    &lt;!-- 商品的缩略图 --&gt;<br>    &lt;img src=&quot;&quot; alt=&quot;商品图片&quot; class=&quot;thumb&quot; /&gt;<br>&lt;/label&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>3.在 App.vue 中使用 EsGoods.vue 组件时，动态绑定 id 属性的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;es-header title=&quot;购物车案例&quot;&gt;&lt;/es-header&gt;<br>    &lt;es-goods v-for=&#x27;item in goodslist&#x27; :key=&#x27;item.id&#x27; :id=&#x27;item.id&#x27;&gt;&lt;/es-goods&gt;<br>    &lt;es-footer @fullChange=&quot;onFullStateChange&quot;&gt;&lt;/es-footer&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-封装其它属性"><a href="#5-2-3-封装其它属性" class="headerlink" title="5.2.3 封装其它属性"></a>5.2.3 封装其它属性</h4><blockquote><p>除了 id 属性之外，EsGoods 组件还需要封装：<br>缩略图（thumb）、商品名称（title）、单价（price）、数量（count）、勾选状态（checked）这 5 个属性  </p></blockquote><p>1.在 EsGoods.vue 组件的 props 节点中，声明如下的自定义属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsGoods&quot;,<br>  props: &#123;<br>    //   唯一的key值<br>    id: &#123;<br>      type: [String, Number],<br>      required: true,<br>    &#125;,<br>    //商品缩略图<br>    thumb:&#123;<br>        type:String,<br>        required:true,<br>    &#125;,<br>    // 商品名称<br>    title:&#123;<br>        type:String,<br>        required:true,<br>    &#125;,<br>    // 单价<br>    price:&#123;<br>        type:Number,<br>        required:true,<br>    &#125;,<br>    // 商品数量<br>    count:&#123;<br>        type:Number,<br>        required:true,<br>    &#125;,<br>    // 勾选状态<br>    checked:&#123;<br>        type:Boolean,<br>        required:true,<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在 EsGoods.vue 组件的 DOM 结构中渲染商品的信息数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;goods-container&quot;&gt;<br>    &lt;!-- 左侧图片区域 --&gt;<br>    &lt;div class=&quot;left&quot;&gt;<br>      &lt;div class=&quot;custom-control custom-checkbox&quot;&gt;<br>        &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; :id=&quot;id&quot; :checked=&#x27;checked&#x27;/&gt;<br>        &lt;label class=&quot;custom-control-label&quot; :for=&quot;id&quot;&gt;<br>          &lt;!-- 商品的缩略图 --&gt;<br>          &lt;img :src=&quot;thumb&quot; alt=&quot;商品图片&quot; class=&quot;thumb&quot; /&gt;<br>        &lt;/label&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 右侧信息区域 --&gt;<br>    &lt;div class=&quot;right&quot;&gt;<br>      &lt;!-- 商品名称 --&gt;<br>      &lt;div class=&quot;top&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;<br>      &lt;div class=&quot;bottom&quot;&gt;<br>        &lt;!-- 商品价格 --&gt;<br>        &lt;div class=&quot;price&quot;&gt;&#123;&#123;price.tofixed(2)&#125;&#125;&lt;/div&gt;<br>        &lt;!-- 商品数量 --&gt;<br>        &lt;div class=&quot;count&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.App.vue 组件中使用 EsGoods.vue 组件时，动态绑定对应属性的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;es-header title=&quot;购物车案例&quot;&gt;&lt;/es-header&gt;<br>    &lt;es-goods<br>      v-for=&quot;item in goodslist&quot;<br>      :key=&quot;item.id&quot;<br>      :id=&quot;item.id&quot;<br>      :thumb=&quot;item.goods_img&quot;<br>      :count=&quot;item.goods_count&quot;<br>      :price=&quot;item.goods_price&quot;<br>      :title=&quot;item.goods_name&quot;<br>      :checked=&quot;item.goods_state&quot;<br>    &gt;&lt;/es-goods&gt;<br>    &lt;es-footer @fullChange=&quot;onFullStateChange&quot;&gt;&lt;/es-footer&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-封装自定义事件-stateChange"><a href="#5-2-4-封装自定义事件-stateChange" class="headerlink" title="5.2.4 封装自定义事件 stateChange"></a>5.2.4 封装自定义事件 stateChange</h4><blockquote><p>点击复选框时，可以把最新的勾选状态，通过自定义事件的方式传递给组件的使用者。</p></blockquote><p>1.在 EsGoods.vue 组件中，监听 checkbox 选中状态变化的事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>    type=&quot;checkbox&quot;<br>    class=&quot;custom-control-input&quot;<br>    :id=&quot;id&quot;<br>    :checked=&quot;checked&quot;<br>    @change=&quot;onCheckBoxChange&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><p>2.在 EsGoods.vue 组件的 methods 中声明对应的事件处理函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">onCheckBoxChange</span>(<span class="hljs-params">e</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(e.target.checked);<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.在 EsGoods.vue 组件中声明自定义事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">emits:[&#x27;stateChange&#x27;]<br></code></pre></td></tr></table></figure><p>4.完善 onCheckBoxChange 函数的处理逻辑，调用 $emit() 函数触发自定义事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>    onCheckBoxChange(e)&#123;<br>        this.$emit(&#x27;stateChange&#x27;,&#123;<br>            id:this.id,<br>            ischecked:e.target.checked<br>        &#125;)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>5.在 App.vue 根组件中使用 EsGoods.vue 组件时，监听它的 stateChange 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-goods<br>      v-for=&quot;item in goodslist&quot;<br>      :key=&quot;item.id&quot;<br>      :id=&quot;item.id&quot;<br>      :thumb=&quot;item.goods_img&quot;<br>      :count=&quot;item.goods_count&quot;<br>      :price=&quot;item.goods_price&quot;<br>      :title=&quot;item.goods_name&quot;<br>      :checked=&quot;item.goods_state&quot;<br>      @stateChange=&#x27;onGoodsStateChange&#x27;<br>&gt;&lt;/es-goods&gt;<br></code></pre></td></tr></table></figure><p>并在 App.vue 的 methods 中声明如下的事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 监听商品变化的事件<br>onGoodsStateChange(value) &#123;<br>  this.goodslist.some(item=&gt;&#123;<br>    if(item.id===value.id)&#123;<br>      item.goods_state=value.ischecked;<br>      return true;<br>    &#125;<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="6-实现合计、结算数量、全选功能"><a href="#6-实现合计、结算数量、全选功能" class="headerlink" title="6. 实现合计、结算数量、全选功能"></a>6. 实现合计、结算数量、全选功能</h2><h3 id="6-1-动态统计已勾选商品的总价格"><a href="#6-1-动态统计已勾选商品的总价格" class="headerlink" title="6.1 动态统计已勾选商品的总价格"></a>6.1 动态统计已勾选商品的总价格</h3><blockquote><p>需求分析：<br>合计的商品总价格，依赖于 goodslist 数组中每一件商品信息的变化，此场景下适合使用计算属<br>性。  </p></blockquote><p>1.在 App.vue 中声明如下的计算属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed:&#123;<br>  // 已勾选商品的总价格<br>  amount()&#123;<br>    let sum=0;<br>    this.goodslist.filter(item=&gt;item.goods_state===true).forEach(item=&gt;&#123;<br>      sum+=item.goods_price*item.goods_count;<br>    &#125;);<br>    return sum;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 中使用 EsFooter.vue 组件时，动态绑定已勾选商品的总价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-footer @fullChange=&quot;onFullStateChange&quot; :amount=&#x27;amount&#x27;&gt;&lt;/es-footer&gt;<br></code></pre></td></tr></table></figure><h3 id="6-2-动态统计已勾选商品的总数量"><a href="#6-2-动态统计已勾选商品的总数量" class="headerlink" title="6.2 动态统计已勾选商品的总数量"></a>6.2 动态统计已勾选商品的总数量</h3><blockquote><p>需求分析：<br>已勾选商品的总数量依赖项 goodslist 中商品勾选状态的变化，此场景下适合使用计算属性。  </p></blockquote><p>1.在 App.vue 中声明如下的计算属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">total() &#123;<br>  let sum = 0;<br>  this.goodslist<br>    .filter((item) =&gt; item.goods_state === true)<br>    .forEach((item) =&gt; &#123;<br>      sum += item.goods_count;<br>    &#125;);<br>  return sum;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2.在 App.vue 中使用 EsFooter.vue 组件时，动态绑定已勾选商品的总数量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-footer @fullChange=&quot;onFullStateChange&quot; :amount=&quot;amount&quot; :total=&quot;total&quot;&gt;&lt;/es-footer&gt;<br></code></pre></td></tr></table></figure><h3 id="6-3-实现全选功能"><a href="#6-3-实现全选功能" class="headerlink" title="6.3 实现全选功能"></a>6.3 实现全选功能</h3><p>1.在 App.vue 组件中监听到 EsFooter.vue 组件的选中状态发生变化时，立即更新<br>goodslist 中每件商品的选中状态即可：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用 footer 组件 --&gt;<br>&lt;es-footer :total=&quot;total&quot; :amount=&quot;amount&quot;<br>@fullChange=&quot;onFullStateChange&quot;&gt;&lt;/es-footer&gt;<br></code></pre></td></tr></table></figure><p>2.在 onFullStateChange 的事件处理函数中修改每件商品的选中状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 监听是否全选<br>onFullStateChange(isFull) &#123;<br>    this.goodslist.forEach(item=&gt;item.goods_state=isFull)<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="7-封装-es-counter-组件"><a href="#7-封装-es-counter-组件" class="headerlink" title="7. 封装 es-counter 组件"></a>7. 封装 es-counter 组件</h2><h3 id="7-1-创建并注册-EsCounter-组件"><a href="#7-1-创建并注册-EsCounter-组件" class="headerlink" title="7.1 创建并注册 EsCounter 组件"></a>7.1 创建并注册 EsCounter 组件</h3><p>1.在 src/components/es-counter/ 目录下新建 EsCounter.vue 组件：</p><p>2.在 EsGoods.vue 组件中导入并注册 EsCounter.vue 组件：</p><p>3.在 EsGoods.vue 的 template 模板结构中使用 EsCounter.vue 组件：</p><h3 id="7-2-封装-es-counter-组件"><a href="#7-2-封装-es-counter-组件" class="headerlink" title="7.2 封装 es-counter 组件"></a>7.2 封装 es-counter 组件</h3><h4 id="7-2-0-封装需求"><a href="#7-2-0-封装需求" class="headerlink" title="7.2.0 封装需求"></a>7.2.0 封装需求</h4><p>1.渲染组件的 基础布局</p><p>2.实现数量值的 加减操作</p><p>3.处理 min 最小值</p><p>4.使用 watch 侦听器处理文本框输入的结果</p><p>5.封装 numChange 自定义事件  </p><blockquote><p>代码示例</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-counter :num=&quot;count&quot; :min=&quot;1&quot; @numChange=&quot;getNumber&quot;&gt;&lt;/es-counter&gt;<br></code></pre></td></tr></table></figure><h4 id="7-2-1-渲染组件的基础布局"><a href="#7-2-1-渲染组件的基础布局" class="headerlink" title="7.2.1 渲染组件的基础布局"></a>7.2.1 渲染组件的基础布局</h4><p>1.基于 bootstrap 提供的 Buttons <a href="https://v4.bootcss.com/docs/components/buttons/#examples">https://v4.bootcss.com/docs/components/buttons/#examples</a> 和 form-control 渲染组件的基础布局：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;counter-container&quot; id=&quot;counter&quot;&gt;<br>    &lt;!-- 数量 -1 按钮 --&gt;<br>    &lt;button type=&quot;button&quot; id=&quot;button1&quot; class=&quot;btn btn-light btn-sm&quot;&gt;-&lt;/button&gt;<br>    &lt;!-- 输入框 --&gt;<br>    &lt;input<br>      type=&quot;number&quot;<br>      id=&quot;input&quot;<br>      class=&quot;form-control form-control-sm iptnum&quot;<br>    /&gt;<br>    &lt;!-- 数量 +1 按钮 --&gt;<br>    &lt;button type=&quot;button&quot; id=&quot;button2&quot; class=&quot;btn btn-light btn-sm&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>2.美化当前组件的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&#x27;css&#x27; scoped&gt;<br>.counter-container &#123;<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>&#125;<br>#input &#123;<br>  box-sizing: border-box;<br>  width: 52px;<br>  padding-left: 8px;<br>  height: 25px;<br>  text-align: center;<br>&#125;<br><br>#button1,<br>#button2 &#123;<br>  width: 25px;<br>  height: 25px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-实现数值的渲染及加减操作"><a href="#7-2-2-实现数值的渲染及加减操作" class="headerlink" title="7.2.2 实现数值的渲染及加减操作"></a>7.2.2 实现数值的渲染及加减操作</h4><blockquote><p>思路分析：<br>1.加减操作需要依赖于 EsCounter 组件的 data 数据</p><p>2.初始数据依赖于父组件通过 props 传递进来<br>将父组件传递进来的 props 初始值转存到 data 中，形成 EsCounter 组件的内部状态！  </p></blockquote><p>1.在 EsCounter.vue 组件中声明如下的 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">props:&#123;<br>    num:&#123;<br>        type:Number,<br>        default:0<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在 EsGoods.vue 组件中通过属性绑定的形式，将数据传递到 EsCounter.vue 组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;count&quot;&gt;&lt;es-counter :num=&#x27;count&#x27;&gt;&lt;/es-counter&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>注意：不要直接把 num 通过 v-model 指令双向绑定到 input 输入框，因为 vue<br>规定：props 的值只读的！例如下面的做法是错误的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- Warning 警告：不要模仿下面的操作 --&gt;<br>&lt;input type=&quot;number&quot; class=&quot;form-control form-control-sm ipt-num&quot;<br>v-model.number=&quot;num&quot; /&gt;<br></code></pre></td></tr></table></figure><p>3.正确的做法：将 props 的初始值转存到 data 中，因为 data 中的数据是可读可写的！示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  name: &quot;EsCounter&quot;,<br>  props: &#123;<br>    // 初始数量值【只读数据】<br>    num: &#123;<br>      type: Number,<br>      default: 0,<br>    &#125;,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      // 内部状态值【可读可写的数据】<br>      // 通过 this 可以访问到 props 中的初始值<br>      number: this.num,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>并且把 data 中的 number 双向绑定到 input 输入框：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>    type=&quot;number&quot;<br>    id=&quot;input&quot;<br>    class=&quot;form-control form-control-sm iptnum&quot;<br>    v-model=&quot;number&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><p>4.为 -1 和 +1 按钮绑定响应的点击事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button type=&quot;button&quot; class=&quot;btn btn-light btn-sm&quot;<br>@click=&quot;onSubClick&quot;&gt;-&lt;/button&gt;<br>&lt;input type=&quot;number&quot; class=&quot;form-control form-control-sm ipt-num&quot;<br>v-model.number=&quot;number&quot; /&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-light btn-sm&quot;<br>@click=&quot;onAddClick&quot;&gt;+&lt;/button<br></code></pre></td></tr></table></figure><p>并在 methods 中声明对应的事件处理函数如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>// -1 按钮的事件处理函数<br>onSubClick() &#123;<br>this.number -= 1<br>&#125;,<br>// +1 按钮的事件处理函数<br>onAddClick() &#123;<br>this.number += 1<br>&#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="7-2-3-实现-min-最小值的处理"><a href="#7-2-3-实现-min-最小值的处理" class="headerlink" title="7.2.3 实现 min 最小值的处理"></a>7.2.3 实现 min 最小值的处理</h4><blockquote><p>需求分析：<br>购买商品时，购买的数量最小值为 1  </p></blockquote><p>1.在 EsCounter.vue 组件中封装如下的 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">props: &#123;<br>// 初始数量值【只读数据】<br>num: &#123;<br>    type: Number,<br>    default: 0,<br>&#125;,<br>min:&#123;<br>    type:Number,<br>    // 表示不指定最小值<br>    default:NaN,<br>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2.在 -1 按钮的事件处理函数中，对 min 的值进行判断和处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br><span class="hljs-function"><span class="hljs-title">onSubClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// min 的值存在，且 number - 1 之后小于 min</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">this</span>.min)&amp;&amp;(<span class="hljs-built_in">this</span>.number-<span class="hljs-number">1</span>&lt;<span class="hljs-built_in">this</span>.min))&#123;<br>        <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.number-=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在 EsGoods.vue 组件中使用 EsCounter.vue 组件时指定 min 最小值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;count&quot;&gt;&lt;es-counter :num=&#x27;count&#x27; :min=&#x27;0&#x27;&gt;&lt;/es-counter&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="7-2-4-处理输入框的输入结果"><a href="#7-2-4-处理输入框的输入结果" class="headerlink" title="7.2.4 处理输入框的输入结果"></a>7.2.4 处理输入框的输入结果</h4><blockquote><p>思路分析：<br>1.将输入的新值转化为整数<br>2.如果转换的结果不是数字，或小于1，则强制 number 的值等于1<br>3.如果新值为小数，则把转换的结果赋值给 number  </p></blockquote><p>1.为输入框的 v-model 指令添加 .lazy 修饰符（当输入框触发 change 事件时更新 vmodel 所绑定到的数据源）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;number&quot; class=&quot;form-control form-control-sm ipt-num&quot; v-model.number.lazy=&quot;number&quot; /&gt;<br></code></pre></td></tr></table></figure><p>2.通过 watch 侦听器监听 number 数值的变化，并按照分析的步骤实现代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">watch:&#123;<br>    number(newValue)&#123;<br>        const parseResult=parseInt(newValue);<br>        //如果不为数字<br>        if(isNaN(parseResult)||parseResult&lt;this.min)&#123;<br>            return this.number=1;<br>        &#125;<br>        this.number=parseResult;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-5-把最新的数据传递给使用者"><a href="#7-2-5-把最新的数据传递给使用者" class="headerlink" title="7.2.5 把最新的数据传递给使用者"></a>7.2.5 把最新的数据传递给使用者</h4><blockquote><p>需求分析：<br>当 EsGoods 组件使用 EsCounter 组件时，期望能够监听到商品数量的变化，此时需要使用自定<br>义事件的方式，把最新的数据传递给组件的使用者。  </p></blockquote><p>1.在 EsCounter.vue 组件中声明自定义事件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">emits: [&#x27;numChange&#x27;],<br></code></pre></td></tr></table></figure><p>2.在 EsCounter.vue 组件的 watch 侦听器中触发自定义事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br><span class="hljs-function"><span class="hljs-title">number</span>(<span class="hljs-params">newValue</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> parseResult = <span class="hljs-built_in">parseInt</span>(newValue);<br>    <span class="hljs-comment">//如果不为数字</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(parseResult) || parseResult &lt; <span class="hljs-built_in">this</span>.min) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.number = <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.number = parseResult;<br>    <span class="hljs-comment">// 触发自定义事件</span><br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;numChange&quot;</span>, <span class="hljs-built_in">this</span>.number);<br>&#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.在 EsGoods.vue 组件中监听 EsCounter.vue 组件的自定义事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;count&quot;&gt;&lt;es-counter :num=&#x27;count&#x27; :min=&#x27;1&#x27; @numChange=&quot;getNumber&quot;&gt;&lt;/es-counter&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>并声明对应的事件处理函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">getNumber(val)&#123;<br>    console.log(val);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-6-更新购物车中商品的数量"><a href="#7-2-6-更新购物车中商品的数量" class="headerlink" title="7.2.6 更新购物车中商品的数量"></a>7.2.6 更新购物车中商品的数量</h4><blockquote><p>思路分析：<br>1.在 EsGoods 组件中获取到最新的商品数量<br>2.在 EsGoods 组件中声明自定义事件<br>3.在 EsGoods 组件中触发自定义事件，向外传递数据对象 { id, value }<br>4.在 App 根组件中监听 EsGoods 组件的自定义事件，并根据 id 更新对应商品的数量  </p></blockquote><p>1.在 EsGoods.vue 组件中声明自定义事件 countChange ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">emits:[&#x27;stateChange&#x27;,&#x27;countChange&#x27;],<br></code></pre></td></tr></table></figure><p>2.在 EsCounter.vue 组件的 numChange 事件处理函数中，触发步骤1声明的自定义事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">getNumber(val) &#123;<br>//   触发自定义事件<br>// 向外传递数据对象<br>this.$emit(&#x27;countChange&#x27;,&#123;id:this.id,num:val&#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.在 App.vue 根组件中使用 EsGoods.vue 组件时，监听它的自定义事件<br>countChange ：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;es-goods<br>  v-for=&quot;item in goodslist&quot;<br>  :key=&quot;item.id&quot;<br>  :id=&quot;item.id&quot;<br>  :thumb=&quot;item.goods_img&quot;<br>  :count=&quot;item.goods_count&quot;<br>  :price=&quot;item.goods_price&quot;<br>  :title=&quot;item.goods_name&quot;<br>  :checked=&quot;item.goods_state&quot;<br>  @stateChange=&quot;onGoodsStateChange&quot;<br>  @countChange=&quot;onGoodsCountChange&quot;<br>&gt;&lt;/es-goods&gt;<br></code></pre></td></tr></table></figure><p>并在 methods 中声明对应的事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">onGoodsCountChange(value)&#123;<br>  this.goodslist.some(item=&gt;&#123;<br>    if(item.id==value.id)&#123;<br>      item.goods_count=value.num;<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="table案例"><a href="#table案例" class="headerlink" title="table案例"></a>table案例</h1><h2 id="0-实现步骤-1"><a href="#0-实现步骤-1" class="headerlink" title="0. 实现步骤"></a>0. 实现步骤</h2><p>① 搭建项目的基本结构</p><p>② 请求商品列表的数据</p><p>③ 封装 MyTable 组件</p><p>④ 实现删除功能</p><p>⑤ 实现添加标签的功能  </p><h2 id="1-搭建项目基本结构"><a href="#1-搭建项目基本结构" class="headerlink" title="1. 搭建项目基本结构"></a>1. 搭建项目基本结构</h2><h3 id="1-1-初始化项目"><a href="#1-1-初始化项目" class="headerlink" title="1.1 初始化项目"></a>1.1 初始化项目</h3><p>1.在终端运行如下的命令，初始化 vite 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init vite-app table-demo<br></code></pre></td></tr></table></figure><p>2.cd 到项目根目录，安装依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>3.安装 less 依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i less -D<br></code></pre></td></tr></table></figure><p>4.使用 vscode 打开项目，并在 vscode 集成的终端下运行如下的命令，把项目运行起来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><h3 id="1-2-梳理项目结构"><a href="#1-2-梳理项目结构" class="headerlink" title="1.2 梳理项目结构"></a>1.2 梳理项目结构</h3><p>1.重置 App.vue 根组件的代码结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name:&#x27;MyApp&#x27;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&#x27;less&#x27; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>2.删除 components 目录下的 HelloWorld.vue 组件</p><p>3.重置 index.css 中的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span>&#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.把资料目录下的 css 文件夹复制、粘贴到 assets 目录中，并在 main.js 入口文件中入  bootstrap.css ：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/css/bootstrap.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br>createApp(App).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-请求商品列表的数据"><a href="#2-请求商品列表的数据" class="headerlink" title="2. 请求商品列表的数据"></a>2. 请求商品列表的数据</h2><p>1.运行如下的命令，安装 Ajax 的请求库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios<br></code></pre></td></tr></table></figure><p>2.在 main.js 入口模块中，导入并全局配置 axios：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">// 1.导入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><br><span class="hljs-comment">// 2.将axios挂载到全局，之后，每个组件都可以通过this.$http代替axios发送请求</span><br>app.config.globalProperties.$http=axios;<br><br><span class="hljs-comment">// 3.设置请求的base url</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;https://www.escook.cn&#x27;</span><br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3.在 App.vue 组件的 data 中声明 goodslist 商品列表数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span>&#123;<br>    <span class="hljs-comment">// 商品列表数据</span><br>    <span class="hljs-attr">goodslist</span>:[],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在 App.vue 组件的 methods 中声明 getGoodsList 方法，用来从服务器请求商品列表的数据：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-comment">// 初始化商品列表数据</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getGoodsList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> res= <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http(<span class="hljs-string">&#x27;/api/goods&#x27;</span>);<br>    <span class="hljs-comment">// 请求失败 </span><br>    <span class="hljs-keyword">if</span>(res.status!==<span class="hljs-number">200</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取商品列表失败&#x27;</span>);<br>    <span class="hljs-comment">// 请求成功</span><br>    <span class="hljs-built_in">this</span>.goodslist=res.data.data;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>5.在 App.vue 组件中，声明 created 生命周期函数，并调用 getGoodsList 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.getGoodsList();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-封装-MyTable-组件"><a href="#3-封装-MyTable-组件" class="headerlink" title="3. 封装 MyTable 组件"></a>3. 封装 MyTable 组件</h2><h3 id="3-0-MyTable-组件的封装要求"><a href="#3-0-MyTable-组件的封装要求" class="headerlink" title="3.0 MyTable 组件的封装要求"></a>3.0 MyTable 组件的封装要求</h3><p>1.用户通过名为 data 的 prop 属性，为 MyTable.vue 组件指定数据源</p><p>2.在 MyTable.vue 组件中，预留名称为 header 的具名插槽</p><p>3.在 MyTable.vue 组件中，预留名称为 body 的作用域插槽  </p><h3 id="3-1-创建并使用-MyTable-组件"><a href="#3-1-创建并使用-MyTable-组件" class="headerlink" title="3.1 创建并使用 MyTable 组件"></a>3.1 创建并使用 MyTable 组件</h3><p>1.在 components/my-table 目录下新建 MyTable.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;Table组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyTable&#x27;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&#x27;less&#x27; scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 组件中导入并注册 MyTable.vue 组件：</p><p>3.在 App.vue 组件的 DOM 结构中使用 MyTable.vue 组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;my-table&gt;&lt;/my-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyTable from &#x27;./components/my-table/MyTable.vue&#x27;<br>export default &#123;<br>  name: &quot;MyApp&quot;,<br>  components:&#123;<br>    MyTable,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-为表格声明-data-数据源"><a href="#3-2-为表格声明-data-数据源" class="headerlink" title="3.2 为表格声明 data 数据源"></a>3.2 为表格声明 data 数据源</h3><p>1.在 MyTable.vue 组件的 props 节点中声明表格的 data 数据源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    name:&#x27;MyTable&#x27;,<br>    props:&#123;<br>        // 表格数据源<br>        data:&#123;<br>            type:Array,<br>            required:true,<br>            default:[]<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 组件中使用 MyTable.vue 组件时，通过属性绑定的形式为表格指定 data 数据源:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;my-table :data=&#x27;goodslist&#x27;&gt;&lt;/my-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3-3-封装-MyTable-组件的模板结构"><a href="#3-3-封装-MyTable-组件的模板结构" class="headerlink" title="3.3 封装 MyTable 组件的模板结构"></a>3.3 封装 MyTable 组件的模板结构</h3><p>1.基于 bootstrap 提供的Tables( <a href="https://v4.bootcss.com/docs/content/tables/)%EF%BC%8C%E5%9C%A8MyTable.vue">https://v4.bootcss.com/docs/content/tables/)，在MyTable.vue</a> 组件中渲染最基本的模板结构：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;table table-bordered table-striped&quot;&gt;<br>    &lt;!-- 表格的标题区域 --&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;th&gt;#&lt;/th&gt;<br>        &lt;th&gt;商品名称&lt;/th&gt;<br>        &lt;th&gt;价格&lt;/th&gt;<br>        &lt;th&gt;标签&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;!-- 表格的主体区域 --&gt;<br>    &lt;tbody&gt;&lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>2.为了提高组件的复用性，最好把表格的 标题区域 预留为 <slot> 具名插槽，方便使用者自定义表格的标题：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;table table-bordered table-striped&quot;&gt;<br>    &lt;!-- 表格的标题区域 --&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;!-- 命名插槽 --&gt;<br>        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;!-- 表格的主体区域 --&gt;<br>    &lt;tbody&gt;&lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.在 App.vue 组件中，通过具名插槽的形式，为 MyTable.vue 组件指定标题名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br><br>    &lt;my-table :data=&#x27;goodslist&#x27;&gt;<br>      &lt;!-- 具名插槽 --&gt;<br>      &lt;template v-slot:header&gt;<br>          &lt;th&gt;#&lt;/th&gt;<br>          &lt;th&gt;商品名称&lt;/th&gt;<br>          &lt;th&gt;价格&lt;/th&gt;<br>          &lt;th&gt;标签&lt;/th&gt;<br>          &lt;th&gt;操作&lt;/th&gt;<br>      &lt;/template&gt;<br>    &lt;/my-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3-4-预留名称为-body-的作用域插槽"><a href="#3-4-预留名称为-body-的作用域插槽" class="headerlink" title="3.4 预留名称为 body 的作用域插槽"></a>3.4 预留名称为 body 的作用域插槽</h3><p>1.在 MyTable.vue 组件中，通过 v-for 指令循环渲染表格的数据行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;table class=&quot;table table-bordered table-striped&quot;&gt;<br>    &lt;!-- 表格的标题区域 --&gt;<br>    &lt;thead&gt;<br>      &lt;tr&gt;<br>        &lt;!-- 命名插槽 --&gt;<br>        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;<br>      &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;!-- 表格的主体区域 --&gt;<br>    &lt;tbody&gt;<br>        &lt;tr v-for=&#x27;(item,index) in data&#x27; :key=&#x27;item.id&#x27;&gt;&lt;/tr&gt;<br>    &lt;/tbody&gt;<br>  &lt;/table&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>2.为了提高 MyTable.vue 组件的复用性，最好把表格数据行里面的 td 单元格预留为<code>&lt;slot&gt;</code> 具名插槽。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;tr v-for=&#x27;(item,index) in data&#x27; :key=&#x27;item.id&#x27;&gt;<br>    &lt;!-- 为数据行预留的插槽 --&gt;<br>    &lt;slot name=&quot;body&quot;&gt;&lt;/slot&gt;<br>&lt;/tr&gt;<br></code></pre></td></tr></table></figure><p>3.为了让组件的使用者在提供 body 插槽的内容时，能够自定义内容的渲染方式，需要把body 具名插槽升级为 <strong>作用域插槽</strong> ：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;<br>&lt;!-- 为数据行预留的作用域插槽 --&gt;<br>    &lt;slot name=&quot;body&quot; :row=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;<br>&lt;/tr&gt;<br></code></pre></td></tr></table></figure><p>4.在 App.vue 组件中，基于作用域插槽的方式渲染表格的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;my-table :data=&quot;goodslist&quot;&gt;<br>      &lt;!-- 具名插槽 --&gt;<br>      &lt;template v-slot:header&gt;<br>        &lt;th&gt;#&lt;/th&gt;<br>        &lt;th&gt;商品名称&lt;/th&gt;<br>        &lt;th&gt;价格&lt;/th&gt;<br>        &lt;th&gt;标签&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>      &lt;/template&gt;<br>      &lt;template #body=&quot;&#123; row, index &#125;&quot;&gt;<br>        &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; row.goods_name &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;￥&#123;&#123; row.goods_price &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;&#123;&#123; row.tags &#125;&#125;&lt;/td&gt;<br>        &lt;td&gt;<br>          &lt;button class=&quot;btn btn-danger btn-sm&quot;&gt;删除&lt;/button&gt;<br>        &lt;/td&gt;<br>      &lt;/template&gt;<br>    &lt;/my-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="4-实现删除功能"><a href="#4-实现删除功能" class="headerlink" title="4. 实现删除功能"></a>4. 实现删除功能</h2><p>1.为删除按钮绑定 click 事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button class=&quot;btn btn-danger btn-sm&quot; @click=&#x27;onRemove(row.id)&#x27;&gt;删除&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>2.在 App.vue 组件的 methods 中声明事件处理函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onRemove</span>(<span class="hljs-params">id</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.goodslist.some(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(item.id===id)&#123;<br>      <span class="hljs-built_in">this</span>.goodslist.splice(index,<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-实现添加标签的功能"><a href="#5-实现添加标签的功能" class="headerlink" title="5. 实现添加标签的功能"></a>5. 实现添加标签的功能</h3><h3 id="5-1-自定义渲染标签列"><a href="#5-1-自定义渲染标签列" class="headerlink" title="5.1 自定义渲染标签列"></a>5.1 自定义渲染标签列</h3><p>根据 bootstrap 提供的 Badge ( <a href="https://v4.bootcss.com/docs/components/badge/#contextual-variations">https://v4.bootcss.com/docs/components/badge/#contextual-variations</a> )效果，循环渲染商品的标签信息如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 循环渲染标签 --&gt;<br>&lt;td&gt;<br>  &lt;span class=&quot;badge badge-warning ml-2&quot; v-for=&#x27;item in row.tags&#x27; :key=&#x27;item&#x27;&gt;&#123;&#123;item&#125;&#125; &lt;/span&gt;<br>&lt;/td&gt;<br></code></pre></td></tr></table></figure><h3 id="5-2-实现-input-和-button-的按需展示"><a href="#5-2-实现-input-和-button-的按需展示" class="headerlink" title="5.2 实现 input 和 button 的按需展示"></a>5.2 实现 input 和 button 的按需展示</h3><p>1.使用 v-if 结合 v-else 指令，控制 input 和 button 的按需展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;td&gt;<br>  &lt;input type=&quot;text&quot; class=&quot;form-control form-control-sm form-ipt&quot; v-if=&quot;row.inputVisible&quot;&gt;<br>  &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm&quot; v-else&gt;+Tag&lt;/button&gt;<br>  &lt;span<br>    class=&quot;badge badge-warning ml-2&quot;<br>    v-for=&quot;item in row.tags&quot;<br>    :key=&quot;item&quot;&gt;<br>    &#123;&#123; item &#125;&#125;<br>  &lt;/span&gt;<br>&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>2.点击按钮，控制 input 和 button 的切换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; class=&quot;form-control form-control-sm form-ipt&quot; v-if=&quot;row.inputVisible&quot;&gt;<br>&lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm&quot; v-else @click=&#x27;row.inputVisible=true&#x27;&gt;+Tag&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="5-3-让-input-自动获取焦点"><a href="#5-3-让-input-自动获取焦点" class="headerlink" title="5.3 让 input 自动获取焦点"></a>5.3 让 input 自动获取焦点</h3><p>1.在 App.vue 组件中，通过 directives 节点自定义 v-focus 指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">directives:&#123;<br>  focus(el)&#123;<br>    el.focus();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.为 input 输入框应用 v-focus 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; class=&quot;form-control form-control-sm form-ipt&quot; v-if=&quot;row.inputVisible&quot; v-focus&gt;<br></code></pre></td></tr></table></figure><h3 id="5-4-文本框失去焦点自动隐藏"><a href="#5-4-文本框失去焦点自动隐藏" class="headerlink" title="5.4 文本框失去焦点自动隐藏"></a>5.4 文本框失去焦点自动隐藏</h3><p>1.使用 v-model 指令把 input 输入框的值双向绑定到 row.inputValue 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; class=&quot;form-control form-control-sm form-ipt&quot; v-if=&quot;row.inputVisible&quot; v-focus v-model=&#x27;row.inputValue&#x27;&gt;<br></code></pre></td></tr></table></figure><p>2.监听文本框的 blur 事件，在触发其事件处理函数时，把 当前行的数据 传递进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  type=&quot;text&quot;<br>  class=&quot;form-control form-control-sm form-ipt&quot;<br>  v-if=&quot;row.inputVisible&quot;<br>  v-focus<br>  v-model.trim=&quot;row.inputValue&quot;<br>  @blur=&quot;onInputConfirm(row)&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><p>3.在 App.vue 组件的 methods 节点下声明 onInputConfirm 事件处理函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onInputConfirm</span>(<span class="hljs-params">row</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> val = row.inputValue;<br>  row.inputValue = <span class="hljs-string">&quot;&quot;</span>;<br>  row.inputVisible = <span class="hljs-literal">false</span>;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="5-5-为商品添加新的-tag-标签"><a href="#5-5-为商品添加新的-tag-标签" class="headerlink" title="5.5 为商品添加新的 tag 标签"></a>5.5 为商品添加新的 tag 标签</h3><p>进一步修改 onInputConfirm 事件处理函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">onInputConfirm</span>(<span class="hljs-params">row</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> val = row.inputValue;<br>  row.inputValue = <span class="hljs-string">&quot;&quot;</span>;<br>  row.inputVisible = <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// 1.1 判断val的值是否为空，如果为空，则并添加</span><br>  <span class="hljs-comment">// 1.2 判断val的值是否存在于数组中，如果存在则不添加 </span><br>  <span class="hljs-keyword">if</span>(!val||row.tags.indexOf(val)!==-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 2将标签添加到tag数组中</span><br>  row.tags.push(val);<br><br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="5-6-响应文本框的回车按键"><a href="#5-6-响应文本框的回车按键" class="headerlink" title="5.6 响应文本框的回车按键"></a>5.6 响应文本框的回车按键</h3><p>当用户在文本框中敲击了 回车键 的时候，也希望能够把当前输入的内容添加为 tag 标签。此时，可以为文本框绑定 keyup 事件如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  type=&quot;text&quot;<br>  class=&quot;form-control form-control-sm form-ipt&quot;<br>  v-if=&quot;row.inputVisible&quot;<br>  v-focus<br>  v-model.trim=&quot;row.inputValue&quot;<br>  @blur=&quot;onInputConfirm(row)&quot;<br>  @keyup.enter=&quot;onInputConfirm(row)&quot;<br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="5-7-响应文本框的-esc-按键"><a href="#5-7-响应文本框的-esc-按键" class="headerlink" title="5.7 响应文本框的 esc 按键"></a>5.7 响应文本框的 esc 按键</h3><p>当用户在文本框中敲击了 esc 按键的时候，希望能够快速清空文本框的内容。此时，可以为文本框绑定 keyup 事件如下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input<br>  type=&quot;text&quot;<br>  class=&quot;form-control form-control-sm form-ipt&quot;<br>  v-if=&quot;row.inputVisible&quot;<br>  v-focus<br>  v-model.trim=&quot;row.inputValue&quot;<br>  @blur=&quot;onInputConfirm(row)&quot;<br>  @keyup.enter=&quot;onInputConfirm(row)&quot;<br>  @keyup.esc=&quot;row.inputValue=&#x27;&#x27;&quot;<br>/&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>小案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端工程化--webpack</title>
    <link href="/2021/08/04/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-webpack/"/>
    <url>/2021/08/04/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><p>前端工程化指的是：在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。</p><p>最终落实到细节上，就是实现前端的“4 个现代化”：<strong>模块化、组件化、规范化、自动化</strong>。</p><p>目前主流的前端工程化解决方案：</p><ul><li><p>webpack（ <a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a> ）</p></li><li><p>parcel（ <a href="https://zh.parceljs.org/">https://zh.parceljs.org/</a> ） </p></li></ul><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="1-什么是-webpack"><a href="#1-什么是-webpack" class="headerlink" title="1. 什么是 webpack"></a>1. 什么是 webpack</h2><p>概念：webpack 是前端项目工程化的具体解决方案。</p><p>主要功能：它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端 JavaScript 的兼容性、性能优化等强大的功能。</p><p>好处：让程序员把工作的重心放到具体功能的实现上，提高了前端开发效率和项目的可维护性。</p><p>注意：目前企业级的前端项目开发中，绝大多数的项目都是基于 webpack 进行打包构建的。  </p><h2 id="2-创建列表隔行变色项目"><a href="#2-创建列表隔行变色项目" class="headerlink" title="2. 创建列表隔行变色项目"></a>2. 创建列表隔行变色项目</h2><p>① 新建项目空白目录，并运行 <code>npm init –y</code> 命令，初始化包管理配置文件 package.json</p><p>② 新建 <code>src</code> 源代码目录</p><p>③ 新建 src / index.html 首页和 src / index.js 脚本文件</p><p>④ 初始化首页基本的结构</p><p>⑤ 运行 <code>npm install jquery –S</code> 命令，安装 jQuery</p><p>⑥ 通过 ES6 模块化的方式导入 jQuery，实现列表隔行变色效果  </p><p>但是直接如果在js中通过import 导入jQuery 浏览器会报错！</p><p><code>Uncaught SyntaxError: Cannot use import statement outside a module</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用es6模板化语法导入jquery</span><br><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br><br><span class="hljs-comment">// 隔行变色</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;li:odd&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>);<br>    $(<span class="hljs-string">&#x27;li:even&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;cyan&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>但使用webpack打包后的js，可以在浏览器中正常运行。</p><h2 id="3-在项目中安装webpack"><a href="#3-在项目中安装webpack" class="headerlink" title="3.在项目中安装webpack"></a>3.在项目中安装webpack</h2><p>在终端运行如下的命令，安装 webpack 相关的两个包：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack@5.5.1 webpack-cli@4.2.0 -D<br></code></pre></td></tr></table></figure><p>需要安装webpack和webpack-cli。</p><p>在安装依赖包时，有一些参数需要注意。比如使用-g参数时，表示该依赖包为全局安装</p><p>　　<strong>参数</strong>-S, –save表示安装包信息将加入到dependencies（生产阶段的依赖）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express --save 或 npm install express -S<br></code></pre></td></tr></table></figure><p>　　package.json 文件的 dependencies 字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;express&quot;</span>: <span class="hljs-string">&quot;^3.9.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>　　<strong>参数</strong>-D, –save-dev表示安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express --save-dev 或 npm install express -D<br></code></pre></td></tr></table></figure><h2 id="4-在项目中配置-webpack"><a href="#4-在项目中配置-webpack" class="headerlink" title="4.在项目中配置 webpack"></a>4.在项目中配置 webpack</h2><p>① 在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>webpack<br>├─ package-lock.json<br>├─ package.json<br>├─ src<br>│  ├─ index.html<br>│  └─ index.js<br>└─ webpack.config.js<br><br></code></pre></td></tr></table></figure><p>并初始化如下的基本配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//webpack.config.js</span><br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;development&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>② 在 package.json 的 scripts 节点下，新增 dev 脚本如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//package.json</span><br>&#123;<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;dev&quot;</span>:<span class="hljs-string">&quot;webpack&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‘dev’名字是自定义的，但是webpack是固定的。</p><p>③ 在终端中运行 <code>npm run dev</code> 命令，启动 webpack 进行项目的打包构建  </p><h3 id="4-1-mode的可选值"><a href="#4-1-mode的可选值" class="headerlink" title="4.1 mode的可选值"></a>4.1 mode的可选值</h3><p>mode 节点的可选值有两个，分别是：<br>① development</p><ul><li><p>开发环境</p></li><li><p>不会对打包生成的文件进行代码压缩和性能优化</p></li><li><p>打包速度快，适合在开发阶段使用</p></li></ul><p>② production</p><ul><li><p>生产环境</p></li><li><p>会对打包生成的文件进行代码压缩和性能优化</p></li><li><p>打包速度很慢，仅适合在项目发布阶段使用  </p></li></ul><h3 id="4-2-webpack-config-js-文件的作用"><a href="#4-2-webpack-config-js-文件的作用" class="headerlink" title="4.2  webpack.config.js 文件的作用"></a>4.2  webpack.config.js 文件的作用</h3><p><strong>webpack.config.js 是 webpack 的配置文件。</strong>webpack 在真正开始打包构建之前，会先读取这个配置文件，从而基于给定的配置，对项目进行打包。</p><p>注意：由于 webpack 是<strong>基于 node.js 开发出来的</strong>打包工具，因此在它的配置文件中，支持使用 node.js 相关的语法和模块进行 webpack 的个性化配置。  </p><h3 id="4-3-webpack-中的默认约定"><a href="#4-3-webpack-中的默认约定" class="headerlink" title="4.3 webpack 中的默认约定"></a>4.3 webpack 中的默认约定</h3><p>在 webpack 中有如下的默认约定：</p><p>① 默认的打包入口文件为 src/index.js</p><p>② 默认的输出文件路径为 dist/main.js  </p><p>注意：可以在 webpack.config.js 中修改打包的默认约定。</p><h3 id="4-4-自定义打包的入口与出口"><a href="#4-4-自定义打包的入口与出口" class="headerlink" title="4.4 自定义打包的入口与出口"></a>4.4 自定义打包的入口与出口</h3><p>在 webpack.config.js 配置文件中，通过 <code>entry </code>节点指定打包的入口。通过 <code>output</code>节点指定打包的出口。</p><p>示例代码如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 指定打包的入口文件</span><br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;./src/index.js&#x27;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 输出目录</span><br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-comment">// 输出文件的名称</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h1><h2 id="1-webpack-插件的作用"><a href="#1-webpack-插件的作用" class="headerlink" title="1. webpack 插件的作用"></a>1. webpack 插件的作用</h2><p>通过安装和配置第三方的插件，可以拓展 webpack 的能力，从而让 webpack 用起来更方便。最常用的webpack 插件有如下两个：  </p><p>① webpack-dev-server</p><ul><li>类似于 node.js 阶段用到的 nodemon 工具</li><li>每当修改了源代码，webpack 会自动进行项目的打包和构建</li></ul><p>② html-webpack-plugin </p><ul><li>webpack 中的 HTML 插件（类似于一个模板引擎插件）</li><li>可以通过此插件自定制 index.html 页面的内容  </li></ul><h2 id="2-webpack-dev-server"><a href="#2-webpack-dev-server" class="headerlink" title="2. webpack-dev-server"></a>2. webpack-dev-server</h2><p>webpack-dev-server 可以让 webpack 监听项目源代码的变化，从而进行自动打包构建。  </p><h3 id="2-1-安装-webpack-dev-server"><a href="#2-1-安装-webpack-dev-server" class="headerlink" title="2.1 安装 webpack-dev-server"></a>2.1 安装 webpack-dev-server</h3><p>运行如下的命令，即可在项目中安装此插件：参数**-D, –save-dev表示安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack-dev-server@3.11.0 -D<br></code></pre></td></tr></table></figure><h3 id="2-2-配置-webpack-dev-server"><a href="#2-2-配置-webpack-dev-server" class="headerlink" title="2.2 配置 webpack-dev-server"></a>2.2 配置 webpack-dev-server</h3><p>① 修改 package.json -&gt; scripts 中的 dev 命令如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>:&#123;<br><span class="hljs-attr">&quot;dev&quot;</span>:<span class="hljs-string">&quot;webpack serve&quot;</span> <span class="hljs-comment">// script节点下的脚本，通过npm run 执行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>② 再次运行 npm run dev 命令，重新进行项目的打包<br>③ 在浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址，查看自动打包效果  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042125081.png" alt="image-20210804212537956"></p><h3 id="2-3-打包生成的文件哪儿去了？"><a href="#2-3-打包生成的文件哪儿去了？" class="headerlink" title="2.3 打包生成的文件哪儿去了？"></a>2.3 打包生成的文件哪儿去了？</h3><p>① 不配置 webpack-dev-server 的情况下，webpack 打包生成的文件，会存放到实际的物理磁盘上</p><ul><li><p>严格遵守开发者在 webpack.config.js 中指定配置</p></li><li><p>根据 output 节点指定路径进行存放</p></li></ul><p>② 配置了 webpack-dev-server 之后，<strong>打包生成的文件存放到了内存中</strong></p><ul><li><p>不再根据 output 节点指定的路径，存放到实际的物理磁盘上</p></li><li><p>提高了实时打包输出的性能，因为内存比物理磁盘速度快很多  </p></li></ul><h3 id="2-4-生成到内存中的文件该如何访问？"><a href="#2-4-生成到内存中的文件该如何访问？" class="headerlink" title="2.4 生成到内存中的文件该如何访问？"></a>2.4 生成到内存中的文件该如何访问？</h3><p>webpack-dev-server 生成到内存中的文件，<em><strong>默认放到了项目的根目录中</strong></em>，而且是<strong>虚拟的、不可见的。</strong></p><p>如我可以直接在<a href="http://localhost:8080/bundle.js%E8%AE%BF%E9%97%AE%E5%88%B0bundle%E6%96%87%E4%BB%B6%E3%80%82">http://localhost:8080/bundle.js访问到bundle文件。</a></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042137421.png" alt="image-20210804213748360"></p><p>但是如果我打开<a href="http://localhost:8080/%EF%BC%8C%E5%8D%B4%E5%8F%91%E7%8E%B0%E5%B9%B6%E6%B2%A1%E6%9C%89bundle.js%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E3%80%82%E5%9B%A0%E6%AD%A4bundle.js%E6%96%B9%E5%88%B0%E4%BA%86%E6%A0%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%A7%81%E8%99%9A%E6%8B%9F%E7%9A%84%E3%80%82">http://localhost:8080/，却发现并没有bundle.js这个文件。因此bundle.js方到了根目录，但是不可见虚拟的。</a></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042139461.png" alt="image-20210804213908399"></p><ul><li>可以直接用 / 表示项目根目录，后面跟上要访问的文件名称，即可访问内存中的文件</li><li>例如 /bundle.js 就表示要访问 webpack-dev-server 生成到内存中的 bundle.js 文件  </li></ul><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042141449.png" alt="image-20210804214105396" style="zoom: 50%;" /><h2 id="3-html-webpack-plugin"><a href="#3-html-webpack-plugin" class="headerlink" title="3.html-webpack-plugin"></a>3.html-webpack-plugin</h2><p><code>html-webpack-plugin</code> 是 webpack 中的 HTML 插件，可以通过此插件自定制 index.html 页面的内容。<br>需求：通过 html-webpack-plugin 插件，将 src 目录下的 index.html 首页，复制到项目根目录中一份！  </p><h3 id="3-1-安装-html-webpack-plugin"><a href="#3-1-安装-html-webpack-plugin" class="headerlink" title="3.1 安装 html-webpack-plugin"></a>3.1 安装 html-webpack-plugin</h3><p>运行如下的命令，即可在项目中安装此插件：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install html-webpack-plugin@<span class="hljs-number">4.5</span><span class="hljs-number">.0</span> -D<br></code></pre></td></tr></table></figure><h3 id="3-2-配置-html-webpack-plugin"><a href="#3-2-配置-html-webpack-plugin" class="headerlink" title="3.2 配置 html-webpack-plugin"></a>3.2 配置 html-webpack-plugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// 1.导入HTML插件，得到一个构造函数</span><br><span class="hljs-keyword">const</span> HtmlPlugin=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 2.创建插件的实例对象</span><br><span class="hljs-keyword">const</span> htmlPlugin=<span class="hljs-keyword">new</span> HtmlPlugin(&#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;./src/index.html&#x27;</span>, <span class="hljs-comment">//指定要复制的文件路径（原文件的存放路径）,</span><br>    <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;./index.html&#x27;</span>  <span class="hljs-comment">//生成的文件存放路径</span><br><br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 3.通过plugins节点，使htmlPlugin插件生效</span><br>    <span class="hljs-attr">plugins</span>:[htmlPlugin]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-html-webpack-plugin的注意点"><a href="#3-3-html-webpack-plugin的注意点" class="headerlink" title="3.3 html-webpack-plugin的注意点"></a>3.3 html-webpack-plugin的注意点</h3><p>HTML 插件在生成的 index.html <strong>页面的底部</strong>，<strong>自动注入</strong>了打包的 bundle.js 文件  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042158066.png" alt="image-20210804215836002"></p><h2 id="4-devServer-节点"><a href="#4-devServer-节点" class="headerlink" title="4.devServer 节点"></a>4.devServer 节点</h2><p>在 webpack.config.js 配置文件中，可以通过 devServer 节点对 webpack-dev-server 插件进行更多的配置，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br><br>    <span class="hljs-attr">devServer</span>:&#123;<br>        <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初次打包完成后，自动打开浏览器</span><br>        <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">// 实时打包前使用的主机地址</span><br>        <span class="hljs-attr">port</span>:<span class="hljs-number">80</span> <span class="hljs-comment">// 实时打包所用的端口号</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="webpack中的loader"><a href="#webpack中的loader" class="headerlink" title="webpack中的loader"></a>webpack中的loader</h1><h2 id="1-loader概述"><a href="#1-loader概述" class="headerlink" title="1.loader概述"></a>1.loader概述</h2><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块。其他<strong>非 .js 后缀名结尾的模块</strong>，webpack 默认处理不了，<strong>需要调用 loader 加载器才可以正常打包</strong>，否则会报错！</p><p>loader 加载器的作用：<strong>协助 webpack 打包处理特定的文件模块</strong>。</p><p>比如：</p><ul><li> css-loader 可以打包处理 .css 相关的文件</li><li> less-loader 可以打包处理 .less 相关的文件</li><li> babel-loader 可以打包处理 webpack 无法处理的高级 JS 语法  </li></ul><h2 id="2-loader的调用过程"><a href="#2-loader的调用过程" class="headerlink" title="2.loader的调用过程"></a>2.loader的调用过程</h2><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108042215867.png" alt="image-20210804221504744"></p><h2 id="3-打包css文件"><a href="#3-打包css文件" class="headerlink" title="3.打包css文件"></a>3.打包css文件</h2><p>① 运行 <code>npm install style-loader css-loader -D</code> 命令，安装处理 css 文件的 loader</p><p>② 在 <code>webpack.config.js</code> 的 module / rules 数组中，添加 loader 规则如下  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  &#125;,<br> <span class="hljs-attr">module</span>: &#123; <span class="hljs-comment">//所有第三方模块的匹配规则</span><br>   <span class="hljs-attr">rules</span>: [ <span class="hljs-comment">//文件后缀名的匹配规则</span><br>     &#123;<br>       <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>       use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>     &#125;,<br>   ],<br> &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。<strong>链会逆序执行。</strong> （即多个loader从后往前调用）第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。</p><p>应保证 loader 的先后顺序：<a href="https://webpack.docschina.org/loaders/style-loader"><code>&#39;style-loader&#39;</code></a> 在前，而 <a href="https://webpack.docschina.org/loaders/css-loader"><code>&#39;css-loader&#39;</code></a> 在后。如果不遵守此约定，webpack 可能会抛出错误。</p><p>③在项目中添加一个新的 <code>style.css</code> 文件，并将其 import 到我们的 <code>index.js</code> 中。现在，在此模块执行过程中，含有 CSS 字符串的 <code>&lt;style&gt;</code> 标签，将被插入到 html 文件的 <code>&lt;head&gt;</code> 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./css/index.css&#x27;</span><br><br><span class="hljs-comment">// 使用es6模板化语法导入jquery</span><br><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br><br><span class="hljs-comment">// 隔行变色</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&#x27;li:odd&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;black&#x27;</span>);<br>    $(<span class="hljs-string">&#x27;li:even&#x27;</span>).css(<span class="hljs-string">&#x27;backgroundColor&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>要查看 webpack 做了什么，请打开控制台检查页面（不要查看页面源代码，它不会显示结果，因为 <code>&lt;style&gt;</code> 标签是由 JavaScript 动态创建的），并查看页面的 head 标签。它应该包含 style 块元素，也就是我们在 <code>index.js</code> 中 import 的 css 文件中的样式。</p><h2 id="4-打包处理less文件"><a href="#4-打包处理less文件" class="headerlink" title="4.打包处理less文件"></a>4.打包处理less文件</h2><p>① 运行 <code>npm i less-loader less -D</code> 命令<br>② 在 <code>webpack.config.js</code> 的 module/rules 数组中，添加 loader 规则如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.less$/</span>,<br>                use:[<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>,<span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>less是less-loader的内置依懒项，全部代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// 1.导入HTML插件，得到一个构造函数</span><br><span class="hljs-keyword">const</span> HtmlPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 2.创建插件的实例对象</span><br><span class="hljs-keyword">const</span> htmlPlugin = <span class="hljs-keyword">new</span> HtmlPlugin(&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>, <span class="hljs-comment">//指定要复制的文件路径（原文件的存放路径）,</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>  <span class="hljs-comment">//生成的文件存放路径</span><br><br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 指定打包的入口文件</span><br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;./src/index.js&#x27;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 输出目录</span><br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-comment">// 输出文件的名称</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// 3.通过plugins节点，使htmlPlugin插件生效</span><br>    <span class="hljs-attr">plugins</span>: [htmlPlugin],<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">80</span><br>    &#125;,<br>    <span class="hljs-comment">// 所有第三方模块的匹配规则</span><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.less$/</span>,<br>                use:[<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>,<span class="hljs-string">&#x27;less-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-打包图片"><a href="#5-打包图片" class="headerlink" title="5. 打包图片"></a>5. 打包图片</h2><p>v5已经弃用了<code>file-loader</code>和<code>url-loader</code>，因此需要使用webpack自带的<code>asset modules</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br> <span class="hljs-built_in">module</span>.exports = &#123;<br>   <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>   <span class="hljs-attr">output</span>: &#123;<br>     <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>     <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>   &#125;,<br>   <span class="hljs-attr">module</span>: &#123;<br>     <span class="hljs-attr">rules</span>: [<br>       &#123;<br>         <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>         use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>       &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,<br>        type: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>      &#125;,<br>     ],<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure><p>如何实现的：</p><p>js：在 <code>import MyImage from &#39;./my-image.png&#39;</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。</p><p>css：在使用 <a href="https://webpack.docschina.org/loaders/css-loader">css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(&#39;./my-image.png&#39;)</code>。loader 会识别这是一个本地文件，并将 <code>&#39;./my-image.png&#39;</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。</p><p>html：而 <a href="https://webpack.docschina.org/loaders/html-loader">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p><h2 id="6-loader的另外一种配置方式"><a href="#6-loader的另外一种配置方式" class="headerlink" title="6. loader的另外一种配置方式"></a>6. loader的另外一种配置方式</h2><p>带参数项的 loader 还可以通过对象的方式进行配置：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>    use:&#123;<br>        <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>:&#123;<br>            <span class="hljs-attr">limit</span>:<span class="hljs-number">222222</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-使用babel处理-js-文件中的高级语法"><a href="#7-使用babel处理-js-文件中的高级语法" class="headerlink" title="7.使用babel处理 js 文件中的高级语法"></a>7.使用babel处理 js 文件中的高级语法</h2><p>webpack 只能打包处理一部分高级的 JavaScript 语法。对于那些 webpack 无法处理的高级 js 语法，需要借助于 babel-loader 进行打包处理。</p><h3 id="7-1-安装-babel-loader-相关的包"><a href="#7-1-安装-babel-loader-相关的包" class="headerlink" title="7.1 安装 babel-loader 相关的包"></a>7.1 安装 babel-loader 相关的包</h3><p>运行如下的命令安装对应的依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install babel-loader@8.2.1 @babel/core@7.12.3 @babel/plugin-proposal-class-properties@7.12.1 -D<br></code></pre></td></tr></table></figure><h3 id="7-2-配置-babel-loader"><a href="#7-2-配置-babel-loader" class="headerlink" title="7.2 配置 babel-loader"></a>7.2 配置 babel-loader</h3><p>在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 所有第三方模块的匹配规则</span><br>    <span class="hljs-attr">module</span>: &#123;<br>            &#123;<br>                <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.js$/</span>,<br>                <span class="hljs-comment">// exclude 为排除项</span><br>                <span class="hljs-comment">// 表示babel-loade无需处理node_modules下的js文件</span><br>                exclude:<span class="hljs-regexp">/node_modules/</span>,<br>                use:&#123;<br>                    <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>                    <span class="hljs-attr">options</span>:&#123;<br>                        <span class="hljs-comment">// 声明一个babel插件，用于转换class中的高级语法</span><br>                        <span class="hljs-attr">plugins</span>:[<span class="hljs-string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>]<br>                    &#125;<br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h1><h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><h2 id="1-为什么要打包发布"><a href="#1-为什么要打包发布" class="headerlink" title="1.为什么要打包发布"></a>1.为什么要打包发布</h2><p>项目开发完成之后，使用 webpack 对项目进行打包发布的主要原因有以下两点：</p><p>① 开发环境下，打包生成的文件存放于内存中，无法获取到最终打包生成的文件</p><p>② 开发环境下，打包生成的文件不会进行代码压缩和性能优化为了让项目能够在生产环境中高性能的运行，因此需要对项目进行打包发布。  </p><h2 id="2-配置-webpack-的打包发布"><a href="#2-配置-webpack-的打包发布" class="headerlink" title="2. 配置 webpack 的打包发布"></a>2. 配置 webpack 的打包发布</h2><p> 在 package.json 文件的 scripts 节点下，新增 build 命令如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;scripts&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;dev&quot;</span>:<span class="hljs-string">&quot;webpack serve&quot;</span>, <span class="hljs-comment">// 开发环境中，运行dev命令</span><br>        <span class="hljs-attr">&quot;build&quot;</span>:<span class="hljs-string">&quot;webpack --mode production&quot;</span> <span class="hljs-comment">// 项目发布时运行build命令</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>--model</code> 是一个参数项，用来指定 webpack 的运行模式。production 代表生产环境，会对打包生成的文件进行代码压缩和性能优化。<br>注意：通过 –model 指定的参数项，会<strong>覆盖</strong> webpack.config.js 中的 model 选项。 </p><h3 id="3-把-JavaScript-文件统一生成到-js-目录中"><a href="#3-把-JavaScript-文件统一生成到-js-目录中" class="headerlink" title="3. 把 JavaScript 文件统一生成到 js 目录中"></a>3. 把 JavaScript 文件统一生成到 js 目录中</h3><p>在 webpack.config.js 配置文件的 output 节点中，进行如下的配置：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// 1.导入HTML插件，得到一个构造函数</span><br><span class="hljs-keyword">const</span> HtmlPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 2.创建插件的实例对象</span><br><span class="hljs-keyword">const</span> htmlPlugin = <span class="hljs-keyword">new</span> HtmlPlugin(&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>, <span class="hljs-comment">//指定要复制的文件路径（原文件的存放路径）,</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span>  <span class="hljs-comment">//生成的文件存放路径</span><br><br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 指定打包的入口文件</span><br>    <span class="hljs-attr">entry</span>: path.join(__dirname, <span class="hljs-string">&#x27;./src/index.js&#x27;</span>),<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 输出目录</span><br>        <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>        <span class="hljs-comment">// 明确告诉webpack把生成的bundle.js文件存放到dist目录下的js文件夹下</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/bundle.js&#x27;</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-把图片文件统一生成到-image-目录中"><a href="#4-把图片文件统一生成到-image-目录中" class="headerlink" title="4.把图片文件统一生成到 image 目录中"></a>4.把图片文件统一生成到 image 目录中</h2><p>修改 webpack.config.js 中的 url-loader 配置项，新增 <code>outputPath</code> 选项即可指定图片文件的输出路径：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// 所有第三方模块的匹配规则</span><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>                use:&#123;<br>                    <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>                    <span class="hljs-attr">options</span>:&#123;<br>                        <span class="hljs-attr">limit</span>:<span class="hljs-number">2222</span>,<br>                        <span class="hljs-comment">//明确指出生成的文件存储到dist目录下的image文件夹中</span><br>                        <span class="hljs-attr">outputPath</span>:<span class="hljs-string">&#x27;image&#x27;</span><br>                    &#125;<br>&#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h1><h2 id="1-生产环境中遇到的问题"><a href="#1-生产环境中遇到的问题" class="headerlink" title="1.生产环境中遇到的问题"></a>1.生产环境中遇到的问题</h2><p>前端项目在投入生产环境之前，都需要对 JavaScript 源代码进行压缩混淆，从而减小文件的体积，提高文件的加载效率。此时就不可避免的产生了另一个问题：对压缩混淆之后的代码除错（debug）是一件极其困难的事情  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051258183.png" alt="image-20210805125849106"></p><ul><li>变量被替换成没有任何语义的名称</li><li> 空行和注释被剔除  </li></ul><h2 id="2-什么是-Source-Map"><a href="#2-什么是-Source-Map" class="headerlink" title="2. 什么是 Source Map"></a>2. 什么是 Source Map</h2><p><strong>Source Map 就是一个信息文件，里面储存着位置信息。也就是说，Source Map 文件中存储着代码压缩混淆前后的对应关系。</strong></p><p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码，能够极大的方便后期的调试  </p><h2 id="3-webpack-开发环境下的-Source-Map"><a href="#3-webpack-开发环境下的-Source-Map" class="headerlink" title="3. webpack 开发环境下的 Source Map"></a>3. webpack 开发环境下的 Source Map</h2><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码：  </p><h3 id="3-1-默认-Source-Map-的问题"><a href="#3-1-默认-Source-Map-的问题" class="headerlink" title="3.1 默认 Source Map 的问题"></a>3.1 默认 Source Map 的问题</h3><p>开发环境下<strong>默认生成的 Source Map记录的是生成后的代码</strong>的位置。会导致运行时报错的行数与源代码的行数不一致的问题。示意图如下：  </p><h3 id="3-2-解决默认-Source-Map-的问题"><a href="#3-2-解决默认-Source-Map-的问题" class="headerlink" title="3.2 解决默认 Source Map 的问题"></a>3.2 解决默认 Source Map 的问题</h3><p>开发环境下，推荐在 webpack.config.js 中添加如下的配置，即可保证运行时报错的行数与源代码的行数保持一致：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">//eval-source-map 仅限在开发模式下使用，不建议在生产模式下使用</span><br>    <span class="hljs-comment">//使用此配置生成的source map即可保证运行时报错的行数与源代码的行数保持一致：  </span><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;eval-source-map&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-webpack-生产环境下的-Source-Map"><a href="#4-webpack-生产环境下的-Source-Map" class="headerlink" title="4. webpack 生产环境下的 Source Map"></a>4. webpack 生产环境下的 Source Map</h2><p>在生产环境下，如果省略了 devtool 选项，则最终生成的文件中不包含 Source Map。这能够防止原始代码通过 Source Map 的形式暴露给别有所图之人。  </p><h3 id="4-1只定位行数不暴露源码"><a href="#4-1只定位行数不暴露源码" class="headerlink" title="4.1只定位行数不暴露源码"></a>4.1只定位行数不暴露源码</h3><p>在生产环境下，如果只想定位报错的具体行数，且不想暴露源码。此时可以将 devtool 的值设置为<code>nosources-source-map</code>。实际效果如图所示：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051314367.png" alt="image-20210805131426332"></p><h3 id="4-2-定位行数且暴露源码"><a href="#4-2-定位行数且暴露源码" class="headerlink" title="4.2 定位行数且暴露源码"></a>4.2 定位行数且暴露源码</h3><p>在生产环境下，如果想在定位报错行数的同时，展示具体报错的源码。此时可以将 devtool 的值设置为source-map。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108051315878.png" alt="image-20210805131530831"></p><h2 id="5-Source-Map-的最佳实践"><a href="#5-Source-Map-的最佳实践" class="headerlink" title="5.Source Map 的最佳实践"></a>5.Source Map 的最佳实践</h2><p>① 开发环境下：</p><ul><li><p>建议把 devtool 的值设置为 eval-source-map</p></li><li><p>好处：可以精准定位到具体的错误行</p></li></ul><p>② 生产环境下：</p><ul><li><p>建议关闭 Source Map 或将 devtool 的值设置为 nosources-source-map</p></li><li><p>好处：防止源码泄露，提高网站的安全性  </p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS模块化_Promise_EventLoop_宏任务和微任务</title>
    <link href="/2021/08/04/JS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%8AEventLoop%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/04/JS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%8AEventLoop%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h1><h2 id="1-node中如何实现模块化"><a href="#1-node中如何实现模块化" class="headerlink" title="1. node中如何实现模块化"></a>1. node中如何实现模块化</h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p><ul><li><p>导入其它模块使用 require() 方法</p></li><li><p>模块对外共享成员使用 module.exports 对象</p></li></ul><p>模块化的好处：<br>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己 。</p><h2 id="2-模块化规范分类"><a href="#2-模块化规范分类" class="headerlink" title="2. 模块化规范分类"></a>2. 模块化规范分类</h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。<br>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块标准，例如：</p><ul><li> AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li> CommonJS 适用于服务器端的 Javascript 模块化<br>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！</li></ul><h2 id="3-ES6-模块化规范"><a href="#3-ES6-模块化规范" class="headerlink" title="3. ES6 模块化规范"></a>3. ES6 模块化规范</h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。<br>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li> 导入其它模块成员使用 import 关键字</li><li>向外共享模块成员使用 export 关键字   </li></ul><h2 id="4-node-js中体验ES6-模块化"><a href="#4-node-js中体验ES6-模块化" class="headerlink" title="4. node.js中体验ES6 模块化"></a>4. node.js中体验ES6 模块化</h2><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：<br>① 确保安装了 v14.15.1 或更高版本的 node.js<br>②在终端中输入<code>npm init -y</code>生成package.json，然后在  package.json 的根节点中添加 “type”: “module” 节点 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;module&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;8.es6&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-ES6-模块化的基本语法"><a href="#5-ES6-模块化的基本语法" class="headerlink" title="5. ES6 模块化的基本语法"></a>5. ES6 模块化的基本语法</h2><p>ES6 的模块化主要包含如下 3 种用法：<br>① 默认导出与默认导入<br>② 按需导出与按需导入<br>③ 直接导入并执行模块中的代码  </p><h3 id="5-1-默认导出"><a href="#5-1-默认导出" class="headerlink" title="5.1 默认导出"></a>5.1 默认导出</h3><p>默认导出语法： <code>export default 需要导出的成员</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> n1=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> n2=<span class="hljs-number">20</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 使用export default 默认导出语法 向外共享n1和show 2个成员</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    n1,<br>    show<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1默认导入"><a href="#5-1默认导入" class="headerlink" title="5.1默认导入"></a>5.1默认导入</h3><p>默认导入的语法： <code>import 接收名称 from &#39;模块标识符&#39;  </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span>  m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./01.默认导出.js&#x27;</span><br><span class="hljs-comment">// m1是自定义的名字</span><br><span class="hljs-built_in">console</span>.log(m1);<br></code></pre></td></tr></table></figure><h3 id="5-1-默认导出的注意事项"><a href="#5-1-默认导出的注意事项" class="headerlink" title="5.1 默认导出的注意事项"></a>5.1 默认导出的注意事项</h3><p>每个模块中，只允许使用唯一的一次 export default，否则会报错！  </p><p>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可 。</p><h3 id="5-2按需导出"><a href="#5-2按需导出" class="headerlink" title="5.2按需导出"></a>5.2按需导出</h3><p>按需导出语法： <code>export 需要导出的成员</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s2 = <span class="hljs-string">&#x27;ccc&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-按需导入"><a href="#5-2-按需导入" class="headerlink" title="5.2 按需导入"></a>5.2 按需导入</h3><p>按需导入的语法：<code>import &#123;s1&#125; from &#39;模块标识符&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; s1, s2, say &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./03.按需导出.js&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(s1);<br><span class="hljs-built_in">console</span>.log(s2);<br><span class="hljs-built_in">console</span>.log(say);<br></code></pre></td></tr></table></figure><h3 id="5-2按需导入和按需导出的注意事项"><a href="#5-2按需导入和按需导出的注意事项" class="headerlink" title="5.2按需导入和按需导出的注意事项"></a>5.2按需导入和按需导出的注意事项</h3><p>① 每个模块中可以使用多次<strong>按需导出</strong><br>② <strong>按需导入</strong>的成员名称必须和<strong>按需导出</strong>的名称<strong>保持一致</strong><br>③ 按需导入时，可以使用<strong>as 关键字</strong>进行重命名<br>④ 按需导入可以和默认导入一起使用  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> info,&#123; s1, s2 <span class="hljs-keyword">as</span> str2, say &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./03.按需导出.js&#x27;</span><br><span class="hljs-comment">// info 为默认导入</span><br><br><span class="hljs-built_in">console</span>.log(s1);<br><span class="hljs-built_in">console</span>.log(str2);<br><span class="hljs-built_in">console</span>.log(say);<br><span class="hljs-built_in">console</span>.log(info);<br></code></pre></td></tr></table></figure><h3 id="5-3-直接导入并执行模块中的代码"><a href="#5-3-直接导入并执行模块中的代码" class="headerlink" title="5.3 直接导入并执行模块中的代码"></a>5.3 直接导入并执行模块中的代码</h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以<strong>直接导入模块</strong>即会执行模块代码，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//05.直接运行模块中的代码</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./05.直接运行模块中的代码.js&#x27;</span><br><span class="hljs-comment">// 导入后便会直接执行</span><br></code></pre></td></tr></table></figure><h1 id="Promise补充"><a href="#Promise补充" class="headerlink" title="Promise补充"></a>Promise补充</h1><h2 id="1-基于-then-fs-读取文件内容"><a href="#1-基于-then-fs-读取文件内容" class="headerlink" title="1. 基于 then-fs 读取文件内容"></a>1. 基于 then-fs 读取文件内容</h2><p>由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 <code>then-fs</code> 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install then-fs<br></code></pre></td></tr></table></figure><p>调用 then-fs 提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 <strong>Promise 的实例对象</strong>。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 默认导入</span><br><span class="hljs-keyword">import</span> thenFs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;then-fs&#x27;</span><br><br>thenFs.readFile(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：上述的代码无法保证文件的读取顺序，需要做进一步的改进！  </p><p>如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的链式调用，就解决了回调地狱的问题。  </p><p>Promise 支持链式调用，从而来解决回调地狱的问题。示例代码如下  :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> thenFs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;then-fs&#x27;</span><br><br><br>thenFs.readFile(<span class="hljs-string">&#x27;files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">r1</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(r1);<br>    <span class="hljs-comment">// 返回一个新的promise对象</span><br>    <span class="hljs-keyword">return</span> thenFs.readFile(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">r2</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取第2次的读取结果</span><br>    <span class="hljs-built_in">console</span>.log(r2);<br>    <span class="hljs-comment">// 再次返回一个promise对象</span><br>    <span class="hljs-keyword">return</span> thenFs.readFile(<span class="hljs-string">&#x27;./files/3.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">r3</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(r3);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="2-基于promise封装读取文件的方法"><a href="#2-基于promise封装读取文件的方法" class="headerlink" title="2.基于promise封装读取文件的方法"></a>2.基于promise封装读取文件的方法</h2><p>方法的封装要求：<br>① 方法的名称要定义为 getFile<br>② 方法接收一个形参 fpath，表示要读取的文件的路径<br>③ 方法的返回值为 Promise 实例对象  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params">fpath</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)</span>&#123;<br>        fs.readFile(fpath,<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> reject(err);<br>            resolve(data);<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>getFile(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>).then(<span class="hljs-function">(<span class="hljs-params">r1</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(r1);<br>&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err.message);<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h1><h2 id="1-JavaScript-是单线程的语言"><a href="#1-JavaScript-是单线程的语言" class="headerlink" title="1. JavaScript 是单线程的语言"></a>1. JavaScript 是单线程的语言</h2><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041755351.png" alt="image-20210804175533250"></p><p>单线程执行任务队列的问题：<br>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</p><h2 id="2-同步任务和异步任务"><a href="#2-同步任务和异步任务" class="headerlink" title="2. 同步任务和异步任务"></a>2. 同步任务和异步任务</h2><p>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：<br>① 同步任务（synchronous）</p><ul><li> 又叫做非耗时任务，指的是在主线程上排队执行的那些任务</li><li> 只有前一个任务执行完毕，才能执行后一个任务</li></ul><p> ② 异步任务（asynchronous）</p><ul><li>又叫做耗时任务，<em>异步任务由 JavaScript 委托给<strong>宿主环境</strong>进行执行</em></li><li>当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数 。</li></ul><h2 id="3-同步任务和异步任务的执行过程"><a href="#3-同步任务和异步任务的执行过程" class="headerlink" title="3.同步任务和异步任务的执行过程"></a>3.同步任务和异步任务的执行过程</h2><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041813594.png" alt="image-20210804181315494" style="zoom:67%;" /><p>① 同步任务由 JavaScript 主线程次序执行。<br>② 异步任务<strong>委托给</strong>宿主环境执行。<br>③ 已完成的异步任务<strong>对应的回调函数</strong>，会被加入到任务队列中等待执行。<br>④ JavaScript 主线程的<em><strong>执行栈</strong></em>被清空后，会读取任务队列中的回调函数，次序执行。<br>⑤ JavaScript 主线程不断重复上面的第 4 步 。</p><h2 id="4-EventLoop的基本概念"><a href="#4-EventLoop的基本概念" class="headerlink" title="4.EventLoop的基本概念"></a>4.EventLoop的基本概念</h2><p>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。  </p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041815433.png" alt="image-20210804181557376" style="zoom:67%;" /><p>输出顺序：ADCB</p><ul><li>A 和 D 属于同步任务。会根据代码的先后顺序依次被执行。</li><li>C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行 。</li></ul><h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><h2 id="1-什么是宏任务和微任务"><a href="#1-什么是宏任务和微任务" class="headerlink" title="1. 什么是宏任务和微任务"></a>1. 什么是宏任务和微任务</h2><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041820682.png" alt="image-20210804182047617"></p><p>① 宏任务（macrotask）</p><ul><li>异步 Ajax 请求、</li><li>setTimeout、setInterval、</li><li>文件操作</li><li>其它宏任务</li></ul><p>② 微任务（microtask）</p><ul><li>Promise.then、.catch 和 .finally</li><li>process.nextTick</li><li>其它微任务  </li></ul><h2 id="2-宏任务和微任务的执行顺序"><a href="#2-宏任务和微任务的执行顺序" class="headerlink" title="2.宏任务和微任务的执行顺序"></a>2.宏任务和微任务的执行顺序</h2><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041822151.png" alt="image-20210804182243122"></p><p>每一个宏任务执行完之后，都会检查<strong>是否存在待执行的微任务</strong>。</p><p>如果有，则执行完所有微任务之后，再继续执行下一个宏任务。  </p><p><strong>宏任务和微任务同时存在的情况下，会先执行微任务。</strong></p><h2 id="3-生活举例"><a href="#3-生活举例" class="headerlink" title="3.生活举例"></a>3.生活举例</h2><p>① 小云和小腾去银行办业务。首先，需要取号之后进行排队</p><ul><li>宏任务队列</li></ul><p>② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待</p><ul><li>单线程，宏任务按次序执行</li></ul><p>③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？</p><ul><li>当前宏任务执行完，检查是否有微任务</li></ul><p>④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？</p><ul><li>执行微任务，后续宏任务被推迟</li></ul><p>⑤ 小云离开柜台后，柜员开始为小腾办理业务</p><ul><li>所有微任务执行完毕，开始执行下一个宏任务  </li></ul><h2 id="4-代码举例"><a href="#4-代码举例" class="headerlink" title="4.代码举例"></a>4.代码举例</h2><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 宏任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// Promise本身是同步的，但它的then方法和catch方法是异步的</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>值得注意：<code>Promise()</code>本身是同步的，尽管它的then方法和catch方法是异步的。</p><p>输出顺序：2431</p><p>分析：</p><p>1.先执行所有的同步任务</p><ul><li>new Promise()和console.log(4)</li></ul><p>2.再执行微任务</p><ul><li>.then()</li></ul><p>3.接着执行宏任务</p><ul><li>setTimeout()</li></ul><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.同步 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 宏任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>    &#125;)<br>&#125;, <span class="hljs-number">0</span>);<br><br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>    <span class="hljs-comment">// 2.Promise()是同步的</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>    resolve();<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 3.then()方法是异步微任务</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br>&#125;)<br><br><span class="hljs-comment">// 宏任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br>        resolve();<br>    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">9</span>);<br>    &#125;)<br>&#125;, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>es6</tag>
      
      <tag>模块化</tag>
      
      <tag>EventLoop</tag>
      
      <tag>宏任务</tag>
      
      <tag>微任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络请求学习笔记</title>
    <link href="/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>笔记基于：<a href="https://zh.javascript.info/">https://zh.javascript.info/</a></p><h1 id="URL对象"><a href="#URL对象" class="headerlink" title="URL对象"></a>URL对象</h1><h2 id="创建URL对象"><a href="#创建URL对象" class="headerlink" title="创建URL对象"></a>创建URL对象</h2><p>创建一个新的 <code>url</code> 对象的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> URL(url,[base])<br></code></pre></td></tr></table></figure><ul><li><strong><code>url</code></strong> —— 完整的 URL，或者仅路径（如果设置了 base），</li><li><strong><code>base</code></strong> —— 可选的 base URL：如果设置了此参数，且参数 <code>url</code> 只有路径，则会根据这个 <code>base</code> 生成 URL。</li></ul><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(url);<br></code></pre></td></tr></table></figure><p>输出的结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">URL &#123;<br>  <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>,<br>  <span class="hljs-attr">origin</span>: <span class="hljs-string">&#x27;https://jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;https:&#x27;</span>,<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">hostname</span>: <span class="hljs-string">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/tags&#x27;</span>,<br>  <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;?id=Vue&amp;num=1&#x27;</span>,<br>  <span class="hljs-attr">searchParams</span>: URLSearchParams &#123; <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-string">&#x27;Vue&#x27;</span>, <span class="hljs-string">&#x27;num&#x27;</span> =&gt; <span class="hljs-string">&#x27;1&#x27;</span> &#125;,<br>  <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面的2个URL结果是一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> url1 = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;/tag&#x27;</span>,<span class="hljs-string">&#x27;https://www.jiaqicoder.com&#x27;</span>);<br><span class="hljs-keyword">let</span> url2 = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(url1);<br><span class="hljs-built_in">console</span>.log(url2);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">URL &#123;<br>  <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>,<br>  <span class="hljs-attr">origin</span>: <span class="hljs-string">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;https:&#x27;</span>,<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">hostname</span>: <span class="hljs-string">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/tag&#x27;</span>,<br>  <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">searchParams</span>: URLSearchParams &#123;&#125;,<br>  <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>URL</code> 对象立即允许我们访问其组件，因此这是一个解析 url 的好方法，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(url.protocol); <span class="hljs-comment">//https</span><br><span class="hljs-built_in">console</span>.log(url.host); <span class="hljs-comment">//www.jiaqicoder.com</span><br><span class="hljs-built_in">console</span>.log(url.pathname); <span class="hljs-comment">//tag</span><br></code></pre></td></tr></table></figure><h3 id="URL-组成"><a href="#URL-组成" class="headerlink" title="URL 组成"></a>URL 组成</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802142354.png" alt="image-20210802142354919"></p><ul><li><code>href</code> 是完整的 URL，与 <code>url.toString()</code> 相同</li><li><code>protocol</code> 以冒号字符 <code>:</code> 结尾</li><li><code>search</code> —— 以问号 <code>?</code> 开头的一串参数</li><li><code>hash</code> 以哈希字符 <code>#</code> 开头</li><li>如果存在 HTTP 身份验证，则这里可能还会有 <code>user</code> 和 <code>password</code> 属性：<code>http://login:password@site.com</code>（图片上没有，很少被用到）。</li></ul><h2 id="SearchParams-‘-…’"><a href="#SearchParams-‘-…’" class="headerlink" title="SearchParams ‘?…’"></a>SearchParams ‘?…’</h2><p>假设，我们想要创建一个具有给定搜索参数的 url，例如：<code>https://google.com/search?query=JavaScript</code>。</p><p>尽管，可以在url字符串中提供它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://google.com/search?query=JavaScript&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是，如果参数中包含空格，非拉丁字母等（具体参见下文），参数就需要被编码。</p><p>因此，有一个 URL 属性用于解决这个问题：<code>url.searchParams</code>，<a href="https://url.spec.whatwg.org/#urlsearchparams">URLSearchParams</a> 类型的对象。</p><blockquote><p>关于URLSearchParams的用法例子，<a href="https://jiaqicoder.com/2021/08/01/axios%E5%AD%A6%E4%B9%A0/#POST-%E8%AF%B7%E6%B1%82">点击查看</a>。</p></blockquote><p>它为搜索参数提供了简便的方法：</p><ul><li><strong><code>append(name, value)</code></strong> —— 按照 <code>name</code> 添加参数，</li><li><strong><code>delete(name)</code></strong> —— 按照 <code>name</code> 移除参数，</li><li><strong><code>get(name)</code></strong> —— 按照 <code>name</code> 获取参数，</li><li><strong><code>getAll(name)</code></strong> —— 获取相同 <code>name</code> 的所有参数（这是可行的，例如 <code>?user=John&amp;user=Pete</code>），</li><li><strong><code>has(name)</code></strong> —— 按照 <code>name</code> 检查参数是否存在，</li><li><strong><code>set(name, value)</code></strong> —— set/replace 参数，</li><li><strong><code>sort()</code></strong> —— 按 name 对参数进行排序，很少使用，</li><li>……并且它是可迭代的，类似于 <code>Map</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://www.jiaqicoder.com/search&#x27;</span>);<br><br><span class="hljs-comment">// 1.1添加一个参数</span><br>url.searchParams.set(<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;test me!&#x27;</span>);<br><br><span class="hljs-comment">// 1.1参数会自动被编码 https://www.jiaqicoder.com/search?q=test+me%21</span><br><span class="hljs-built_in">console</span>.log(url.href);<br><br><span class="hljs-comment">// 1.2再添加一个参数</span><br>url.searchParams.set(<span class="hljs-string">&#x27;tbs&#x27;</span>,<span class="hljs-string">&#x27;qdr:y&#x27;</span>);<br><span class="hljs-comment">// 再添加一个参数 https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay</span><br><span class="hljs-built_in">console</span>.log(url.href);<br><br><span class="hljs-comment">// 1.3 url上的参数</span><br><span class="hljs-comment">// &#123; &#x27;q&#x27; =&gt; &#x27;test me!&#x27;, &#x27;tbs&#x27; =&gt; &#x27;qdr:y&#x27; &#125;</span><br><span class="hljs-built_in">console</span>.log(url.searchParams);<br><br><span class="hljs-comment">// 1.4 遍历参数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [name,value] <span class="hljs-keyword">of</span> url.searchParams)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class="hljs-comment">// q=test me!</span><br><span class="hljs-comment">// tbs=qdr:y</span><br></code></pre></td></tr></table></figure><p>此时url对象所有属性如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">URL &#123;<br>  <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class="hljs-attr">origin</span>: <span class="hljs-string">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;https:&#x27;</span>,<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">hostname</span>: <span class="hljs-string">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/search&#x27;</span>,<br>  <span class="hljs-attr">search</span>: <span class="hljs-string">&#x27;?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class="hljs-attr">searchParams</span>: URLSearchParams &#123; <span class="hljs-string">&#x27;q&#x27;</span> =&gt; <span class="hljs-string">&#x27;test me!&#x27;</span>, <span class="hljs-string">&#x27;tbs&#x27;</span> =&gt; <span class="hljs-string">&#x27;qdr:y&#x27;</span> &#125;,<br>  <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="https://tools.ietf.org/html/rfc3986">RFC3986</a> 标准定义了 URL 中允许哪些字符，不允许哪些字符。</p><p>那些不被允许的字符必须被编码，例如非拉丁字母和空格 —— 用其 UTF-8 代码代替，前缀为 <code>%</code>，例如 <code>%20</code>（由于历史原因，<strong>空格可以用 <code>+</code> 编码</strong>，但这是一个例外）。</p><p>好消息是 <code>URL</code> 对象会自动处理这些。我们仅需提供未编码的参数，然后将 <code>URL</code> 转换为字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在此示例中使用一些西里尔字符</span><br><br><span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://ru.wikipedia.org/wiki/Тест&#x27;</span>);<br><br>url.searchParams.set(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;ъ&#x27;</span>);<br>alert(url); <span class="hljs-comment">//https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82?key=%D1%8A</span><br></code></pre></td></tr></table></figure><p>正如你所看到的，url 路径中的 <code>Тест</code> 和 <code>ъ</code> 参数都被编码了。URL 变长了，因为每个西里尔字母用 UTF-8 编码的两个字节表示，因此这里有两个 <code>%..</code> 实体（entities）。</p><h2 id="编码字符串"><a href="#编码字符串" class="headerlink" title="编码字符串"></a>编码字符串</h2><p>在过去，在出现 <code>URL</code> 对象之前，人们使用字符串作为 URL。</p><p>而现在，<code>URL</code> 对象通常更方便，但是仍然可以使用字符串。在很多情况下，使用字符串可以使代码更短。</p><p>如果使用字符串，则需要手动编码/解码特殊字符。</p><p>下面是用于编码/解码 URL 的内建函数：</p><ul><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURI">encodeURI</a> —— 编码整个 URL。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURI">decodeURI</a> —— 解码为编码前的状态。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">encodeURIComponent</a> —— 编码 URL 组件，例如搜索参数，或者 hash，或者 pathname。</li><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent">decodeURIComponent</a> —— 解码为编码前的状态。</li></ul><p>一个自然的问题：“<code>encodeURIComponent</code> 和 <code>encodeURI</code> 之间有什么区别？我们什么时候应该使用哪个？”</p><p>如果我们看一个 URL，就容易理解了，它被分解为本文上面图中所示的组件形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">https:<span class="hljs-comment">//site.com:8080/path/page?p1=v1&amp;p2=v2#hash</span><br></code></pre></td></tr></table></figure><p>正如我们所看到的，在 URL 中 <code>:</code>，<code>?</code>，<code>=</code>，<code>&amp;</code>，<code>#</code> 这类字符是被允许的。</p><p>另一方面，对于 URL 的单个组件，例如一个搜索参数，则必须对这些字符进行编码，以免破坏 URL 的格式。</p><ul><li><code>encodeURI</code> 仅编码 URL 中完全禁止的字符。</li><li><code>encodeURIComponent</code> 也编码这类字符，此外，还编码 <code>#</code>，<code>$</code>，<code>&amp;</code>，<code>+</code>，<code>,</code>，<code>/</code>，<code>:</code>，<code>;</code>，<code>=</code>，<code>?</code> 和 <code>@</code> 字符。</li></ul><p>所以，对于一个 URL 整体，我们可以使用 <code>encodeURI</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在 url 路径中使用西里尔字符</span><br><span class="hljs-keyword">let</span> url = <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;http://site.com/привет&#x27;</span>);<br><br>alert(url); <span class="hljs-comment">// http://site.com/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82</span><br></code></pre></td></tr></table></figure><p>……而对于 URL 参数，我们应该改用 <code>encodeURIComponent</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> music = <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class="hljs-keyword">let</span> url = <span class="hljs-string">`https://google.com/search?q=<span class="hljs-subst">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class="hljs-comment">// https://google.com/search?q=Rock%26Roll</span><br></code></pre></td></tr></table></figure><p>将其与 <code>encodeURI</code> 进行比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> music = <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class="hljs-keyword">let</span> url = <span class="hljs-string">`https://google.com/search?q=<span class="hljs-subst">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class="hljs-comment">// https://google.com/search?q=Rock&amp;Roll</span><br></code></pre></td></tr></table></figure><p>我们可以看到，<code>encodeURI</code> 没有对 <code>&amp;</code> 进行编码，因为它对于整个 URL 来说是合法的字符。</p><p>但是，我们应该编码在搜索参数中的 <code>&amp;</code> 字符，否则，我们将得到 <code>q=Rock&amp;Roll</code> —— 实际上是 <code>q=Rock</code> 加上某个晦涩的参数 <code>Roll</code>。不符合预期。</p><p>因此，对于每个搜索参数，我们应该使用 <code>encodeURIComponent</code>，以将其正确地插入到 URL 字符串中。最安全的方式是对 name 和 value 都进行编码，除非我们能够绝对确保它只包含允许的字符。</p>]]></content>
    
    
    
    <tags>
      
      <tag>fetch</tag>
      
      <tag>url</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue路由学习笔记</title>
    <link href="/2021/08/02/Vue%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/02/Vue%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>笔记基于：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a> 和黑马视频</p><h1 id="路由的基本概念与原理"><a href="#路由的基本概念与原理" class="headerlink" title="路由的基本概念与原理"></a>路由的基本概念与原理</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><ul><li>概念：根据不同的用户URL请求，返回不同的内容</li><li>本质：URL<strong>请求地址</strong>与<strong>服务器资源</strong>之问的对应关系</li></ul><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802121213.png" alt="image-20210802121213464"></p><h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><ul><li>后端渲染（存在性能问题，假如用户频繁地提交表单，则会造成页面频繁刷新）。</li><li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）。</li><li>SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。</li><li>SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）。</li><li>在实现SPA过程中，最核心的技术点就是<strong>前端路由</strong>。</li></ul><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><ul><li>概念：根据不同的<strong>用户事件</strong>，显示不同的页面内容。</li><li>本质：<strong>用户事件</strong>与<strong>事件处理函数</strong>之间的对应关系。</li></ul><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802122059.png" alt="image-20210802122059780"></p><h3 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h3><p>① 用户点击了页面上的路由链接</p><p>② 导致了 URL 地址栏中的 Hash 值发生了变化</p><p>③ 前端路由监听了到 Hash 地址的变化</p><p>④ 前端路由把当前 Hash 地址对应的组件渲染都浏览器中  </p><p>结论：前端路由，指的是 <strong>Hash 地址</strong>与<strong>组件</strong>之间的对应关系！  </p><h2 id="实现简单的前端路由"><a href="#实现简单的前端路由" class="headerlink" title="实现简单的前端路由"></a>实现简单的前端路由</h2><p>基于URL中的hash实现（点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听window的onhashchange事件，根据最新的hash值，切换要显示的组件名称</span><br><span class="hljs-built_in">window</span>.onhashchange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//通过location.hash 获取到最新的hash值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实现的效果：</p><p>根据<code>location.hash</code>的值切换页面显示的内容</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802135422.gif" alt="动1"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切换组件的超链接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据is属性的指定的组件名称，把对应的组件渲染到component标签所在的位置 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以把component标签看做为组件的占位符 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">comName</span>: <span class="hljs-string">&#x27;zhuye&#x27;</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-comment">// 注册私有组件</span></span><br><span class="javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">zhuye</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;主页信息&lt;/h1&gt;`</span>,</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">keji</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;科技信息&lt;/h1&gt;`</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">caijing</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;财经信息&lt;/h1&gt;`</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">yule</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;娱乐信息&lt;/h1&gt;`</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onhashchange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 通过location.hash 获取到最新的hash值</span></span><br><span class="javascript">        <span class="hljs-comment">// 根据hash值切换组件</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(location.hash);</span><br><span class="javascript">        <span class="hljs-keyword">let</span> list = [<span class="hljs-string">&#x27;zhuye&#x27;</span>, <span class="hljs-string">&#x27;keji&#x27;</span>, <span class="hljs-string">&#x27;caijing&#x27;</span>, <span class="hljs-string">&#x27;yule&#x27;</span>];</span><br><span class="javascript">        list.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (location.hash.includes(item)) &#123;</span><br><span class="javascript">                vm.comName = item;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><ol><li><p><code>location.hash</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location"><code>Location</code></a> 接口的 <strong><code>hash</code></strong> 属性返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString"><code>USVString</code></a>，其中会包含URL标识中的 <code>&#39;#&#39;</code> 和 后面URL片段标识符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAnchor&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/en-US/docs/Location.href#Examples&quot;</span>&gt;</span>Examples<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> anchor = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myAnchor&quot;</span>);</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(anchor.hash); <span class="hljs-comment">// 返回&#x27;#Examples&#x27;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>关于url对象，<a href="https://jiaqicoder.com/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#URL%E5%AF%B9%E8%B1%A1">在这篇里</a>写了很多。</p></li></ol><h1 id="VUE-Router"><a href="#VUE-Router" class="headerlink" title="VUE Router"></a>VUE Router</h1><p>Vue Router 是 <a href="http://cn.vuejs.org/">Vue.js (opens new window)</a>官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul><p>vue-router 目前有 3.x 的版本和 4.x 的版本。其中：</p><ul><li>vue-router 3.x 只能结合 vue2 进行使用</li><li> vue-router 4.x 只能结合 vue3 进行使用</li><li>vue-router 3.x 的官方文档地址：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></li><li>vue-router 4.x 的官方文档地址：<a href="https://next.router.vuejs.org/">https://next.router.vuejs.org/</a>  </li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>引入相关的库文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 先导入vue再导入vue router</span><br>&lt;script src=<span class="hljs-string">&quot;/path/to/vue.js&quot;</span>&gt;&lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/path/to/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>添加路由链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/user&#x27;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/register&#x27;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加路由填充位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br><span class="hljs-comment">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义路由组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User=&#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span><br>&#125;<br><span class="hljs-keyword">const</span> Register=&#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;h1&gt;register&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建路由实例并配置路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>:[<br>        <span class="hljs-comment">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span><br>        <span class="hljs-comment">// path 表示当前路由规则匹配到的hash地址</span><br>        <span class="hljs-comment">// component 表示当前路由规则要展示的组件</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-attr">component</span>:User&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register&#x27;</span>,<span class="hljs-attr">component</span>:Register&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>把路由挂载到Vue根实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 挂载路由实例对象</span><br>    router<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p>最终代码：</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/user&#x27;</span>&gt;</span>User<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/register&#x27;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">const</span> User = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> Register = &#123;</span><br><span class="javascript">            <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;register&lt;/h1&gt;`</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 创建路由实例对象</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="javascript">            <span class="hljs-comment">// routes是路由规则数组</span></span><br><span class="javascript">            <span class="hljs-attr">routes</span>: [</span><br><span class="javascript">                <span class="hljs-comment">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span></span><br><span class="javascript">                <span class="hljs-comment">// path 表示当前路由规则匹配到的hash地址</span></span><br><span class="javascript">                <span class="hljs-comment">// component 表示当前路由规则要展示的组件</span></span><br><span class="javascript">                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;,</span><br><span class="javascript">                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>: Register &#125;,</span><br><span class="javascript">            ]</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-comment">// 挂载路由实例对象</span></span><br><span class="javascript">            router</span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803112827.gif" alt="动"></p><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。</p><p>通过路由规则的 redirect属性，指定个新的路由地址，可以很方便地设置路由的重定向。</p><p>基于先前的代码，实现当用户打开页面时，页面就跳转到’/user’。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// path 表示需要被重定向的原地址， redirect表示将要被重定向的新地址</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/user&#x27;</span>&#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><h3 id="嵌套路由功能分析"><a href="#嵌套路由功能分析" class="headerlink" title="嵌套路由功能分析"></a>嵌套路由功能分析</h3><ul><li>点击父级路由链接显示模板内容</li><li>模板内容中又有子级路由链接</li><li>点击子级路由链接显示子级模板内容</li></ul><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803120119.png" alt="image-20210803120119722"></p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>1.父路由组件模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/user&#x27;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/register&#x27;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 路由填充位 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.子路由模板</p><ul><li>子路由链接</li><li>子路由填充位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Register = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;hr/&gt;</span><br><span class="hljs-string">&lt;!--子路由链接--&gt;</span><br><span class="hljs-string">        &lt;router-link to=&#x27;/register/tab1&#x27;&gt;tab1&lt;/router-link&gt;</span><br><span class="hljs-string">        &lt;router-link to=&#x27;/register/tab2&#x27;&gt;tab2&lt;/router-link&gt;</span><br><span class="hljs-string">        &lt;!-- 子路由填充位置 --&gt;</span><br><span class="hljs-string">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">    `</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>3.父路由通过children属性配置子级路由，children<strong>数组</strong>表示子路由规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// 定义路由规则</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 重定向 当用户打开页面时，定位到user组件</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>,<br>            <span class="hljs-attr">component</span>: Register,<br>            <span class="hljs-comment">// 通过children属性，为/register添加子路由规则</span><br>            <span class="hljs-attr">children</span>:[<br>                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register/tab1&#x27;</span>,<span class="hljs-attr">component</span>:Tab1&#125;,<br>                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register/tab2&#x27;</span>,<span class="hljs-attr">component</span>:Tab2&#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803123419.gif" alt="动2"></p><p>全部代码见：<a href="http://jsrun.net/PU8Kp/edit">http://jsrun.net/PU8Kp/edit</a></p><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>通过动态路由参数的模式进行路由匹配</p><p>在路由规则中，要配置以冒号开头的动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 动态路径参数，以冒号开头</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;<br><br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="直接通过params获取参数"><a href="#直接通过params获取参数" class="headerlink" title="直接通过params获取参数"></a>直接通过params获取参数</h3><p>在路由组件中，可以通过<code>$route.params</code>获取路由参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-comment">// 路由组件中通过$route.params获取路由参数</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过props传参"><a href="#通过props传参" class="headerlink" title="通过props传参"></a>通过props传参</h3><p><code>$route</code>与对应路由形成高度耦合，不够灵活。所以，可以使用 <code>props</code>将组件和路由解耦。</p><ol><li><p>路由规则中<code>props</code>的值为布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>            <span class="hljs-comment">// routes是路由规则数组</span><br>            <span class="hljs-attr">routes</span>: [<br>                <span class="hljs-comment">// 如果props设置为true，route.params将会被设置为组件的属性</span><br>                &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User,<span class="hljs-attr">props</span>:<span class="hljs-literal">true</span>&#125;,<br>            ]<br>        &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;id&#x27;</span>], <br>    <span class="hljs-comment">// 使用 props 接收路由参数</span><br>    <span class="hljs-comment">// 当然也可以继续使用$route.params.id</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---&#123;&#123;id&#125;&#125;--&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>路由规则中<code>props</code>的值是对象类型</p><p>如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，<code>route.params</code>才会被设置为组件的属性）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User,<span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],<br>    <span class="hljs-comment">// 此时的id并没有传值，需要使用$route.params.id才行</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最终效果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png" alt="image-20210803134627526"></p></li><li><p><code>props</code>的值为函数类型</p><p>形参route的值等于 <code>route.params</code>，即path中的动态参数。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png" alt="image-20210803214818700"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>            <span class="hljs-attr">component</span>: User,<br>            <span class="hljs-attr">props</span>: <span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">id</span>:route.params.id&#125; &#125;<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png" alt="image-20210803214603161"></p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>为了更方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p><p>注意：在to前面需要加上冒号:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-comment">// 命名路由</span><br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span>,<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>            <span class="hljs-attr">component</span>: User,<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;user&#x27;,params:&#123;id:123&#125;&#125;&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 就相当于 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user/123&quot;</span>&gt;</span>User2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>声明式导航：通过点击链接实现导航的方式，叫做声明式导航<br>例如:普通网页中的<code>&lt;a&gt; &lt;/a&gt;</code>链接或<code>vue</code>中的<code>&lt;router-link&gt; &lt;/router-link&gt;</code></p><p>编程式导航:通过调用JavaScript形式的API实现导航的方式，叫做编程式导航<br>例如:普通网页中的<code>location.href</code>。</p><p><code>vue</code>中常见的编程式导航：</p><ul><li><p><code>this.$route.push(&#39;hash地址&#39;)</code></p><p><strong>注意：在 <code>Vue</code> 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><p>想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p><p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 字符串</span><br>router.push(<span class="hljs-string">&#x27;/home&#x27;</span>)<br><br><span class="hljs-comment">// 对象</span><br>router.push(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br><br><span class="hljs-comment">// 命名的路由</span><br>router.push(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">userId</span>: <span class="hljs-string">&#x27;123&#x27;</span> &#125;&#125;)<br><br><span class="hljs-comment">// 带查询参数，变成 /register?plan=private</span><br>router.push(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125;&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>this.$router.go(n)</code></p><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;user组件-- 用户id为：&#123;&#123;id&#125;&#125;--姓名：&#123;&#123;uname&#125;&#125;--年龄为:&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;button @click=&#x27;goRegister&#x27;&gt;跳转到register页面&lt;/button&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span>,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goRegister</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//跳转到注册页面</span><br>            <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/register&#x27;</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><span class="hljs-keyword">const</span> Register = &#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;register&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;button @click=&#x27;goback&#x27;&gt;回退&lt;/button&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span>,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goback</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><br><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User, <span class="hljs-attr">props</span>: <span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> (&#123; <span class="hljs-attr">id</span>: route.params.id, <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;jiaqicoder&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;) &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="Vue-Router小案例"><a href="#Vue-Router小案例" class="headerlink" title="Vue-Router小案例"></a>Vue-Router小案例</h1><p>根据项目的整体布局划分好组件结构，通过路由导航控制组件的显示。</p><p>1.抽离并渲染 App根组件</p><p>2.将左侧菜单改造为路由链接</p><p>3.创建左侧菜 单对应的路由组件</p><p>4.在右侧主体区 域添加路由占位符</p><p>5.添加子路由规则</p><p>6.通过路由重定向默认渲染用户组件</p><p>7.渲染用户列表数据</p><p>8.编程式导航跳转到用户详情页</p><p>9.实现后退功能</p><p>素材代码：</p><p><a href="http://jsrun.net/t98Kp/edit">http://jsrun.net/t98Kp/edit</a></p><p>最终效果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210804125047.gif" alt="动23"></p><p>实现的代码：(省略了css)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基于vue-router的案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 被vue实例所控制的区域 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 路由占位符 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">    // 定义app根组件</span></span><br><span class="xml"><span class="handlebars">    const App = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `</span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-comment">&lt;!-- 头部区域 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>后台管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-comment">&lt;!-- 中间主体区域 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content left&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/users&#x27;</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/rights&#x27;</span>&gt;</span>权限管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/goods&#x27;</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/orders&#x27;</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/settings&#x27;</span>&gt;</span>系统设置<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content right&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-content&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-comment">&lt;!-- 尾部区域 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          `,</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    const UserInfo=&#123;</span></span><br><span class="xml"><span class="handlebars">      template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>用户详情页--id:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">id</span>&#125;&#125;</span><span class="xml">---</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$route.params.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;goBack&#x27;</span>&gt;</span>后退<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">      props:[&#x27;id&#x27;],</span></span><br><span class="xml"><span class="handlebars">      methods: &#123;</span></span><br><span class="xml"><span class="handlebars">        goBack()&#123;</span></span><br><span class="xml"><span class="handlebars">          this.$router.go(-1);</span></span><br><span class="xml"><span class="handlebars">        &#125;</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">    &#125;</span></span><br><span class="xml"><span class="handlebars">    </span></span><br><span class="xml"><span class="handlebars">    const Users = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `</span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">              <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">              <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">              <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">              <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in userlist &#x27;</span><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.age</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;javascript:;&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;goDetail(item.id)&#x27;</span>&gt;</span>详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">      methods: &#123;</span></span><br><span class="xml"><span class="handlebars">        goDetail(id)&#123;</span></span><br><span class="xml"><span class="handlebars">          this.$router.push(&#x27;/userinfo/&#x27;+id)</span></span><br><span class="xml"><span class="handlebars">        &#125;</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      data() &#123;</span></span><br><span class="xml"><span class="handlebars">        return &#123;</span></span><br><span class="xml"><span class="handlebars">          userlist: [</span></span><br><span class="xml"><span class="handlebars">            &#123; id: 1, name: &#x27;张三&#x27;, age: 30 &#125;,</span></span><br><span class="xml"><span class="handlebars">            &#123; id: 2, name: &#x27;张四&#x27;, age: 25 &#125;,</span></span><br><span class="xml"><span class="handlebars">            &#123; id: 3, name: &#x27;张五&#x27;, age: 47 &#125;,</span></span><br><span class="xml"><span class="handlebars">            &#123; id: 4, name: &#x27;张六&#x27;, age: 87 &#125;</span></span><br><span class="xml"><span class="handlebars">          ]</span></span><br><span class="xml"><span class="handlebars">        &#125;</span></span><br><span class="xml"><span class="handlebars">      &#125;</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    const Rights = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>权限管理<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    const Goods = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    const Orders = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    const Settings = &#123;</span></span><br><span class="xml"><span class="handlebars">      template: `<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>系统设置<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="xml"><span class="handlebars">    &#125;;</span></span><br><span class="xml"><span class="handlebars">    //  创建路由对象</span></span><br><span class="xml"><span class="handlebars">    const router = new VueRouter(&#123;</span></span><br><span class="xml"><span class="handlebars">      routes: [&#123;</span></span><br><span class="xml"><span class="handlebars">        path: &#x27;/&#x27;, component: App,</span></span><br><span class="xml"><span class="handlebars">        redirect: &#x27;/users&#x27;,</span></span><br><span class="xml"><span class="handlebars">        children: [</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/users&#x27;, component: Users &#125;,</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/userinfo/:id&#x27;, component: UserInfo ,props:true&#125;,</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/rights&#x27;, component: Rights &#125;,</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/goods&#x27;, component: Goods &#125;,</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/orders&#x27;, component: Orders &#125;,</span></span><br><span class="xml"><span class="handlebars">          &#123; path: &#x27;/settings&#x27;, component: Settings &#125;,</span></span><br><span class="xml"><span class="handlebars">        ]</span></span><br><span class="xml"><span class="handlebars">      &#125;,</span></span><br><span class="xml"><span class="handlebars">      ],</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">    &#125;)</span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars">    const vm = new Vue(&#123;</span></span><br><span class="xml"><span class="handlebars">      el: &#x27;#app&#x27;,</span></span><br><span class="xml"><span class="handlebars">      router</span></span><br><span class="xml"><span class="handlebars">    &#125;);</span></span><br><span class="xml"><span class="handlebars">  </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例思路：<br>1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。<br>看一下这个文件中的代码编写了一些什么内容，<br>这个页面已经把后台管理页面的基本布局实现了<br>2).在页面中引入vue，vue-router<br>3).创建Vue实例对象，准备开始编写代码实现功能<br>4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//只需要把原本页面中的html代码设置为组件中的模板内容即可</span><br><span class="hljs-keyword">const</span> app = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        &lt;!-- 头部区域 --&gt;</span><br><span class="hljs-string">        &lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span><br><span class="hljs-string">        &lt;!-- 中间主体区域 --&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="hljs-string">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class="hljs-string">            &lt;ul&gt;</span><br><span class="hljs-string">              &lt;li&gt;用户管理&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;权限管理&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;商品管理&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;订单管理&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;系统设置&lt;/li&gt;</span><br><span class="hljs-string">            &lt;/ul&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;main-content&quot;&gt;添加用户表单&lt;/div&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;!-- 尾部区域 --&gt;</span><br><span class="hljs-string">        &lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span><br><span class="hljs-string">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以<br>创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myRouter = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-attr">component</span>:app&#125;<br>    ]<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;&#125;,<br>    <span class="hljs-attr">methods</span>:&#123;&#125;,<br>    <span class="hljs-attr">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure><p>补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了<br>我们需要在这个根组件中继续路由实现其他的功能子组件<br>先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = &#123;<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        ........</span><br><span class="hljs-string">        &lt;div class=&quot;main&quot;&gt;</span><br><span class="hljs-string">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class="hljs-string">            &lt;ul&gt;</span><br><span class="hljs-string">              &lt;!-- 注意：我们把所有li都修改为了路由链接 --&gt;</span><br><span class="hljs-string">              &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;&lt;router-link to=&quot;/accesses&quot;&gt;权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt;商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt;订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="hljs-string">              &lt;li&gt;&lt;router-link to=&quot;/systems&quot;&gt;系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="hljs-string">            &lt;/ul&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class="hljs-string">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class="hljs-string">            &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="hljs-string">                &lt;!-- 在 --&gt;</span><br><span class="hljs-string">                &lt;router-view&gt;&lt;/router-view&gt; </span><br><span class="hljs-string">            &lt;/div&gt;</span><br><span class="hljs-string">          &lt;/div&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        .......</span><br><span class="hljs-string">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>然后，我们要为子级路由创建并设置需要显示的子级组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//建议创建的组件首字母大写，和其他内容区分</span><br><span class="hljs-keyword">const</span> Users = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">const</span> Access = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;权限管理&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">const</span> Goods = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;商品管理&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">const</span> Orders = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;订单管理&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br><span class="hljs-keyword">const</span> Systems = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;系统管理&lt;/h3&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br><br><span class="hljs-comment">//添加子组件的路由规则</span><br><span class="hljs-keyword">const</span> myRouter = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-attr">component</span>:app , <span class="hljs-attr">children</span>:[<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/users&quot;</span>,<span class="hljs-attr">component</span>:Users &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/accesses&quot;</span>,<span class="hljs-attr">component</span>:Access &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/goods&quot;</span>,<span class="hljs-attr">component</span>:Goods &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/orders&quot;</span>,<span class="hljs-attr">component</span>:Orders &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/systems&quot;</span>,<span class="hljs-attr">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;&#125;,<br>    <span class="hljs-attr">methods</span>:&#123;&#125;,<br>    <span class="hljs-attr">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure><p>7).展示用户信息列表：<br>    A.为Users组件添加私有数据,并在模板中循环展示私有数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Users = &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">userList</span>: [<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zs&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;wang&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="hljs-string">    &lt;table&gt;</span><br><span class="hljs-string">        &lt;thead&gt;</span><br><span class="hljs-string">            &lt;tr&gt;</span><br><span class="hljs-string">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class="hljs-string">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="hljs-string">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="hljs-string">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class="hljs-string">            &lt;/tr&gt;</span><br><span class="hljs-string">        &lt;/thead&gt;</span><br><span class="hljs-string">        &lt;tbody&gt;</span><br><span class="hljs-string">            &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class="hljs-string">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                &lt;td&gt;&lt;a href=&quot;javascript:;&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">            &lt;/tr&gt;</span><br><span class="hljs-string">        &lt;/tbody&gt;</span><br><span class="hljs-string">    &lt;/table&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span>&#125;<br></code></pre></td></tr></table></figure><p>8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> UserInfo = &#123;<br>    <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;id&quot;</span>],<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">      &lt;h5&gt;用户详情&lt;/h5&gt;</span><br><span class="hljs-string">      &lt;p&gt;查看 &#123;&#123;id&#125;&#125; 号用户信息&lt;/p&gt;</span><br><span class="hljs-string">      &lt;button @click=&quot;goBack&quot;&gt;返回用户详情页&lt;/button&gt;</span><br><span class="hljs-string">    &lt;/div&gt; `</span>,<br>    <span class="hljs-attr">methods</span>:&#123;<br>      <span class="hljs-function"><span class="hljs-title">goBack</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//当用户点击按钮，后退一页</span><br>        <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后我们需要设置这个组件的路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myRouter = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-attr">component</span>:app , <span class="hljs-attr">children</span>:[<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/users&quot;</span>,<span class="hljs-attr">component</span>:Users &#125;,<br>            <span class="hljs-comment">//添加一个/userinfo的路由规则</span><br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/userinfo/:id&quot;</span>,<span class="hljs-attr">component</span>:UserInfo,<span class="hljs-attr">props</span>:<span class="hljs-literal">true</span>&#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/accesses&quot;</span>,<span class="hljs-attr">component</span>:Access &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/goods&quot;</span>,<span class="hljs-attr">component</span>:Goods &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/orders&quot;</span>,<span class="hljs-attr">component</span>:Orders &#125;,<br>            &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/systems&quot;</span>,<span class="hljs-attr">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;&#125;,<br>    <span class="hljs-attr">methods</span>:&#123;&#125;,<br>    <span class="hljs-attr">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure><p>再接着给用户列表中的详情a链接添加事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Users = &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">userList</span>:[<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zs&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;wang&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">4</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">21</span>&#125;,<br>            ]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">        &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class="hljs-string">        &lt;table&gt;</span><br><span class="hljs-string">            &lt;thead&gt;</span><br><span class="hljs-string">                &lt;tr&gt;</span><br><span class="hljs-string">                    &lt;th&gt;编号&lt;/th&gt;</span><br><span class="hljs-string">                    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="hljs-string">                    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="hljs-string">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="hljs-string">                &lt;/tr&gt;</span><br><span class="hljs-string">            &lt;/thead&gt;</span><br><span class="hljs-string">            &lt;tbody&gt;</span><br><span class="hljs-string">                &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class="hljs-string">                    &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                    &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="hljs-string">                    &lt;td&gt;&lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class="hljs-string">                &lt;/tr&gt;</span><br><span class="hljs-string">            &lt;/tbody&gt;</span><br><span class="hljs-string">        &lt;/table&gt;</span><br><span class="hljs-string">    &lt;/div&gt;`</span>,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">goDetail</span>(<span class="hljs-params">id</span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&quot;/userinfo/&quot;</span>+id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Vue-router-4"><a href="#Vue-router-4" class="headerlink" title="Vue router 4"></a>Vue router 4</h1><h2 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>① 在项目中安装 vue-router</p><p>② 定义路由组件</p><p>③ 声明路由链接和占位符</p><p>④ 创建路由模块</p><p>⑤ 导入并挂载路由模块  </p><h3 id="1-在项目中安装vue-router"><a href="#1-在项目中安装vue-router" class="headerlink" title="1.在项目中安装vue-router"></a>1.在项目中安装vue-router</h3><p>在 vue3 的项目中，只能安装并使用 vue-router 4.x。安装的命令如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-router@next <br></code></pre></td></tr></table></figure><h3 id="2-定义路由组件"><a href="#2-定义路由组件" class="headerlink" title="2 定义路由组件"></a>2 定义路由组件</h3><p>举个栗子：在项目中定义 MyHome.vue、MyMovie.vue、MyAbout.vue 三个组件，将来要使用 vue-router 来控制它们的展示与切换。<img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108101533469.png" alt="image-20210810153352360"></p><h3 id="3-声明路由链接和占位符"><a href="#3-声明路由链接和占位符" class="headerlink" title="3.  声明路由链接和占位符"></a>3.  声明路由链接和占位符</h3><p>可以使用 <code>&lt;router-link&gt;</code> 标签来声明<strong>路由链接</strong>，并使用 <code>&lt;router-view&gt;</code> 标签来声明<strong>路由占位符</strong>。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App 根组件&lt;/h1&gt;<br>    &lt;!-- 声明路由链接 --&gt;<br>    &lt;!-- 不需要加#，vue会帮我加 route-link会渲染成a标签 --&gt;<br>    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/movie&quot;&gt;电影&lt;/router-link&gt;<br>    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;<br>    &lt;!-- 声明路由占位符 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="4-创建路由模块"><a href="#4-创建路由模块" class="headerlink" title="4 创建路由模块"></a>4 创建路由模块</h3><p>在项目中创建 router.js 路由模块，在其中按照如下 4 个步骤创建并得到路由的实例对象：<br>① 从 vue-router 中按需导入两个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从vue-router中按需导入两个方法</span><br><br><span class="hljs-comment">// createRouter方法用于创建路由的实例对象</span><br><span class="hljs-comment">// createWebHashHistory 用于指定路由的工作模式（hash模式）</span><br><br><span class="hljs-keyword">import</span> &#123; createRouter,createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br></code></pre></td></tr></table></figure><p>② 导入需要使用路由控制的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MyHome.vue&quot;</span>;<br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MyAbout.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Movie <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MyMovie.vue&quot;</span>;<br></code></pre></td></tr></table></figure><p>③ 创建路由实例对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router=createRouter(&#123;<br>    <span class="hljs-comment">// 通过history属性指定路由的工作模式</span><br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">component</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<span class="hljs-attr">component</span>:About&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie&#x27;</span>,<span class="hljs-attr">component</span>:Movie&#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>④ 向外共享路由实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>⑤ 在 main.js 中导入并挂载路由模块  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/02.start/App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><span class="hljs-comment">// 1.导入路由模块</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/02.start/router.js&#x27;</span><br><br><span class="hljs-keyword">const</span> app=createApp(App);<br><br><span class="hljs-comment">// 2.使用路由模块</span><br><span class="hljs-comment">// app.use()方法用于挂载路由模块</span><br>app.use(router);<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="路由重定向-1"><a href="#路由重定向-1" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。<br>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router=createRouter(&#123;<br>    <span class="hljs-comment">// 通过history属性指定路由的工作模式</span><br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>:[<br>        <span class="hljs-comment">// 访问根路径时，将页面重定向到Home页面</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">component</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<span class="hljs-attr">component</span>:About&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie&#x27;</span>,<span class="hljs-attr">component</span>:Movie&#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="路由高亮"><a href="#路由高亮" class="headerlink" title="路由高亮"></a>路由高亮</h2><p>可以通过如下的两种方式，将激活的路由链接进行高亮显示：</p><p>① 使用默认的高亮 class 类</p><p>② 自定义路由高亮的 class 类  </p><h3 id="1-自定义路由高亮的-class-类"><a href="#1-自定义路由高亮的-class-类" class="headerlink" title="1.自定义路由高亮的 class 类"></a>1.自定义路由高亮的 class 类</h3><p>被激活的路由链接，<strong>默认</strong>会自动应用一个叫做 <code>router-link-active</code> 的类名。开发者可以使用此类名选择器，为<strong>激活的路由链接</strong>设置高亮的样式：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108101620610.png" alt="image-20210810162022542"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*可以在index.css 为router-link-active设置样式*/</span><br><span class="hljs-selector-class">.router-link-active</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>  <span class="hljs-attribute">color</span>:white;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-自定义路由高亮的-class-类"><a href="#2-自定义路由高亮的-class-类" class="headerlink" title="2.自定义路由高亮的 class 类"></a>2.自定义路由高亮的 class 类</h3><p>在创建路由的实例对象时，开发者可以基于 <code>linkActiveClass</code> 属性，自定义路由链接被激活时所应用的类名：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router=createRouter(&#123;<br>    <span class="hljs-comment">// 通过history属性指定路由的工作模式</span><br>    <span class="hljs-attr">history</span>:createWebHashHistory(),<br>    <span class="hljs-attr">linkActiveClass</span>:<span class="hljs-string">&#x27;active-router&#x27;</span>,<br>    <span class="hljs-attr">routes</span>:[<br>        <span class="hljs-comment">// 访问根路径时，将页面重定向到Home页面</span><br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">component</span>:Home&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<span class="hljs-attr">component</span>:About&#125;,<br>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie&#x27;</span>,<span class="hljs-attr">component</span>:Movie&#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="嵌套路由-1"><a href="#嵌套路由-1" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>通过路由实现组件的嵌套展示，叫做嵌套路由。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108101631034.png" alt="image-20210810163106972"></p><p>① 声明子路由链接和子路由占位符</p><p>② 在父路由规则中，通过 children 属性嵌套声明子路由规则  </p><h3 id="1-声明子路由链接和子路由占位符"><a href="#1-声明子路由链接和子路由占位符" class="headerlink" title="1. 声明子路由链接和子路由占位符"></a>1. 声明子路由链接和子路由占位符</h3><p>在 About.vue 组件中，声明 tab1 和 tab2 的子路由链接以及子路由占位符。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;MyAbout组件&lt;/h3&gt;<br>    &lt;hr /&gt;<br>    &lt;!-- 声明子路由链接 --&gt;<br>    &lt;router-link to=&quot;/about/tab1&quot;&gt;tab1&lt;/router-link&gt; &amp;nbsp;<br>    &lt;router-link to=&quot;/about/tab2&quot;&gt;tab2&lt;/router-link&gt; &amp;nbsp;<br>    &lt;router-link to=&quot;/about/tab3&quot;&gt;tab3&lt;/router-link&gt;<br>    &lt;!-- 声明子路由占位符 --&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="2-通过-children-属性声明子路由规则"><a href="#2-通过-children-属性声明子路由规则" class="headerlink" title="2.通过 children 属性声明子路由规则"></a>2.通过 children 属性声明子路由规则</h3><p>在 router.js 路由模块中，<strong>导入需要的组件</strong>，并使用 <code>children</code> 属性<strong>声明子路由规则</strong>。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Tab1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Tab1.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Tab2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Tab2.vue&#x27;</span>;<br><br><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>    <span class="hljs-comment">// 通过history属性指定路由的工作模式</span><br>    <span class="hljs-attr">history</span>: createWebHashHistory(),<br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 访问根路径时，将页面重定向到Home页面</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: Home &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: About,<br>            <span class="hljs-comment">// 通过children属性嵌套子级路由规则</span><br>            <span class="hljs-attr">children</span>: [<br>                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;tab1&#x27;</span>,<span class="hljs-attr">component</span>:Tab1&#125;,<br>                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;tab2&#x27;</span>,<span class="hljs-attr">component</span>:Tab2&#125;,<br>            ]<br>        &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/movie&#x27;</span>, <span class="hljs-attr">component</span>: Movie &#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>children属性下的path，要么写完整路径<code>/about/tab1</code>，要么直接写<code>tab1</code>。</p><p><strong>注意，以 <code>/</code> 开头的嵌套路径将被视为根路径。这允许你利用组件嵌套，而不必使用嵌套的 URL。</strong></p><h2 id="动态路由匹配-1"><a href="#动态路由匹配-1" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><h3 id="1-动态路由匹配概念"><a href="#1-动态路由匹配概念" class="headerlink" title="1.动态路由匹配概念"></a>1.动态路由匹配概念</h3><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。在 vue-router 中使用英文的冒号（:）来定义路由的参数项。示例代码如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/movie/1&quot;&gt;电影1&lt;/router-link&gt; <br>&lt;router-link to=&quot;/movie/2&quot;&gt;电影2&lt;/router-link&gt; <br>&lt;router-link to=&quot;/movie/3&quot;&gt;电影3&lt;/router-link&gt; <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//路由中的动态参数 以: 声明，冒号后面的是自定的参数名称</span><br>&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie/:id&#x27;</span>,<span class="hljs-attr">component</span>:Moive&#125;<br><br><span class="hljs-comment">//就将以下的三个规则合并成了一个，提高复用性</span><br>&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie/1&#x27;</span>,<span class="hljs-attr">component</span>:Moive&#125;<br>&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie/2&#x27;</span>,<span class="hljs-attr">component</span>:Moive&#125;<br>&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/movie/3&#x27;</span>,<span class="hljs-attr">component</span>:Moive&#125;<br></code></pre></td></tr></table></figure><h3 id="2-route-params-参数对象"><a href="#2-route-params-参数对象" class="headerlink" title="2.$route.params 参数对象"></a>2.$route.params 参数对象</h3><p><strong>通过动态路由匹配的方式渲染出来的组件</strong>中，可以使用 <code>$route.params</code> 对象访问到<strong>动态匹配的参数值</strong>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;MyMoive组件 &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name:&#x27;MyMovie&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-使用-props-接收路由参数"><a href="#3-使用-props-接收路由参数" class="headerlink" title="3.使用 props 接收路由参数"></a>3.使用 props 接收路由参数</h3><p>为了简化路由参数的获取形式，vue-router 允许在<strong>路由规则</strong>中开启 <code>props</code> 传参。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">//1.在定义路由规则时，声明props:true<br>// 即可在movie组件中，以props形式接收被路由规则匹配的参数<br>&#123; path: &#x27;/movie/:id&#x27;, component: Movie,props:true &#125;<br><br>&lt;template&gt;<br>  &lt;!-- 3.直接使用props中接收的参数 --&gt;<br>  &lt;div&gt;MyMoive组件 &#123;&#123; id &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 2. 使用props接收路由规则匹配到的参数<br>  props: [&quot;id&quot;],<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="路由规则中props的值是对象类型"><a href="#路由规则中props的值是对象类型" class="headerlink" title="路由规则中props的值是对象类型"></a>路由规则中<code>props</code>的值是对象类型</h4><p>如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，<code>route.params</code>才会被设置为组件的属性）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User,<span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],<br>    <span class="hljs-comment">// 此时的id并没有传值，需要使用$route.params.id才行</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最终效果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png" alt="image-20210803134627526"></p><h4 id="props的值为函数类型"><a href="#props的值为函数类型" class="headerlink" title="props的值为函数类型"></a><code>props</code>的值为函数类型</h4><p>形参route的值等于 <code>route.params</code>，即path中的动态参数。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png" alt="image-20210803214818700"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>    <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;uname&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>],<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    <span class="hljs-comment">// routes是路由规则数组</span><br>    <span class="hljs-attr">routes</span>: [<br>        <span class="hljs-comment">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<br>            <span class="hljs-attr">component</span>: User,<br>            <span class="hljs-attr">props</span>: <span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">id</span>:route.params.id&#125; &#125;<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png" alt="image-20210803214603161"></p><h2 id="编程式导航-1"><a href="#编程式导航-1" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>通过调用 API 实现导航的方式，叫做编程式导航。与之对应的，通过点击链接实现导航的方式，叫做声明式导航。例如：</p><ul><li>普通网页中点击 <code>&lt;a&gt;</code> 链接、vue 项目中点击 <code>&lt;router-link&gt;</code> 都属于声明式导航</li><li>普通网页中调用 <code>location.href</code> 跳转到新页面的方式，属于编程式导航  </li></ul><h3 id="1-vue-router-中的编程式导航-API"><a href="#1-vue-router-中的编程式导航-API" class="headerlink" title="1.vue-router 中的编程式导航 API"></a>1.vue-router 中的编程式导航 API</h3><p>vue-router 提供了许多编程式导航的 API，其中最常用的两个 API 分别是：</p><p>① this.$router.push(‘hash 地址’)</p><ul><li>跳转到指定 Hash 地址，从而展示对应的组件</li></ul><p>② this.$router.go(数值 n)</p><ul><li>实现导航历史的前进、后退  </li></ul><h3 id="2-router-push"><a href="#2-router-push" class="headerlink" title="2 $router.push"></a>2 $router.push</h3><p>调用 <code>this.$router.push()</code> 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;MyHOME 组件&lt;/h3&gt;<br>    &lt;button @click=&quot;gotoMovie(3)&quot;&gt;Go to movie&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    gotoMovie(id)&#123;<br>      // 跳转到 /movie/3<br>      this.$router.push(`/movie/$&#123;id&#125;`);<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>3.$router.go</p><p>调用 <code>this.$router.go()</code> 方法，可以在浏览历史中进行前进和后退。示例代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 3.直接使用props中接收的参数 --&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;MyMoive组件---- &#123;&#123; id &#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=&#x27;goBack&#x27;&gt;回退&lt;/button&gt;<br>  &lt;/div&gt;<br><br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 2. 使用props接收路由规则匹配到的参数<br>  props: [&quot;id&quot;],<br>  methods: &#123;<br>    goBack()&#123;<br>      this.$router.go(-1);<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="命名路由-1"><a href="#命名路由-1" class="headerlink" title="命名路由"></a>命名路由</h2><p><strong>通过 name 属性为路由规则定义名称的方式，叫做命名路由。</strong>示例代码如下：</p><p>注意：命名路由的 name 值不能重复，必须保证唯一性！  </p><h3 id="6-1-使用命名路由实现声明式导航"><a href="#6-1-使用命名路由实现声明式导航" class="headerlink" title="6.1 使用命名路由实现声明式导航"></a>6.1 使用命名路由实现声明式导航</h3><p>为 <code>&lt;router-link&gt;</code> 标签动态绑定 to 属性的值，并通过 <strong>name 属性</strong>指定要跳转到的路由规则。期间还可以用params 属性指定跳转期间要携带的路由参数。示例代码 如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 在router.js中给路由命名为mov<br>&#123;name:&#x27;mov&#x27; ,path: &#x27;/movie/:id&#x27;, component: Movie,props:true &#125;,<br><br>//============<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;MyHOME 组件&lt;/h3&gt;<br>    &lt;button @click=&quot;gotoMovie(3)&quot;&gt;Go to movie&lt;/button&gt;<br>    &lt;router-link :to=&quot;&#123;name:&#x27;mov&#x27;,params:&#123;id:3&#125;&#125;&quot;&gt;Go to movie&lt;/router-link&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><h3 id="6-2-使用命名路由实现编程式导航"><a href="#6-2-使用命名路由实现编程式导航" class="headerlink" title="6.2 使用命名路由实现编程式导航"></a>6.2 使用命名路由实现编程式导航</h3><p>调用 <code>push</code> 函数期间指定一个<strong>配置对象</strong>，name 是要跳转到的路由规则、params 是携带的路由参数：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h3&gt;MyHOME 组件&lt;/h3&gt;<br>    &lt;router-link :to=&quot;&#123;name:&#x27;mov&#x27;,params:&#123;id:2&#125;&#125;&quot;&gt;Go to movie&lt;/router-link&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  methods: &#123;<br>    gotoMovie(id)&#123;<br>      // 跳转到 /movie/1<br>      this.$router.push(&#123;name:&#x27;mov&#x27;,params:&#123;id&#125;&#125;);<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p><strong>导航守卫</strong>可以控制<strong>路由的访问权限</strong>。示意图如下：  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108101927665.png" alt="image-20210810192715528"></p><h3 id="1-声明全局导航守卫"><a href="#1-声明全局导航守卫" class="headerlink" title="1.声明全局导航守卫"></a>1.声明全局导航守卫</h3><p><strong>全局导航守卫</strong>会拦截<strong>每个路由规则</strong>，从而对每个路由进行<strong>访问权限的控制</strong>。可以按照如下的方式定义全局导航守卫：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router=createRouter(&#123;...&#125;);<br><span class="hljs-comment">// 调用路由实例对象的beforeEach函数，声明“全局前置守卫”</span><br><span class="hljs-comment">// fn 必须是一个函数，每次拦截到路由的请求，必须调用fn进去处理</span><br><span class="hljs-comment">// 因此fn叫做“守卫访问”</span><br><br>router.beforeEach(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-守卫方法的-3-个形参"><a href="#2-守卫方法的-3-个形参" class="headerlink" title="2.守卫方法的 3 个形参"></a>2.守卫方法的 3 个形参</h3><p><strong>全局导航守卫</strong>的守卫方法中接收 3 个形参，格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router=createRouter(&#123;...&#125;);<br>                           <br><span class="hljs-comment">// 全局前置守卫</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// to 目标路由对象</span><br>    <span class="hljs-comment">// from 当前导航正要离开的路由对象</span><br>    <span class="hljs-comment">// next 是一个函数，表示放行</span><br>    <span class="hljs-built_in">console</span>.log(to,<span class="hljs-keyword">from</span>);<br>    <span class="hljs-comment">//</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>打印to和from的结果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108101954448.png" alt="image-20210810195445380"></p><p>注意：<br>① 在守卫方法中<strong>如果不声明 next 形参，则默认允许用户访问每一个路由</strong>！</p><p>② <strong>在守卫方法中如果声明了 next 形参，则必须调用 next() 函数，否则不允许用户访问任何一个路由！</strong>  </p><h3 id="3-next-函数的-3-种调用方式"><a href="#3-next-函数的-3-种调用方式" class="headerlink" title="3.next 函数的 3 种调用方式"></a>3.next 函数的 3 种调用方式</h3><p>参考示意图，分析 next 函数的 3 种调用方式最终导致的结果：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108102015581.png" alt="image-20210810201559508"></p><ul><li>直接放行：next();</li><li><strong>强制其停留在当前页面</strong>：next(false);</li><li><strong>强制其跳转到其他页面如</strong>：next(‘/login’)  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router=createRouter(&#123;...&#125;);<br><br><span class="hljs-comment">// 全局导航守卫</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// to为将要访问的页面</span><br>    <span class="hljs-comment">// from从哪个页面来的</span><br>    <br>    <span class="hljs-keyword">if</span>(to.path===<span class="hljs-string">&#x27;/main&#x27;</span>)&#123;<br>        <span class="hljs-comment">// 如果用户要访问后台页面</span><br><br>        <span class="hljs-comment">// next(false)强制用户停留在当前页面</span><br>        next(<span class="hljs-literal">false</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 用户访问的不是后台页面</span><br>        <span class="hljs-comment">// next() 直接放行</span><br>        next();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router=createRouter(&#123;...&#125;);<br><br><span class="hljs-comment">// 全局导航守卫</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// to为将要访问的页面</span><br>    <span class="hljs-comment">// from从哪个页面来的</span><br>    <br>    <span class="hljs-keyword">if</span>(to.path===<span class="hljs-string">&#x27;/main&#x27;</span>)&#123;<br>        <span class="hljs-comment">// 如果用户要访问后台页面</span><br>        <span class="hljs-comment">// 跳转到登录页面</span><br>        next(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 用户访问的不是后台页面</span><br>        <span class="hljs-comment">// next() 直接放行</span><br>        next();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-结合-token-控制后台主页的访问权限"><a href="#4-结合-token-控制后台主页的访问权限" class="headerlink" title="4.结合 token 控制后台主页的访问权限"></a>4.结合 token 控制后台主页的访问权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br><span class="hljs-comment">// 获取本地存储的token值</span><br><span class="hljs-keyword">const</span> tokenStr=<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(to.path===<span class="hljs-string">&#x27;/main&#x27;</span>&amp;&amp;!tokenStr)&#123;<br>        <span class="hljs-comment">// 如果用户要访问后台页面且不存在token时</span><br>        <span class="hljs-comment">// 跳转到登录页面</span><br>        next(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 用户访问的不是后台页面</span><br>        <span class="hljs-comment">// next() 直接放行</span><br>        next();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于接口的图书管理系统</title>
    <link href="/2021/08/01/%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/08/01/%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>前面已经做了一个<a href="https://jiaqicoder.com/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">图书管理系统</a>，不过当时用的是假数据，因此这次将用express写接口，从而对图书的相关操作能基于后台接口。</p><h1 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h1><h2 id="需要创建的接口"><a href="#需要创建的接口" class="headerlink" title="需要创建的接口"></a>需要创建的接口</h2><table><thead><tr><th>功能</th><th>请求方式</th><th>请求路由</th></tr></thead><tbody><tr><td>图书列表数据加载</td><td>GET</td><td>/books</td></tr><tr><td>添加图书</td><td>POST</td><td>/books</td></tr><tr><td>验证图书名称是否存在</td><td>GET</td><td>/books/book/:name</td></tr><tr><td>编辑图书（根据id查询）</td><td>GET</td><td>/books/:id</td></tr><tr><td>编辑图书（提交修改后的）</td><td>PUT</td><td>/books/:id</td></tr><tr><td>删除图书</td><td>DELETE</td><td>/books/:id</td></tr></tbody></table><p>路由素材中已经提供了，最后看实际情况，尽可能自己实现路由。</p><h2 id="图书列表数据加载"><a href="#图书列表数据加载" class="headerlink" title="图书列表数据加载"></a>图书列表数据加载</h2><p>以下仅仅写出新增的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 指定基准路径</span><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://localhost&#x27;</span>;<br><span class="hljs-comment">// 响应拦截器，将响应结果的data属性返回</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> res.data;<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>().reject(err);<br>&#125;)<br><br><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 调用后台接口</span><br>    <span class="hljs-attr">queryData</span>: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.books = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;/books&#x27;</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 该生命周期钩子函数被触发的时候</span><br>  <span class="hljs-comment">// 一般此时用于获取后台数据，然后把数据填充在模板</span><br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.queryData();<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="添加图书"><a href="#添加图书" class="headerlink" title="添加图书"></a>添加图书</h2><ul><li>路径：books</li><li>请求参数<ul><li>name : 图书名称</li></ul></li><li>响应结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span>  <span class="hljs-comment">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此时由于编号是在后台生成的，因此将其禁用输入。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802102148.png" alt="image-20210802102141735"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">methods</span>: &#123;<br>      <span class="hljs-keyword">async</span>  <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flag) &#123;<br>        <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 如果表单中的id与数据中的id相同</span><br>          <span class="hljs-keyword">if</span> (item.id == <span class="hljs-built_in">this</span>.id) &#123;<br>            item.name = <span class="hljs-built_in">this</span>.name;<br>            <span class="hljs-comment">// 允许输入</span><br>            <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">console</span>.log(item.id);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>          &#125;<br>        &#125;)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 添加图书</span><br>        <span class="hljs-keyword">let</span> res= <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">&#x27;/books&#x27;</span>,&#123;<br>          <span class="hljs-attr">name</span>:<span class="hljs-built_in">this</span>.name<br>        &#125;)<br>        <span class="hljs-comment">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>        <span class="hljs-keyword">if</span>(res.status===<span class="hljs-number">200</span>)&#123;<br>          <span class="hljs-comment">// 重新加载图书列表</span><br>          <span class="hljs-built_in">this</span>.queryData();<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 清空input输入域</span><br>      <span class="hljs-built_in">this</span>.id = <span class="hljs-string">&#x27;&#x27;</span>;<br>      <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="验证图书名称验证"><a href="#验证图书名称验证" class="headerlink" title="验证图书名称验证"></a>验证图书名称验证</h2><ul><li>路径：books/book/:name</li><li>请求参数:无</li><li>响应结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">1</span>  <span class="hljs-comment">// (1表示存在；2表示不存在)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-comment">// 验证图书名称是否存在</span><br>    <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;/books/book/&#x27;</span> + <span class="hljs-built_in">this</span>.name);<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 图书已经存在，禁用提交按钮</span><br>      <span class="hljs-built_in">this</span>.submitFlag = <span class="hljs-literal">true</span>;<br>      <span class="hljs-built_in">this</span>.err = <span class="hljs-literal">true</span>;<br>      <span class="hljs-built_in">this</span>.errMessage = <span class="hljs-string">&#x27;图书名称已存在&#x27;</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.submitFlag = <span class="hljs-literal">false</span>;<br>&#125;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="编辑图书"><a href="#编辑图书" class="headerlink" title="编辑图书"></a>编辑图书</h2><h3 id="根据id查询图书信息"><a href="#根据id查询图书信息" class="headerlink" title="根据id查询图书信息"></a>根据id查询图书信息</h3><ul><li>路径：books/:id</li><li>请求参数：无</li><li>响应结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;西游记&quot;</span>,<br>    <span class="hljs-attr">&quot;date&quot;</span>:<span class="hljs-number">2525609975000</span>,<br>    <span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">7</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">id</span>)</span> &#123;<br>      <span class="hljs-comment">// 修改的时候将状态位设置为true</span><br>      <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">true</span>;<br>      <span class="hljs-comment">// 根据id查询对应的图书信息</span><br>      <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;books/&#x27;</span>+id);<br>      <span class="hljs-built_in">this</span>.id=res.id;<br>      <span class="hljs-built_in">this</span>.name=res.name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="提交编辑后的图书信息"><a href="#提交编辑后的图书信息" class="headerlink" title="提交编辑后的图书信息"></a>提交编辑后的图书信息</h3><ul><li>路径：books/:id</li><li>请求参数<ul><li>name : 图书名称</li></ul></li><li>响应结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span>  <span class="hljs-comment">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flag) &#123;<br>      <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">await</span> axios.put(<span class="hljs-string">&#x27;/books/&#x27;</span>+<span class="hljs-built_in">this</span>.id,&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-built_in">this</span>.name<br>      &#125;);<br>      <span class="hljs-keyword">if</span>(res.status===<span class="hljs-number">200</span>)&#123;<br>      <span class="hljs-comment">//  刷新列表</span><br>      <span class="hljs-built_in">this</span>.queryData();<br>      &#125;<br>      <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 添加图书</span><br>      <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">&#x27;/books&#x27;</span>, &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-built_in">this</span>.name<br>      &#125;)<br>      <span class="hljs-comment">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>      <span class="hljs-keyword">if</span> (res.status === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 重新加载图书列表</span><br>        <span class="hljs-built_in">this</span>.queryData();<br>      &#125;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h2><ul><li>路径：books/:id</li><li>请求参数: 无</li><li>响应结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">200</span>  <span class="hljs-comment">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params">id</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> res= <span class="hljs-keyword">await</span> axios.delete(<span class="hljs-string">&#x27;books/&#x27;</span>+id);<br>    <span class="hljs-keyword">if</span>(res.status===<span class="hljs-number">200</span>)&#123;<br>      <span class="hljs-built_in">this</span>.queryData();<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>axios</tag>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios学习</title>
    <link href="/2021/08/01/axios%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/01/axios%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>笔记基于axios中文网：<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p><p>github地址：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库，作用于<a href="https://nodejs.org/"><code>node.js</code></a> 和浏览器中。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p><p>它具有一下特征：</p><ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h2 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h2><p>发起多个并发请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserAccount</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserPermissions</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">Promise</span>.all([getUserAccount(), getUserPermissions()])<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">results</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> acct = results[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> perm = results[<span class="hljs-number">1</span>];<br>  &#125;);<br></code></pre></td></tr></table></figure><p>支持async/await语法，如发送多个异步请求，第一个请求的结果作为第二个请求的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL=<span class="hljs-string">&#x27;http://localhost&#x27;</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryData</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> info=<span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;async1&#x27;</span>);<br>    <span class="hljs-keyword">let</span> res=<span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;async2?info=&#x27;</span>+info.data);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">// async 函数的返回值是promise对象！</span><br>queryData().then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<span class="hljs-comment">//hello async1</span><br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>接口配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/async1&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;async1&#x27;</span>);<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/async2&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 如果请求地址存在参数</span><br>    <span class="hljs-keyword">if</span>(req.query)&#123;<br>        <span class="hljs-keyword">return</span> res.send(<span class="hljs-string">&#x27;hello &#x27;</span>+req.query.info)<br>    &#125;<br>    res.send(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>可以通过url或者params选项传递参数。</p><ul><li><p>通过url传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.get(<span class="hljs-string">&#x27;http://localhost/axios?id=12&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;);<br>axios.get(<span class="hljs-string">&#x27;http://localhost/axios/45&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上述请求分别调用第一个和第二接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/axios&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;axios get &#x27;</span>+req.query.id);<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/axios/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;restful get &#x27;</span>+req.params.id);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>通过params传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.get(<span class="hljs-string">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">67</span>&#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>此时会调用第一个接口。</p><p>最后的结果为：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801150100.png" alt="image-20210801150053066"></p></li></ul><h3 id="DELETE传递参数"><a href="#DELETE传递参数" class="headerlink" title="DELETE传递参数"></a>DELETE传递参数</h3><p>参数传递与GET方式类似，支持通过url或者axios的params传递参数。</p><p>以下示例通过axios的params进行传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.delete(<span class="hljs-string">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jiaqi&#x27;</span><br>    &#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.delete(<span class="hljs-string">&#x27;/axios&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;axios delete name: &#x27;</span>+req.query.name)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><ul><li><p>通过选项传递参数（默认传递的是json格式的数据）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.post(<span class="hljs-string">&#x27;axios&#x27;</span>,&#123;<br>    <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">pwd</span>:<span class="hljs-number">123</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>后台接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;));<br>app.use(bodyParser.json());<br><br><span class="hljs-comment">//需要使用bodyParser来解析post传递的参数</span><br><br>app.post(<span class="hljs-string">&#x27;/axios&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;axios post &#x27;</span>+req.body.name+<span class="hljs-string">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>传递表单类型的数据</p><p>通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">URLSearchParams</a>传递参数（application/x-www-urlencoded）</p><blockquote><p><strong><code>URLSearchParams</code></strong> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> params=<span class="hljs-keyword">new</span> URLSearchParams();<br>params.append(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>);<br>params.append(<span class="hljs-string">&#x27;pwd&#x27;</span>,<span class="hljs-string">&#x27;12345&#x27;</span>);<br>axios.post(<span class="hljs-string">&#x27;http://localhost/axios&#x27;</span>,params).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用的接口与前面的一样，故不赘述。</p></li><li><p>除了URLSearchParams，还可以通过其他方式编码，具体详见<a href="https://axios-http.com/zh/docs/urlencoded%E3%80%82">https://axios-http.com/zh/docs/urlencoded。</a></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801153639.png" alt="image-20210801153632594"></p></li></ul><h3 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h3><p>参数传递与POST请求相似。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// PUT 请求</span><br>axios.put(<span class="hljs-string">&#x27;http://localhost/axios/494&#x27;</span>,&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>,<br>    <span class="hljs-attr">pwd</span>:<span class="hljs-number">903</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>接口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.put(<span class="hljs-string">&#x27;/axios/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;axios put &#x27;</span>+req.params.id+<span class="hljs-string">&#x27;-----&#x27;</span>+req.body.name+<span class="hljs-string">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-comment">// `data` 由服务器提供的响应</span><br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// `status` 来自服务器响应的 HTTP 状态码</span><br>  <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><br>  <span class="hljs-comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span><br>  <span class="hljs-attr">statusText</span>: <span class="hljs-string">&#x27;OK&#x27;</span>,<br><br>  <span class="hljs-comment">// `headers` 是服务器响应头</span><br>  <span class="hljs-comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span><br>  <span class="hljs-comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span><br>  <span class="hljs-attr">headers</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// `config` 是 `axios` 请求的配置信息</span><br>  <span class="hljs-attr">config</span>: &#123;&#125;,<br><br>  <span class="hljs-comment">// `request` 是生成此响应的请求</span><br>  <span class="hljs-comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  <span class="hljs-comment">// 在浏览器中则是 XMLHttpRequest 实例</span><br>  <span class="hljs-attr">request</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当使用 then 时，将接收如下响应:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.get(<span class="hljs-string">&#x27;/user/12345&#x27;</span>)<br>  .then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>    <span class="hljs-built_in">console</span>.log(response.status);<br>    <span class="hljs-built_in">console</span>.log(response.statusText);<br>    <span class="hljs-built_in">console</span>.log(response.headers);<br>    <span class="hljs-built_in">console</span>.log(response.config);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>可以指定默认配置，它将作用于每个请求。</p><h3 id="全局-axios-默认值"><a href="#全局-axios-默认值" class="headerlink" title="全局 axios 默认值"></a>全局 axios 默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置公共的请求头</span><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;https://api.example.com&#x27;</span>;<br><span class="hljs-comment">// 配置 超时时间</span><br>axios.defaults.timeout = <span class="hljs-number">2500</span>;<br><span class="hljs-comment">// 配置公共的请求头</span><br>axios.defaults.headers.common[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;<br><span class="hljs-comment">// 配置公共的 post 的 Content-Type</span><br>axios.defaults.headers.post[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br><span class="hljs-comment">// 设置请求头</span><br>axios.defaults.headers[<span class="hljs-string">&#x27;mytoken&#x27;</span>]=<span class="hljs-string">&#x27;alsjffsfjslkk&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>使用举例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置请求头信息</span><br><span class="hljs-comment">// 需要服务器允许传递mytoken这个header</span><br>axios.defaults.headers[<span class="hljs-string">&#x27;mytoken&#x27;</span>]=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-comment">// 设置基准url地址</span><br>axios.defaults.baseURL=<span class="hljs-string">&#x27;http://localhost/&#x27;</span>;<br>axios.get(<span class="hljs-string">&#x27;/axios-json&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data.name);<br>&#125;)<br></code></pre></td></tr></table></figure><p>关于请求头的设置，服务器端需要允许设置某个header才行。必须要在服务器中允许名为mytoken的请求头，<code>    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;mytoken&quot;);</code></p><p>此时的服务器设置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//设置跨域请求</span><br>app.all(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-comment">//设置请求头</span><br>    <span class="hljs-comment">//允许所有来源访问</span><br>    res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    <br>    res.header(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot; Origin, X-Requested-With, Content-Type, Accept&quot;</span>);<br>    res.header(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;mytoken&quot;</span>);<br>    <span class="hljs-comment">//允许访问的方式</span><br>    res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span>)<br>    <span class="hljs-comment">//修改程序信息与版本</span><br>    res.header(<span class="hljs-string">&#x27;X-Powered-By&#x27;</span>, <span class="hljs-string">&#x27; 3.2.1&#x27;</span>)<br>    <span class="hljs-comment">//内容类型：如果是post请求必须指定这个属性</span><br>    res.header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>)<br>    next()<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。一定要记得把config或者response返回出去。</p><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><p>在请求发出前的设置的一些信息。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163129.png" alt="image-20210801163129933"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) </span>&#123;<br>    <span class="hljs-comment">// 在发送请求之前做些什么</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>使用举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)</span>&#123;<br>    <span class="hljs-comment">// 比如可以根据不同的url，进行不同的配置</span><br>    <span class="hljs-built_in">console</span>.log(config.url);<br>    <span class="hljs-comment">// 在请求发出前做些什么</span><br>    config.headers.mytoken=<span class="hljs-string">&#x27;hello&#x27;</span>;<br>    <span class="hljs-keyword">return</span> config;<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br><br>axios.get(<span class="hljs-string">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><p>在获取数据之前，对数据进行加工处理。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163941.png" alt="image-20210801163941747"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加响应拦截器</span><br>axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-comment">// 2xx 范围内的状态码都会触发该函数。</span><br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;<br>    <span class="hljs-comment">// 超出 2xx 范围的状态码都会触发该函数。</span><br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>使用举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response);<br>    <span class="hljs-keyword">return</span> response.data;<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>&#125;);<br>axios.get(<span class="hljs-string">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(response);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">/*...*/</span>&#125;);<br>axios.interceptors.request.eject(myInterceptor);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YAML学习笔记</title>
    <link href="/2021/07/31/YAML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/31/YAML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>笔记基于 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>YAML转JS对象：<a href="https://nodeca.github.io/js-yaml/">YAML parser for JavaScript - JS-YAML (nodeca.github.io)</a></p><p>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。</p><h2 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h2><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li></ul><p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p><p>YAML 支持的数据结构有三种。</p><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象的一组键值对，使用冒号结构表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">animal:</span> <span class="hljs-string">pets</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;pets&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hash:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">Steve</span>, <span class="hljs-attr">foo:</span> <span class="hljs-string">bar</span>&#125;<br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">hash</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Steve&#x27;</span>, <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span> &#125; &#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>一组连词线开头的行，构成一个数组。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">fish</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[ <span class="hljs-string">&#x27;Cat&#x27;</span>, <span class="hljs-string">&#x27;Dog&#x27;</span>, <span class="hljs-string">&#x27;Goldfish&#x27;</span> ]<br></code></pre></td></tr></table></figure><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">goldfish</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[ [ <span class="hljs-string">&#x27;Cat&#x27;</span>, <span class="hljs-string">&#x27;Dog&#x27;</span>, <span class="hljs-string">&#x27;Goldfish&#x27;</span> ] ]<br></code></pre></td></tr></table></figure><p>数组也可以采用行内表示法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">animal: [cat, dog]<br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">animal</span>: [ <span class="hljs-string">&#x27;Cat&#x27;</span>, <span class="hljs-string">&#x27;Dog&#x27;</span> ] &#125;<br></code></pre></td></tr></table></figure><h2 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h2><p>对象和数组可以结合使用，形成复合结构。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">languages:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">ruby</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">perl</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">java</span><br><span class="hljs-attr">websites:</span><br> <span class="hljs-attr">yaml:</span> <span class="hljs-string">yaml.org</span><br> <span class="hljs-attr">ruby:</span> <span class="hljs-string">ruby-lang.org</span><br> <span class="hljs-attr">python:</span> <span class="hljs-string">python.org</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">languages</span>: [<span class="hljs-string">&#x27;ruby&#x27;</span>, <span class="hljs-string">&#x27;perl&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>],<br>    <span class="hljs-attr">websites</span>: &#123; <span class="hljs-attr">yaml</span>: <span class="hljs-string">&#x27;yaml.org&#x27;</span>, <span class="hljs-attr">ruby</span>: <span class="hljs-string">&#x27;ruby-lang.org&#x27;</span>, <span class="hljs-attr">python</span>: <span class="hljs-string">&#x27;python.org&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h2><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><p>数值直接以字面量的形式表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">number:</span> <span class="hljs-number">12.30</span><br></code></pre></td></tr></table></figure><p>转为JavaScript如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">number</span>: <span class="hljs-number">12.30</span> &#125;<br></code></pre></td></tr></table></figure><p>布尔值用<code>true</code>和<code>false</code>表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">isSet:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">isSet</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure><p><code>null</code>用<code>~</code>表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">parent:</span> <span class="hljs-string">~</span> <br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">parent</span>: <span class="hljs-literal">null</span> &#125;<br></code></pre></td></tr></table></figure><p>时间采用 ISO8601 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">iso8601:</span> <span class="hljs-number">2001-12-14t21:59:43.10-05:00</span> <br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">iso8601</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2001-12-14t21:59:43.10-05:00&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure><p>日期采用复合 iso8601 格式的年、月、日表示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">date:</span> <span class="hljs-number">1976-07-31</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;1976-07-31&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure><p>YAML 允许使用两个感叹号，强制转换数据类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">e:</span> <span class="hljs-type">!!str</span> <span class="hljs-number">123</span><br><span class="hljs-attr">f:</span> <span class="hljs-type">!!str</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">e</span>: <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-attr">f</span>: <span class="hljs-string">&#x27;true&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是最常见，也是最复杂的一种数据类型。<strong>字符串默认不使用引号表示。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">这是一行字符串</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;这是一行字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">&#x27;内容： 字符串&#x27;</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;内容: 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>单引号和双引号都可以使用，<strong>双引号不会对特殊字符转义</strong>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">s1:</span> <span class="hljs-string">&#x27;内容\n字符串&#x27;</span><br><span class="hljs-attr">s2:</span> <span class="hljs-string">&quot;内容\n字符串&quot;</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">s1</span>: <span class="hljs-string">&#x27;内容\\n字符串&#x27;</span>, <span class="hljs-attr">s2</span>: <span class="hljs-string">&#x27;内容\n字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">&#x27;labor&#x27;</span><span class="hljs-string">&#x27;s day&#x27;</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;labor\&#x27;s day&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">str:</span> <span class="hljs-string">这是一段</span><br> <span class="hljs-string">多行</span><br> <span class="hljs-string">字符串</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;这是一段 多行 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>多行字符串可以使用<code>|</code>保留换行符，也可以使用<code>&gt;</code>折叠换行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">this:</span> <span class="hljs-string">|</span><br><span class="hljs-string"> Foo</span><br><span class="hljs-string"> Bar</span><br><span class="hljs-string"></span><span class="hljs-attr">that:</span> <span class="hljs-string">&gt;</span><br><span class="hljs-string"> Foo</span><br><span class="hljs-string"> Bar</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">this</span>: <span class="hljs-string">&#x27;Foo\nBar\n&#x27;</span>, <span class="hljs-attr">that</span>: <span class="hljs-string">&#x27;Foo Bar\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">s1:</span> <span class="hljs-string">|</span><br><span class="hljs-string"> Foo</span><br><span class="hljs-string"></span><span class="hljs-attr">S2:</span> <span class="hljs-string">|+</span><br><span class="hljs-string"> Foo</span><br><span class="hljs-string"></span> <br><span class="hljs-attr">S3:</span> <span class="hljs-string">|-</span><br><span class="hljs-string"> Foo</span><br><span class="hljs-string"></span><span class="hljs-attr">s4:</span> <span class="hljs-string">|+</span><br> <span class="hljs-string">Foo</span><br></code></pre></td></tr></table></figure><p>转为 JavaScript 代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">s1</span>: <span class="hljs-string">&#x27;Foo\n&#x27;</span>, <span class="hljs-attr">s2</span>: <span class="hljs-string">&#x27;Foo\n\n&#x27;</span>, <span class="hljs-attr">s3</span>: <span class="hljs-string">&#x27;Foo&#x27;</span>, <span class="hljs-attr">s4</span>:<span class="hljs-string">&#x27;Foo\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>字符串之中可以插入 HTML 标记。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">message:</span> <span class="hljs-string">|</span><br><span class="hljs-string">  &lt;p style=&quot;color: red&quot;&gt;</span><br><span class="hljs-string">    段落</span><br><span class="hljs-string">  &lt;/p&gt;</span><br></code></pre></td></tr></table></figure><p>转为JavaScript如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;\n&lt;p style=&quot;color: red&quot;&gt;\n  段落\n&lt;/p&gt;\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">defaults: &amp;defaults<br>  <span class="hljs-attr">adapter</span>:  postgres<br>  <span class="hljs-attr">host</span>:     localhost<br><br><span class="hljs-attr">development</span>:<br>  database: myapp_development<br>  &lt;&lt;: *defaults<br><br><span class="hljs-attr">test</span>:<br>  database: myapp_test<br>  &lt;&lt;: *defaults<br></code></pre></td></tr></table></figure><p>等同于下面的代码。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">defaults:<br>  adapter:  postgres<br>  <span class="hljs-attr">host</span>:     localhost<br><br><span class="hljs-attr">development</span>:<br>  database: myapp_development<br>  <span class="hljs-attr">adapter</span>:  postgres<br>  <span class="hljs-attr">host</span>:     localhost<br><br><span class="hljs-attr">test</span>:<br>  database: myapp_test<br>  <span class="hljs-attr">adapter</span>:  postgres<br>  <span class="hljs-attr">host</span>:     localhost<br></code></pre></td></tr></table></figure><p><code>&amp;</code>用来建立锚点（<code>defaults</code>），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p><p>下面是另一个例子。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">- &amp;showell Steve <br>- Clark <br>- Brian <br>- Oren <br>- *showell <br></code></pre></td></tr></table></figure><p>转为 JavaScript 代码如下。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[ <span class="hljs-string">&#x27;Steve&#x27;</span>, <span class="hljs-string">&#x27;Clark&#x27;</span>, <span class="hljs-string">&#x27;Brian&#x27;</span>, <span class="hljs-string">&#x27;Oren&#x27;</span>, <span class="hljs-string">&#x27;Steve&#x27;</span> ]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>YAML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习</title>
    <link href="/2021/07/31/Git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/31/Git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1. Git基础"></a>1. Git基础</h2><h3 id="1-1-版本管理"><a href="#1-1-版本管理" class="headerlink" title="1.1 版本管理"></a>1.1 版本管理</h3><h4 id="1-1-1-什么是版本管理"><a href="#1-1-1-什么是版本管理" class="headerlink" title="1.1.1 什么是版本管理"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151949.png"></p><h4 id="1-1-2-人为维护文档版本的问题"><a href="#1-1-2-人为维护文档版本的问题" class="headerlink" title="1.1.2 人为维护文档版本的问题"></a>1.1.2 人为维护文档版本的问题</h4><ol><li><p>文档数量多且命名不清晰导致文档版本混乱</p></li><li><p>每次编辑文档需要复制，不方便</p></li><li><p>多人同时编辑同一个文档，容易产生覆盖</p></li></ol><p>   <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151953.png"></p><h3 id="1-2-Git-是什么"><a href="#1-2-Git-是什么" class="headerlink" title="1.2 Git 是什么"></a>1.2 Git 是什么</h3><p>   Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。</p><p>   <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152128.png"></p><h3 id="1-3-Git-安装"><a href="#1-3-Git-安装" class="headerlink" title="1.3 Git 安装"></a>1.3 Git 安装</h3><p>   <a href="https://git-scm.com/downloads">下载地址</a> </p><p>   在安装的过程中，所有选项使用默认值即可。</p><h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table><thead><tr><th>git仓库</th><th>暂存区</th><th>工作目录</th></tr></thead><tbody><tr><td>用于存放提交记录</td><td>临时存放被修改文件</td><td>被Git管理的项目目录</td></tr></tbody></table><p>   <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151946.png"></p><h3 id="1-5-Git-的使用"><a href="#1-5-Git-的使用" class="headerlink" title="1.5 Git 的使用"></a>1.5 Git 的使用</h3><h4 id="1-5-1-Git-使用前配置"><a href="#1-5-1-Git-使用前配置" class="headerlink" title="1.5.1 Git 使用前配置"></a>1.5.1 Git 使用前配置</h4><p>   在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p><ol><li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li><li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li><li>查看git配置信息：<code>git config --list</code>   </li></ol><p>   <strong>注意</strong></p><ol><li><p>如果要对配置信息进行修改，重复上述命令即可。</p></li><li><p>配置只需要执行一次。</p></li></ol><h4 id="1-5-2-提交步骤"><a href="#1-5-2-提交步骤" class="headerlink" title="1.5.2 提交步骤"></a>1.5.2 提交步骤</h4><ol><li><code>git init</code> 初始化git仓库</li><li><code>git status</code> 查看文件状态</li><li><code>git add 文件列表</code> 追踪文件</li><li><code>git commit -m 提交信息</code>  向仓库中提交代码</li><li><code>git log</code> 查看提交记录</li></ol><h4 id="1-5-3-撤销"><a href="#1-5-3-撤销" class="headerlink" title="1.5.3 撤销"></a>1.5.3 撤销</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p></li><li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p></li><li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p></li></ul><p>   <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151943.png"></p><h2 id="2-Git进阶"><a href="#2-Git进阶" class="headerlink" title="2. Git进阶"></a>2. Git进阶</h2><h3 id="2-1-分支"><a href="#2-1-分支" class="headerlink" title="2.1 分支"></a>2.1 分支</h3><p>   为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p><p>   使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p><p>   <img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151941.png"></p><h4 id="2-1-1-分支细分"><a href="#2-1-1-分支细分" class="headerlink" title="2.1.1 分支细分"></a>2.1.1 分支细分</h4><ol><li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152137.png"></p></li><li><p>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152139.png"></p></li><li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152144.png"></p></li></ol><p>   <strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p><h4 id="2-1-2-分支命令"><a href="#2-1-2-分支命令" class="headerlink" title="2.1.2 分支命令"></a>2.1.2 分支命令</h4><ul><li><code>git branch</code> 查看分支</li><li><code>git branch 分支名称</code> 创建分支</li><li><code>git checkout 分支名称</code> 切换分支 (切换分支之前需要提交)</li><li><code>git merge 来源分支</code> 合并分支（如果存在两个分支，dev和master，如果想要将dev分支的内容合并到master分支上，此时首先要回到master分支，然后再使用命令 git merge dev，而且dev分支依旧存在） PS：之后还需要 <code>git push</code> 将代码推送到云端。</li><li><code>git push -u origin 分支名称</code> 首先要在本地切换到分支，然后执行该命令，在远程新建分支并推送分支的代码。</li><li><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</li></ul><h3 id="2-2-暂时保存更改"><a href="#2-2-暂时保存更改" class="headerlink" title="2.2 暂时保存更改"></a>2.2 暂时保存更改</h3><p>   在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p><p>   使用场景：分支临时切换</p><ul><li><p>存储临时改动：<code>git stash</code> </p><p>使用git add后将文件添加到暂存区后，还没有commit提交。此时使用git stash，将当前分支所有改动剪切到git的剪切板中，文件会回到之前的状态。如果使用git status，会发现显示的是noting to commit，因此便可以切换分支。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224217.png" alt="image-20210731224217165"></p></li><li><p>恢复改动：<code>git stash pop</code></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224421.png" alt="image-20210731224359238"></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用正则格式化时间</title>
    <link href="/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/"/>
    <url>/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>具体的原理我也不太懂，但是能用就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dateFormat</span>(<span class="hljs-params">date, format</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> date === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-keyword">var</span> mts = date.match(<span class="hljs-regexp">/(\/Date\((\d+)\)\/)/</span>);<br>      <span class="hljs-keyword">if</span> (mts &amp;&amp; mts.length &gt;= <span class="hljs-number">3</span>) &#123;<br>        date = <span class="hljs-built_in">parseInt</span>(mts[<span class="hljs-number">2</span>]);<br>      &#125;<br>    &#125;<br>    date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date);<br>    <span class="hljs-keyword">if</span> (!date || date.toUTCString() == <span class="hljs-string">&quot;Invalid Date&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> map = &#123;<br>      <span class="hljs-string">&quot;M&quot;</span>: date.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份 </span><br>      <span class="hljs-string">&quot;d&quot;</span>: date.getDate(), <span class="hljs-comment">//日 </span><br>      <span class="hljs-string">&quot;h&quot;</span>: date.getHours(), <span class="hljs-comment">//小时 </span><br>      <span class="hljs-string">&quot;m&quot;</span>: date.getMinutes(), <span class="hljs-comment">//分 </span><br>      <span class="hljs-string">&quot;s&quot;</span>: date.getSeconds(), <span class="hljs-comment">//秒 </span><br>      <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-built_in">Math</span>.floor((date.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度 </span><br>      <span class="hljs-string">&quot;S&quot;</span>: date.getMilliseconds() <span class="hljs-comment">//毫秒 </span><br>    &#125;;<br>    format = format.replace(<span class="hljs-regexp">/([yMdhmsqS])+/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">all, t</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> v = map[t];<br>      <span class="hljs-keyword">if</span> (v !== <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">if</span> (all.length &gt; <span class="hljs-number">1</span>) &#123;<br>          v = <span class="hljs-string">&#x27;0&#x27;</span> + v;<br>          v = v.substr(v.length - <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> v;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t === <span class="hljs-string">&#x27;y&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> (date.getFullYear() + <span class="hljs-string">&#x27;&#x27;</span>).substr(<span class="hljs-number">4</span> - all.length);<br>      &#125;<br>      <span class="hljs-keyword">return</span> all;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> format;<br>  &#125;<br><br><br><br><span class="hljs-built_in">console</span>.log(dateFormat(<span class="hljs-built_in">Date</span>.now(),<span class="hljs-string">&#x27;yyyy&#x27;</span>));  <span class="hljs-comment">//2021</span><br><span class="hljs-built_in">console</span>.log(dateFormat(<span class="hljs-built_in">Date</span>.now(),<span class="hljs-string">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class="hljs-comment">//2021-07-31 11:41</span><br><span class="hljs-built_in">console</span>.log(dateFormat(<span class="hljs-number">1627702957686</span>,<span class="hljs-string">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class="hljs-comment">//2021-07-31 11:41</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue小案例--图书管理系统</title>
    <link href="/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h1><h2 id="1-图书列表"><a href="#1-图书列表" class="headerlink" title="1. 图书列表"></a>1. 图书列表</h2><p>⚫ 实现静态列表效果<br>⚫ 基于数据实现模板效果<br>⚫ 处里每行的操作按钮  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730181123.png" alt="image-20210730181114909"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">th</span>,</span><br><span class="css">    <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">10</span>;</span><br><span class="css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed orange;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">35px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">books</span>: [&#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;红楼梦&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;]</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-添加图书"><a href="#2-添加图书" class="headerlink" title="2. 添加图书"></a>2. 添加图书</h2><p>⚫ 实现表单的静态效果<br>⚫ 添加图书表单域数据绑定<br>⚫ 添加按钮事件绑定<br>⚫ 实现添加业务逻辑  </p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730182423.png" alt="image-20210730182422489"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;id&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;book in books&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">books</span>: [&#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;红楼梦&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;]</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 添加图书</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> book=&#123;&#125;;</span><br><span class="javascript">        book.id=<span class="hljs-built_in">this</span>.id;</span><br><span class="javascript">        book.name=<span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.books.push(book);</span><br><span class="javascript">        <span class="hljs-comment">// 清空input输入域</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.id=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-修改图书"><a href="#3-修改图书" class="headerlink" title="3. 修改图书"></a>3. 修改图书</h2><p>⚫ 修改信息填充到表单<br>⚫ 修改后重新提交表单<br>⚫ 重用添加和修改的方法  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&#x27;flag&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;book in books&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">books</span>: [&#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;红楼梦&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;],</span><br><span class="javascript">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flag) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 如果表单中的id与数据中的id相同</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (item.id == <span class="hljs-built_in">this</span>.id) &#123;</span><br><span class="javascript">              item.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">              <span class="hljs-comment">// 允许输入</span></span><br><span class="javascript">              <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">              <span class="hljs-keyword">return</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 添加图书</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> book = &#123;&#125;;</span><br><span class="javascript">          book.id = <span class="hljs-built_in">this</span>.id;</span><br><span class="javascript">          book.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.push(book);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">// 清空input输入域</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.id = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">id</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.books.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.id = item.id;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = item.name;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-删除图书"><a href="#4-删除图书" class="headerlink" title="4.删除图书"></a>4.删除图书</h2><p>⚫ 删除按钮绑定事件处理方法<br>⚫ 实现删除业务逻辑  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&#x27;flag&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;book in books&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">books</span>: [&#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;红楼梦&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;],</span><br><span class="javascript">      <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flag) &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 如果表单中的id与数据中的id相同</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (item.id == <span class="hljs-built_in">this</span>.id) &#123;</span><br><span class="javascript">              item.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">              <span class="hljs-comment">// 允许输入</span></span><br><span class="javascript">              <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">              <span class="hljs-built_in">console</span>.log(item.id);</span><br><span class="javascript">              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 添加图书</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> book = &#123;&#125;;</span><br><span class="javascript">          book.id = <span class="hljs-built_in">this</span>.id;</span><br><span class="javascript">          book.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.push(book);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">// 清空input输入域</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.id = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">id</span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.id = item.id;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = item.name;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params">id</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span>(item.id==id)&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.books.splice(index,<span class="hljs-number">1</span>);</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>经过测试，使用forEach方法，如果已经匹配到了想要的数组元素，用return 是无法退出遍历的。因此，使用some方法更为恰当，当匹配到所需元素时，return true即可退出遍历。</p><h2 id="5-常用特性应用场景"><a href="#5-常用特性应用场景" class="headerlink" title="5.常用特性应用场景"></a>5.常用特性应用场景</h2><p>⚫ 过滤器（格式化日期）<br>⚫ 自定义指令（获取表单焦点）<br>⚫ 计算属性（统计图书数量）<br>⚫ 侦听器（验证图书存在性）<br>⚫ 生命周期（图书数据处理）  </p><p><a href="https://jiaqicoder.com/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/">使用正则格式化时间</a></p><p>最终代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">530px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#C2D89A</span>;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">th</span>,</span><br><span class="css">    <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">10</span>;</span><br><span class="css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#F3DCAB</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">35px</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F3DCAB</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-class">.book</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F3DCAB</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-class">.total</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">80px</span>;</span><br><span class="css">      <span class="hljs-attribute">text-align</span>: left;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F3DCAB</span>;</span><br><span class="css">      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#C2D89A</span>;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.grid</span> <span class="hljs-selector-class">.total</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">202</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0.644</span>);</span><br><span class="css">    &#125;</span><br><span class="css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>              编号：<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-attr">v-focus</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>              名称：<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;handle&#x27;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&#x27;submitFlag&#x27;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;total&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>图书总数: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;totalofbook&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;err&#x27;</span>&gt;</span>&#123;&#123;errMessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;book in books&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;book.id&#x27;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;book.date | format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-comment">&lt;!-- 禁用页面刷新 --&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    Vue.filter(<span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">date, format</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> date === <span class="hljs-string">&quot;string&quot;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mts = date.match(<span class="hljs-regexp">/(\/Date\((\d+)\)\/)/</span>);</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (mts &amp;&amp; mts.length &gt;= <span class="hljs-number">3</span>) &#123;</span><br><span class="javascript">          date = <span class="hljs-built_in">parseInt</span>(mts[<span class="hljs-number">2</span>]);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date);</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!date || date.toUTCString() == <span class="hljs-string">&quot;Invalid Date&quot;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> map = &#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;M&quot;</span>: date.getMonth() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;d&quot;</span>: date.getDate(), <span class="hljs-comment">//日 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;h&quot;</span>: date.getHours(), <span class="hljs-comment">//小时 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;m&quot;</span>: date.getMinutes(), <span class="hljs-comment">//分 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;s&quot;</span>: date.getSeconds(), <span class="hljs-comment">//秒 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-built_in">Math</span>.floor((date.getMonth() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度 </span></span><br><span class="javascript">        <span class="hljs-string">&quot;S&quot;</span>: date.getMilliseconds() <span class="hljs-comment">//毫秒 </span></span><br><span class="javascript">      &#125;;</span><br><span class="javascript">      format = format.replace(<span class="hljs-regexp">/([yMdhmsqS])+/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">all, t</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> v = map[t];</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (v !== <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (all.length &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="javascript">            v = <span class="hljs-string">&#x27;0&#x27;</span> + v;</span><br><span class="javascript">            v = v.substr(v.length - <span class="hljs-number">2</span>);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> v;</span><br><span class="javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t === <span class="hljs-string">&#x27;y&#x27;</span>) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> (date.getFullYear() + <span class="hljs-string">&#x27;&#x27;</span>).substr(<span class="hljs-number">4</span> - all.length);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> all;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      <span class="hljs-keyword">return</span> format;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="javascript">      <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;</span><br><span class="javascript">        el.focus();</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">books</span>: [],</span><br><span class="javascript">        <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        <span class="hljs-attr">submitFlag</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        <span class="hljs-attr">err</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        <span class="hljs-attr">errMessage</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flag) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">              <span class="hljs-comment">// 如果表单中的id与数据中的id相同</span></span><br><span class="javascript">              <span class="hljs-keyword">if</span> (item.id == <span class="hljs-built_in">this</span>.id) &#123;</span><br><span class="javascript">                item.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">                <span class="hljs-comment">// 允许输入</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(item.id);</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 添加图书</span></span><br><span class="javascript">            <span class="hljs-keyword">let</span> book = &#123;&#125;;</span><br><span class="javascript">            book.id = <span class="hljs-built_in">this</span>.id;</span><br><span class="javascript">            book.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.books.push(book);</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-comment">// 清空input输入域</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.id = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">edit</span>(<span class="hljs-params">id</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.id = item.id;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.name = item.name;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params">id</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (item.id == id) &#123;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.books.splice(index, <span class="hljs-number">1</span>);</span><br><span class="javascript">              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">totalofbook</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.books.length;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 验证图书名称是否存在</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.books.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (value == item.name) &#123;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.submitFlag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.err = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              <span class="hljs-built_in">this</span>.errMessage = <span class="hljs-string">&#x27;图书名称已存在&#x27;</span></span><br><span class="javascript">              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-comment">// 该生命周期钩子函数被触发的时候</span></span><br><span class="javascript">      <span class="hljs-comment">// 一般此时用于获取后台数据，然后把数据填充在模板</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> data=[&#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;三国演义&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-built_in">Date</span>.now()</span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;水浒传&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-number">962770087686</span></span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;红楼梦&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-number">999778657686</span></span><br><span class="javascript">        &#125;, &#123;</span><br><span class="javascript">          <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西游记&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">date</span>: <span class="hljs-number">162770298686</span></span><br><span class="javascript">        &#125;];</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.books=data;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731144306.png" alt="image-20210731144257953"></p>]]></content>
    
    
    
    <tags>
      
      <tag>VUE</tag>
      
      <tag>案例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2021/07/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>笔记基于：<a href="https://www.runoob.com/vue2/">https://www.runoob.com/vue2/</a></p><h1 id="Vue起步"><a href="#Vue起步" class="headerlink" title="Vue起步"></a>Vue起步</h1><p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p><p>语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">site</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;www.runoob.com&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">alexa</span>: <span class="hljs-string">&quot;10000&quot;</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">details</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>.site + <span class="hljs-string">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 app，在 div 元素中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p><p>接下来我们看看如何定义数据对象。</p><p><strong>data</strong> 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p><p><strong>methods</strong> 用于定义的函数，可以通过 return 来返回函数值。</p><p><code>&#123;&#123; &#125;&#125;</code> 用于输出对象属性和函数返回值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue_det&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。</p><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vue_det&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 我们的数据对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">site</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;www.runoob.com&quot;</span>, <span class="hljs-attr">alexa</span>: <span class="hljs-number">10000</span>&#125;</span><br><span class="javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vue_det&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: data</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 它们引用相同的对象！</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(vm.site === data.site) <span class="hljs-comment">// true</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="javascript"><span class="hljs-comment">// 设置属性也会影响到原始数据</span></span><br><span class="javascript">vm.site = <span class="hljs-string">&quot;Runoob&quot;</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(data.site + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>) <span class="hljs-comment">// Runoob</span></span><br><span class="javascript"> </span><br><span class="javascript"><span class="hljs-comment">// ……反之亦然</span></span><br><span class="javascript">data.alexa = <span class="hljs-number">1234</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(vm.alexa) <span class="hljs-comment">// 1234</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;vue_det&quot;</span>&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>// 我们的数据对象<br>var data = &#123; site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000&#125;<br>var vm = new Vue(&#123;<br>    el: &#x27;#vue_det&#x27;,<br>    data: data<br>&#125;)<br>// 它们引用相同的对象！<br>document.write(vm.site === data.site) // true<br>document.write(&quot;&lt;br&gt;&quot;)<br>// 设置属性也会影响到原始数据<br>vm.site = &quot;Runoob&quot;<br>document.write(data.site + &quot;&lt;br&gt;&quot;) // Runoob<br> <br>// ……反之亦然<br>data.alexa = 1234<br>document.write(vm.alexa) // 1234<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p><p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p><p>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>数据绑定最常见的形式就是使用 <code>&#123;&#123;...&#125;&#125;</code>（双大括号）的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="html和text"><a href="#html和text" class="headerlink" title="html和text"></a>html和text</h3><p> 使用 v-html 指令用于输出 html 代码，使用v-text用于输出text代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727192921.png" alt="image-20210727192913338"></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>HTML 属性中的值应使用 v-bind 指令。</p><p>以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.class1</span>&#123;</span><br><span class="css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#444</span>;</span><br><span class="css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;r1&quot;</span>&gt;</span>修改颜色<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;use&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;r1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;&#x27;class1&#x27;: use&#125;&quot;</span>&gt;</span><br>    v-bind:class 指令<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">use</span>: <span class="hljs-literal">false</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727193400.png" alt="image-20210727193358942"></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>Vue.js 都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;5+5&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>菜鸟教程<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">ok</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;RUNOOB&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">id</span> : <span class="hljs-number">1</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令是带有 v- 前缀的特殊属性。</p><p>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p><p>另一个例子是 v-on 指令，它用于监听 DOM 事件：监听</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符是以半角句号 <strong>.</strong> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 <strong>v-on</strong> 指令对于触发的事件调用 **event.preventDefault()**：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;form v-on:submit.prevent=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob!&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用v-model会将input等输入框的value发生变化，会将其值传给Vue实例data的message属性，同时如果Vue实例的message发生变化，也会将数据更新表单的value。</p><p><strong>v-model</strong> 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”指示, 格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在两个大括号中 --&gt;</span><br>&#123;&#123; message | capitalize &#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 在 v-bind 指令中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>过滤器函数接受表达式的值作为第一个参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message | capitalize &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript"><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;runoob&#x27;</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">filters</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">capitalize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      value = value.toString()</span><br><span class="javascript">      <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase() + value.slice(<span class="hljs-number">1</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a>v-on 缩写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>&lt;/a<br></code></pre></td></tr></table></figure><h1 id="Vue-js-条件和循环语句"><a href="#Vue-js-条件和循环语句" class="headerlink" title="Vue.js 条件和循环语句"></a>Vue.js 条件和循环语句</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断使用 v-if 指令：</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>可以用 v-else 指令给 v-if 添加一个 “else” 块：</p><p>随机生成一个数字，判断是否大于0.5，然后输出对应信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>      Sorry<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>      Not sorry<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>用作 v-if 的 else-if 块，可以链式的多次使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>      A<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>      B<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>      C<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>      Not A/B/C<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;C&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p></blockquote><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p><ul><li>v-if</li><li> v-show  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;flag=!flag&#x27;</span>&gt;</span>Toggle Flag<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;flag&#x27;</span>&gt;</span>显示：v-if<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;flag&#x27;</span>&gt;</span>显示：v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 用来控制元素的隐藏和显示</span></span><br><span class="javascript">            <span class="hljs-attr">flag</span>:<span class="hljs-literal">true</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-if 和 v-show 的区别</p><p>1.实现原理不同：</p><p> v-if 指令会动态地创建或移除 DOM 元素，从而控制元素在页面上的显示与隐藏；</p><p> v-show 指令会动态为元素添加或移除 style=”display: none;” 样式，从而控制元素的显示与隐藏；</p><p>2.性能消耗不同：</p><p>v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。</p><ul><li><p>如果需要非常频繁地切换，则使用 v-show 较好</p></li><li><p>如果在运行时条件很少改变，则使用 v-if 较好  </p></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环使用 v-for 指令。v-for 指令需要以 <strong>site in sites</strong> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p><h3 id="v-for-遍历数组"><a href="#v-for-遍历数组" class="headerlink" title="v-for 遍历数组"></a>v-for 遍历数组</h3><p>v-for 可以绑定数据到数组来渲染一个列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;site in sites&quot;</span>&gt;</span><br>      &#123;&#123; site.name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">sites</span>: [</span><br><span class="javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span> &#125;,</span><br><span class="javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Google&#x27;</span> &#125;,</span><br><span class="javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Taobao&#x27;</span> &#125;</span><br><span class="javascript">    ]</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727232652.png" alt="image-20210727232644828"></p><h3 id="v-for迭代对象"><a href="#v-for迭代对象" class="headerlink" title="v-for迭代对象"></a>v-for迭代对象</h3><p>v-for 可以通过一个对象的属性来迭代数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in object&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">object</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;菜鸟教程&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">slogan</span>: <span class="hljs-string">&#x27;学的不仅是技术，更是梦想！&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以提供第二个的参数为键名，第三个参数为索引。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key, index) in object&quot;</span>&gt;</span><br>     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-for迭代整数"><a href="#v-for迭代整数" class="headerlink" title="v-for迭代整数"></a>v-for迭代整数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span>&gt;</span><br>     &#123;&#123; n &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用-key-维护列表的状态"><a href="#使用-key-维护列表的状态" class="headerlink" title="使用 key 维护列表的状态"></a>使用 key 维护列表的状态</h2><p>当<strong>列表的数据变化</strong>时，默认情况下，vue <strong>会尽可能的复用</strong>已存在的 DOM 元素，从而提升渲染的性能。但这种默认的性能优化策略，会导致有状态的列表无法被正确更新。<br>为了给 vue 一个提示，以便它能跟踪每个节点的身份，从而在保<strong>证有状态的列表被正确更新</strong>的前提下，<strong>提升渲染的性能</strong>。此时，需要为每项提供一个唯一的 key 属性：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,index) in userlist&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;user.id&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    姓名：&#123;&#123;user.name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用key的注意事项：</p><p>① key 的值只能是字符串或数字类型</p><p>② key 的值必须具有唯一性（即：key 的值不能重复）</p><p>③ 建议把数据项 id 属性的值作为 key 的值（因为 id 属性的值具有唯一性）</p><p>④ <strong>使用 index 的值当作 key 的值没有任何意义</strong>（因为 index 的值不具有唯一性）</p><p>⑤ 建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）  </p><h1 id="Vue-js-计算属性"><a href="#Vue-js-计算属性" class="headerlink" title="Vue.js 计算属性"></a>Vue.js 计算属性</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>计算属性关键词: <strong>computed</strong>。计算属性在处理一些复杂逻辑时是很有用的。可以看下以下反转字符串的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 上述例子变得很复杂，也不容易看懂理解。</p><p>接着，让我们看看使用计算属性的实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob!&#x27;</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 计算属性的 getter</span></span><br><span class="javascript">    <span class="hljs-attr">reversedMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// `this` 指向 vm 实例</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述例子 中声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。</p><p>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。</p><h2 id="computed-vs-methods"><a href="#computed-vs-methods" class="headerlink" title="computed vs methods"></a>computed vs methods</h2><p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>使用方法后反转字符串: &#123;&#123; reversedMessage2() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob!&#x27;</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 计算属性的 getter</span></span><br><span class="javascript">    <span class="hljs-attr">reversedMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// `this` 指向 vm 实例</span></span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">reversedMessage2</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message.split(<span class="hljs-string">&#x27;&#x27;</span>).reverse().join(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>关于getter和setter，<a href="https://jiaqicoder.com/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7-getter%E5%92%8Csetter">点击查看</a></p></blockquote><h2 id="computed-setter"><a href="#computed-setter" class="headerlink" title="computed setter"></a>computed setter</h2><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Google&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://www.google.com&#x27;</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">site</span>:&#123;</span><br><span class="javascript">        <span class="hljs-comment">// getter</span></span><br><span class="javascript">        <span class="hljs-attr">get</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name+<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-built_in">this</span>.url;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-comment">// setter</span></span><br><span class="javascript">        <span class="hljs-attr">set</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>)</span>&#123;</span><br><span class="javascript">          [<span class="hljs-built_in">this</span>.name,<span class="hljs-built_in">this</span>.url]=newValue.split(<span class="hljs-string">&#x27; &#x27;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">// 1s 后页面上的site将会发生变化</span></span><br><span class="javascript">  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="javascript">    vm.site=<span class="hljs-string">&#x27;jiaqi https://www.jiaqicoder.com&#x27;</span></span><br><span class="javascript">  &#125;,<span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue-js-监听属性"><a href="#Vue-js-监听属性" class="headerlink" title="Vue.js 监听属性"></a>Vue.js 监听属性</h1><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;counter++&#x27;</span>&gt;</span>按我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">counter</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">      <span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">counter</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.text=<span class="hljs-string">`counter从<span class="hljs-subst">$&#123;oldValue&#125;</span>变为<span class="hljs-subst">$&#123;newValue&#125;</span>`</span>;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728001253.gif" alt="动1"></p><p>以下实例进行<strong>华氏度</strong>与<strong>摄氏度</strong>之间的换算：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  华氏度: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&#x27;fahrenheit=$event.target.value&#x27;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;fahrenheit&#x27;</span>&gt;</span><br>  摄氏度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&#x27;celsius=$event.target.value&#x27;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;celsius&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">fahrenheit</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">celsius</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">fahrenheit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.celsius = ((value - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span>).toFixed(<span class="hljs-number">2</span>);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">celsius</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.fahrenheit = (value * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span>).toFixed(<span class="hljs-number">2</span>);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728004031.gif" alt="动2"></p><h1 id="Vue-js-样式绑定"><a href="#Vue-js-样式绑定" class="headerlink" title="Vue.js 样式绑定"></a>Vue.js 样式绑定</h1><h2 id="Vue-js-class"><a href="#Vue-js-class" class="headerlink" title="Vue.js class"></a>Vue.js class</h2><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。</p><p>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p><h2 id="class属性绑定"><a href="#class属性绑定" class="headerlink" title="class属性绑定"></a>class属性绑定</h2><p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果isActive的值为true，则上面的代码相当于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们也可以直接绑定一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">classObject</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外，我们也可以在这里绑定返回对象的计算属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">    <span class="hljs-attr">error</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;fatal&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">classObject</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">  <span class="hljs-attr">base</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">        <span class="hljs-attr">active</span>: <span class="hljs-built_in">this</span>.isActive &amp;&amp; !<span class="hljs-built_in">this</span>.error.value,</span><br><span class="javascript">        <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-built_in">this</span>.error.value &amp;&amp; <span class="hljs-built_in">this</span>.error.type === <span class="hljs-string">&#x27;fatal&#x27;</span>,</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们可以把一个数组传给 <strong>v-bind:class</strong> ，实例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们还可以使用三元表达式来切换列表中的 class ：errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[errorClass ,isActive ? activeClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue-js-style-内联样式"><a href="#Vue-js-style-内联样式" class="headerlink" title="Vue.js style 内联样式"></a>Vue.js style 内联样式</h2><p>我们可以在 <strong>v-bind:style</strong> 直接设置样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>菜鸟教程<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以直接绑定到一个样式对象，让模板更清晰：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;</span>菜鸟教程<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">styleObject</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;green&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;30px&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-bind:style 可以使用数组将多个样式对象应用到一个元素上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span>菜鸟教程<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue-js-事件处理器"><a href="#Vue-js-事件处理器" class="headerlink" title="Vue.js 事件处理器"></a>Vue.js 事件处理器</h1><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>事件监听可以使用 v-on 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-on 可以接收一个定义的方法来调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Vue.js&#x27;</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-comment">// 在 `methods` 对象中定义方法</span></span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">greet</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// `this` 在方法里指当前 Vue 实例</span></span><br><span class="javascript">      alert(<span class="hljs-string">&#x27;Hello &#x27;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;!&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-comment">// `event` 是原生 DOM 事件</span></span><br><span class="javascript">      <span class="hljs-keyword">if</span> (event) &#123;</span><br><span class="javascript">          alert(event.target.tagName)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 也可以用 JavaScript 直接调用方法</span></span><br><span class="javascript">app.greet() <span class="hljs-comment">// -&gt; &#x27;Hello Vue.js!&#x27;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">say</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) </span>&#123;</span><br><span class="javascript">      alert(message)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在原生的 DOM 事件绑定中，可以在事件处理函数的形参处，接收事件对象 event。同理，在 <code>v-on</code> 指令（简写为 @ ）所绑定的事件处理函数中，同样可以接收到事件对象 event，示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>count的值为&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;addCount&#x27;</span>&gt;</span>++<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.count++;</span><br><span class="javascript">                e.target.style.backgroundColor=<span class="hljs-string">&#x27;blue&#x27;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绑定事件并传参"><a href="#绑定事件并传参" class="headerlink" title="绑定事件并传参"></a>绑定事件并传参</h2><p>在使用 v-on 指令绑定事件时，可以使用 ( ) 进行传参。**$event 是 vue 提供的特殊变量，用来表示原生的事件参数对象 event。$event 可以解决事件参数对象 event被覆盖的问题。**示例用法如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>count的值为&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;addCount(2,$event)&#x27;</span>&gt;</span>+2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params">step,e</span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.count+=step;</span><br><span class="javascript">                e.target.style.backgroundColor = <span class="hljs-string">&#x27;blue&#x27;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p><p>Vue.js 通过由点 <strong>.</strong> 表示的指令后缀来调用修饰符。</p><ul><li><code>.stop</code> - 阻止冒泡</li><li><code>.prevent</code> - 阻止默认事件</li><li><code>.capture</code> - 阻止捕获</li><li><code>.self</code> - 只监听触发该元素的事件</li><li><code>.once</code> - 只触发一次</li><li><code>.left</code> - 左键事件</li><li><code>.right</code> - 右键事件</li><li><code>.middle</code> - 中间滚轮事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只有修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.13</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 同上 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 缩写语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- Alt + C --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.alt.67</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Ctrl + Click --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.ctrl</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue-js-表单"><a href="#Vue-js-表单" class="headerlink" title="Vue.js 表单"></a>Vue.js 表单</h1><p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728105745.png" alt="img"></p><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p>实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>input 元素：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;编辑我……&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>textarea 元素：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message2&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;多行文本输入……&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">message2</span>: <span class="hljs-string">&#x27;菜鸟教程\r\nhttp://www.runoob.com&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>单个复选框：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hhhhhh&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>多个复选框：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runoob&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Rob&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;runoob&quot;</span>&gt;</span>Runoob<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;google&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Google&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;google&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;taobao&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Taobao&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;taobao&quot;</span>&gt;</span>taobao<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">checked</span> : <span class="hljs-literal">false</span>,</span><br><span class="javascript">    <span class="hljs-attr">checkedNames</span>: []</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728114757.png" alt="image-20210728114748599"></p><p>可见，如果复选框只有一个，通过v-model绑定的checked的值为true或者false，而复选框有多个时，v-model绑定的checkedNames的值为input的value，且checkedNames是一个数组。</p><h3 id="select列表"><a href="#select列表" class="headerlink" title="select列表"></a>select列表</h3><p>注意：此时的v-model 添加在select上面，而非option上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;selected&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择一个网站<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.google.com&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选择的网站为 &#123;&#123;selected&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;0.vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">selected</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728115637.png" alt="image-20210728115636548"></p><h2 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h3><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><h3 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h3><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这通常很有用，因为在 type=”number” 时 HTML 中输入的值也总是会返回字符串类型。</p><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue-js-组件"><a href="#Vue-js-组件" class="headerlink" title="Vue.js 组件"></a>Vue.js 组件</h1><p>组件（Component）是 Vue.js 最强大的功能之一。</p><p>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728120331.png" alt="img"></p><p>注册一个全局组件语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(tagName, options)<br></code></pre></td></tr></table></figure><p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tagName</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tagName</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>所有实例都能用全局组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 组件注册</span></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript"></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>局部组件</p><p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 组件注册</span></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">components</span>:&#123;</span><br><span class="javascript">      <span class="hljs-comment">// 只能在父模板中使用</span></span><br><span class="javascript">      <span class="hljs-string">&#x27;hello&#x27;</span>:&#123;</span><br><span class="javascript">        <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;h1&gt;笑死我么&lt;/h1&gt;&#x27;</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><p>prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。**父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”**。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">message</span>=<span class="hljs-string">&#x27;hello&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 组件注册</span></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;child&#x27;</span>,&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 声明props</span></span><br><span class="javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;message&#x27;</span>],</span><br><span class="javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态prop"><a href="#动态prop" class="headerlink" title="动态prop"></a>动态prop</h2><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件。</p><p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">v-bind:message</span>=<span class="hljs-string">&#x27;parentMsg&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 组件注册</span></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;child&#x27;</span>,&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 声明props</span></span><br><span class="javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;message&#x27;</span>],</span><br><span class="javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">parentMsg</span>:<span class="hljs-string">&#x27;父组件内容aa&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">todo-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item) in sites&#x27;</span> <span class="hljs-attr">v-bind:todo</span>=<span class="hljs-string">item.text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">todo-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 组件注册</span></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="javascript">    <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;todo&#x27;</span>],</span><br><span class="javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;&lt;li&gt;&#123;&#123;todo&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">sites</span>:[</span><br><span class="javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;jiaqi&#x27;</span>&#125;,</span><br><span class="javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;google&#x27;</span>&#125;,</span><br><span class="javascript">        &#123;<span class="hljs-attr">text</span>:<span class="hljs-string">&#x27;taobao&#x27;</span>&#125;</span><br><span class="javascript">      ]</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    </span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h2><p>组件可以为 props 指定验证要求。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p><p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.component(<span class="hljs-string">&#x27;my-component&#x27;</span>,&#123;<br>  <span class="hljs-attr">props</span>:&#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class="hljs-attr">propA</span>:<span class="hljs-built_in">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>:[<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>:&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-built_in">String</span>,<br>      <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>:&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-built_in">Number</span>,<br>      <span class="hljs-attr">default</span>:<span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-comment">// 对象或数组的默认值必须从一个工厂函数中获取</span><br>    <span class="hljs-attr">propE</span>:&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-built_in">Object</span>,<br>      <span class="hljs-attr">default</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">hello</span>:<span class="hljs-string">&#x27;hello&#x27;</span>&#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>:&#123;<br>      <span class="hljs-attr">validator</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;<br>        <span class="hljs-comment">// 这个值必须从下面的字符串中选择一个</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>,<span class="hljs-string">&#x27;warning&#x27;</span>,<span class="hljs-string">&#x27;danger&#x27;</span>].indexOf(value)!==-<span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>type 可以是下面原生构造器：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>type 也可以是一个自定义构造器，使用 instanceof 检测。</p><h1 id="Vue组件-自定义事件"><a href="#Vue组件-自定义事件" class="headerlink" title="Vue组件- 自定义事件"></a>Vue组件- 自定义事件</h1><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p><p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p><ul><li>使用 <code>$on(eventName)</code> 监听事件</li><li>使用 <code>$emit(eventName)</code> 触发事件</li></ul><p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;counter-event-example&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span> <span class="hljs-attr">v-on:increment</span>=<span class="hljs-string">&quot;incrementTotal&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span> <span class="hljs-attr">v-on:increment</span>=<span class="hljs-string">&quot;incrementTotal&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.component(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="javascript">  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">incrementHandler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.counter += <span class="hljs-number">1</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;increment&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#counter-event-example&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">total</span>: <span class="hljs-number">0</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">incrementTotal</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.total += <span class="hljs-number">1</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-on:click.native</span>=<span class="hljs-string">&quot;doTheThing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123;total&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&#x27;dosome&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;my-component&#x27;</span>,&#123;</span><br><span class="javascript">    <span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;button&gt;按我&lt;botton&gt;`</span></span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">total</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">dosome</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.total++;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a>data 必须是一个函数</h2><p>上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;components-demo3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> buttonCounter2Data = &#123;</span><br><span class="javascript">  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">Vue.component(<span class="hljs-string">&#x27;button-counter2&#x27;</span>, &#123;</span><br><span class="javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">    data: function () &#123;</span></span><br><span class="hljs-comment"><span class="javascript">        // data 选项是一个函数，组件不相互影响</span></span><br><span class="hljs-comment"><span class="javascript">        return &#123;</span></span><br><span class="hljs-comment"><span class="javascript">            count: 0</span></span><br><span class="hljs-comment"><span class="javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="javascript">    &#125;,</span></span><br><span class="hljs-comment"><span class="javascript">    */</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// data 选项是一个对象，会影响到其他实例</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> buttonCounter2Data</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;点击了 &#123;&#123; count &#125;&#125; 次。&lt;/button&gt;&#x27;</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123; <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#components-demo3&#x27;</span> &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="自定义组件的v-model"><a href="#自定义组件的v-model" class="headerlink" title="自定义组件的v-model"></a>自定义组件的v-model</h2><p><strong>组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;parentData&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;parentData&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;parentData = $event.target.value&quot;</span></span><br><span class="hljs-tag">&gt;</span><br></code></pre></td></tr></table></figure><p>以下实例自定义组件 runoob-input，父组件的 num 的初始值是 100，更改子组件的值能实时更新父组件的 num：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">runoob-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">runoob-input</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输入的数字为:&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">Vue.component(&#x27;runoob-input&#x27;, &#123;</span></span><br><span class="xml"><span class="handlebars">    template: `</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 包含了名为 input 的事件 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span></span><br><span class="hljs-tag"><span class="xml"><span class="handlebars">       <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input&quot;</span></span></span></span><br><span class="hljs-tag"><span class="xml"><span class="handlebars">       <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> </span></span></span><br><span class="hljs-tag"><span class="xml"><span class="handlebars">       @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class="hljs-tag"><span class="xml"><span class="handlebars">      &gt;</span></span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    `,</span></span><br><span class="xml"><span class="handlebars">    props: [&#x27;value&#x27;], // 名为 value 的 prop</span></span><br><span class="xml"><span class="handlebars">&#125;)</span></span><br><span class="xml"><span class="handlebars">   </span></span><br><span class="xml"><span class="handlebars">new Vue(&#123;</span></span><br><span class="xml"><span class="handlebars">    el: &#x27;#app&#x27;,</span></span><br><span class="xml"><span class="handlebars">    data: &#123;</span></span><br><span class="xml"><span class="handlebars">        num: 100,</span></span><br><span class="xml"><span class="handlebars">    &#125;</span></span><br><span class="xml"><span class="handlebars">&#125;)</span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于 v-model 默认传的是 value，不是 checked，所以对于复选框或者单选框的组件时，我们需要使用 model 选项，model 选项可以指定当前的事件类型和传入的 props。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lovingVue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base-checkbox</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;lovingVue&quot;</span>&gt;</span> <br>        如果选择框打勾我就会显示。 <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 注册</span></span><br><span class="javascript">Vue.component(<span class="hljs-string">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class="javascript"> </span><br><span class="javascript">  <span class="hljs-attr">model</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;checked&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span>  <span class="hljs-comment">// onchange 事件</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">checked</span>: <span class="hljs-built_in">Boolean</span></span><br><span class="javascript">  &#125;,</span><br><span class="javascript">   </span><br><span class="javascript">  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="javascript">    &lt;input</span></span><br><span class="hljs-string"><span class="javascript">      type=&quot;checkbox&quot;</span></span><br><span class="hljs-string"><span class="javascript">      v-bind:checked=&quot;checked&quot;</span></span><br><span class="hljs-string"><span class="javascript">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class="hljs-string"><span class="javascript">    &gt;</span></span><br><span class="hljs-string"><span class="javascript">  `</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">lovingVue</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue-js-自定义指令"><a href="#Vue-js-自定义指令" class="headerlink" title="Vue.js 自定义指令"></a>Vue.js 自定义指令</h1><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。</p><p>下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-focus</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="javascript">Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="javascript">  <span class="hljs-comment">// 当绑定元素插入到 DOM 中。</span></span><br><span class="javascript">  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 聚焦元素</span></span><br><span class="javascript">    el.focus()</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-focus</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 创建根实例</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">directives</span>: &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 注册一个局部的自定义指令 v-focus</span></span><br><span class="javascript">    <span class="hljs-attr">focus</span>: &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 指令的定义</span></span><br><span class="javascript">      <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 聚焦元素</span></span><br><span class="javascript">        el.focus()</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><h3 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h3><p>钩子函数的参数有：</p><ul><li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li>binding: 一个对象，包含以下属性：<ul><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>&#123; foo: true, bar: true &#125;</code>。</li></ul></li><li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li><li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>  <span class="hljs-attr">v-runoob:hello.a.b</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.directive(<span class="hljs-string">&#x27;runoob&#x27;</span>, &#123;</span><br><span class="javascript">  <span class="hljs-attr">bind</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">JSON</span>.stringify</span><br><span class="javascript">    el.innerHTML =</span><br><span class="javascript">      <span class="hljs-string">&#x27;name: &#x27;</span>       + s(binding.name) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="javascript">      <span class="hljs-string">&#x27;value: &#x27;</span>      + s(binding.value) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="javascript">      <span class="hljs-string">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="javascript">      <span class="hljs-string">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="javascript">      <span class="hljs-string">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class="javascript">      <span class="hljs-string">&#x27;vnode keys: &#x27;</span> + <span class="hljs-built_in">Object</span>.keys(vnode).join(<span class="hljs-string">&#x27;, &#x27;</span>)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;菜鸟教程!&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730162448.png" alt="image-20210730162439990"></p><p>有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.directive(<span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>  <span class="hljs-comment">// 设置指令的背景颜色</span><br>  el.style.backgroundColor = binding.value.color<br>&#125;)<br></code></pre></td></tr></table></figure><p>指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-jiaqi</span>=<span class="hljs-string">&#x27;&#123;color:&quot;pink&quot;,text:&quot;666&quot;&#125;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  Vue.directive(<span class="hljs-string">&#x27;jiaqi&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el,binding</span>)</span>&#123;</span><br><span class="javascript">    el.style.color=binding.value.color;</span><br><span class="javascript">    el.innerHTML=binding.value.text;</span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue数组处理"><a href="#Vue数组处理" class="headerlink" title="Vue数组处理"></a>Vue数组处理</h1><h2 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h2><p>1.变异方法和替换数组有什么区别</p><ul><li>变异的方法能够实现数据更新视图自动更新</li><li>替换数组不会修改原始数据，数据改变视图不一定更新</li></ul><p>2.变异方法和替换数组有哪些</p><ul><li><p>变异方法：push  pop shift unshift  splice  sort  reverse</p></li><li><p>替换数组：filter  concat  slice</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;fname&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;add&#x27;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;del&#x27;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change&#x27;</span>&gt;</span>替换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">list</span>:[<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>],</span><br><span class="javascript">        <span class="hljs-attr">fname</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">add</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.list.push(<span class="hljs-built_in">this</span>.fname);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">del</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.list.pop(<span class="hljs-built_in">this</span>.fname);</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.list=<span class="hljs-built_in">this</span>.list.slice(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="数组响应式变化"><a href="#数组响应式变化" class="headerlink" title="数组响应式变化"></a>数组响应式变化</h2><ul><li>Vue.set(vm.items, indexOfItem, newValue)  </li><li>vm.$set(vm.items, indexOfItem, newValue)  </li><li>① 参数一表示要处理的数组名称<br>② 参数二表示要处理的数组的索引<br>③ 参数三表示要处理的数组的值  </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">list</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>],<br>    &#125;<br>  &#125;,<br>&#125;)<br>Vue.set(vm.list,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;lemon&#x27;</span>); <span class="hljs-comment">// 数据和视图都发生了变化</span><br>vm.$set(vm.list,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;banana&#x27;</span>);<span class="hljs-comment">// 数据和视图都发生了变化</span><br><span class="hljs-comment">//  vm.list[1]=&#x27;lemon&#x27;;  数据被修改了，但是视图没有被修改</span><br></code></pre></td></tr></table></figure><h2 id="对象响应式变化"><a href="#对象响应式变化" class="headerlink" title="对象响应式变化"></a>对象响应式变化</h2><ul><li>Vue.set(vm.items, key, newValue)  </li><li>vm.$set(vm.items, key, newValue)  </li><li>① 参数一表示要处理的对象名称<br>② 参数二表示要处理的对象的属性名<br>③ 参数三表示要处理的对象的值  </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;info.gender&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        <span class="hljs-attr">info</span>: &#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>,</span><br><span class="javascript">          <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,</span><br><span class="javascript">          <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// vm.info.gender=&#x27;female&#x27;  不会修改视图层，只会修改数据</span></span><br><span class="javascript">  vm.$set(vm.info, <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-string">&#x27;non-binary&#x27;</span>) <span class="hljs-comment">// 而且此时再用vm.info.gender来修改也是响应式的</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>vm.$delete(vm.items, key) ：删除对象中的某个键值对</li></ul><h1 id="进入-amp-离开过渡"><a href="#进入-amp-离开过渡" class="headerlink" title="进入&amp;离开过渡"></a>进入&amp;离开过渡</h1><h2 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)</li><li>动态组件</li><li>组件根节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span><br>    Toggle<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 整个进入和离开的过程 */</span><br><span class="hljs-selector-class">.fade-enter-active</span>, <span class="hljs-selector-class">.fade-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">5s</span>;<br>&#125;<br><span class="hljs-comment">/*或者或写成这样</span><br><span class="hljs-comment">p&#123;</span><br><span class="hljs-comment">   transition: opacity .5s;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* 进入的起点和离开的终点 */</span><br><span class="hljs-selector-class">.fade-enter</span>, <span class="hljs-selector-class">.fade-leave-to</span>  &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h3><p>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>：在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li></ol><p><img src="https://cn.vuejs.org/images/transition.png" alt="Transition Diagram"></p><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p><p><code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线，在下面章节会有个示例说明。</p><h3 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h3><p>我们可以通过以下 attribute 来自定义过渡类名：</p><ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code> </li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code> </li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/">Animate.css</a> 结合使用十分有用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-3&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span><br>    Toggle render<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;custom-classes-transition&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animated tada&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animated bounceOutRight&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="初始渲染过渡"><a href="#初始渲染过渡" class="headerlink" title="初始渲染过渡"></a>初始渲染过渡</h2><p>可以通过 <code>appear</code> attribute 设置节点在初始渲染的过渡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">appear</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h2><p>于原生标签可以使用 <code>v-if</code>/<code>v-else</code>。最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;items.length &gt; 0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>Sorry, no items found.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以这样使用，但是有一点需要注意：</p><p>当有<strong>相同标签名</strong>的元素切换时，需要通过 <code>key</code> attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在 <code>&lt;transition&gt;</code> 组件中的多个元素设置 key 是一个更好的实践。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isEditing&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span><br>    Save<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span><br>    Edit<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在一些场景中，也可以通过给同一个元素的 <code>key</code> attribute 设置不同的状态来代替 <code>v-if</code> 和 <code>v-else</code>，上面的例子可以重写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;isEditing&quot;</span>&gt;</span><br>    &#123;&#123; isEditing ? &#x27;Save&#x27; : &#x27;Edit&#x27; &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><p><code>&lt;transition&gt;</code> 的默认行为 - 进入和离开同时发生。</p><p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了<strong>过渡模式</strong></p><ul><li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开。</li><li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><p>用 <code>out-in</code> 重写之前的开关按钮过渡：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... the buttons ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h2><p>多个组件的过渡简单很多 - 我们不需要使用 <code>key</code> attribute。相反，我们只需要使用<a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">动态组件</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;component-fade&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#transition-components-demo&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">view</span>: <span class="hljs-string">&#x27;v-a&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-string">&#x27;v-a&#x27;</span>: &#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;Component A&lt;/div&gt;&#x27;</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;v-b&#x27;</span>: &#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;Component B&lt;/div&gt;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.component-fade-enter-active</span>, <span class="hljs-selector-class">.component-fade-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span> ease;<br>&#125;<br><span class="hljs-selector-class">.component-fade-enter</span>, <span class="hljs-selector-class">.component-fade-leave-to</span><br><span class="hljs-comment">/* .component-fade-leave-active for below version 2.1.8 */</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h2><p>目前为止，关于过渡我们已经讲到：</p><ul><li>单个节点</li><li>同一时间渲染多个节点中的一个</li></ul><p>那么怎么同时渲染整个列表，比如使用 <code>v-for</code>？在这种场景中，使用 <code>&lt;transition-group&gt;</code> 组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p><ul><li>不同于 <code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个 <code>&lt;span&gt;</code>。你也可以通过 <code>tag</code> attribute 更换为其他元素。</li><li><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F">过渡模式</a>不可用，因为我们不再相互切换特有的元素。</li><li>内部元素<strong>总是需要</strong>提供唯一的 <code>key</code> attribute 值。</li><li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身。</li></ul><p>这个例子有个问题，当添加和移除元素的时候，周围的元素会瞬间移动到他们的新布局的位置，而不是平滑的过渡，我们下面会解决这个问题。现在让我们由一个简单的例子深入，进入和离开的过渡使用之前一样的 CSS 类名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list-demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;remove&quot;</span>&gt;</span>Remove<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-item&quot;</span>&gt;</span><br>      &#123;&#123; item &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#list-demo&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">items</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<br>    <span class="hljs-attr">nextNum</span>: <span class="hljs-number">10</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">randomIndex</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-built_in">this</span>.items.length)<br>    &#125;,<br>    <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.items.splice(<span class="hljs-built_in">this</span>.randomIndex(), <span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.nextNum++)<br>    &#125;,<br>    <span class="hljs-attr">remove</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.items.splice(<span class="hljs-built_in">this</span>.randomIndex(), <span class="hljs-number">1</span>)<br>    &#125;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.list-item</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.list-enter-active</span>, <span class="hljs-selector-class">.list-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span>;<br>&#125;<br><span class="hljs-selector-class">.list-enter</span>, <span class="hljs-selector-class">.list-leave-to</span><br><span class="hljs-comment">/* .list-leave-active for below version 2.1.8 */</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">30px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子有个问题，当添加和移除元素的时候，周围的元素会瞬间移动到他们的新布局的位置，而不是平滑的过渡，我们下面会解决这个问题。</p><h4 id="列表过渡排序"><a href="#列表过渡排序" class="headerlink" title="列表过渡排序"></a>列表过渡排序</h4><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 <strong><code>v-move</code> class</strong>，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> attribute 来自定义前缀，也可以通过 <code>move-class</code> attribute 手动设置。</p><p><code>v-move</code> 对于设置过渡的切换时机和过渡曲线非常有用，你会看到如下的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;flip-list-demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;flip-list&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">v-bind:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>      &#123;&#123; item &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#flip-list-demo&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">items</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-attr">shuffle</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.items = _.shuffle(<span class="hljs-built_in">this</span>.items)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flip-list-move</span> &#123;<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象属性描述符和访问器属性</title>
    <link href="/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/"/>
    <url>/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>本笔记基于：<a href="https://zh.javascript.info/property-descriptors">https://zh.javascript.info/property-descriptors</a></p><h1 id="属性标识与属性描述符"><a href="#属性标识与属性描述符" class="headerlink" title="属性标识与属性描述符"></a>属性标识与属性描述符</h1><p>对象可以存储属性，对象的属性不仅仅只是简单的“键值”对。</p><h2 id="属性标识"><a href="#属性标识" class="headerlink" title="属性标识"></a>属性标识</h2><p>对象属性（properties），除 <strong><code>value</code></strong> 外，还有三个特殊的特性（attributes），也就是所谓的“标志”：</p><ul><li><strong><code>writable</code></strong> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的。</li><li><strong><code>enumerable</code></strong> — 如果为 <code>true</code>，则会被在循环中列出，否则不会被列出。</li><li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此特性可以被删除，这些属性也可以被修改，否则不可以。</li></ul><p>当我们用“常用的方式”创建一个属性时，它们都为 <code>true</code>，但我们也可以随时更改它们。</p><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">Object.getOwnPropertyDescriptor</a> 方法允许查询有关属性的 <strong>完整</strong> 信息。</p><blockquote><p>语法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> descriptor = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, propertyName);<br></code></pre></td></tr></table></figure><ul><li><p>obj</p><p>需要从中获取信息的对象</p></li><li><p>propertyName</p><p>属性的名称</p></li></ul><blockquote><p>举例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> descriptor=<span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(user,<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(descriptor);<br><span class="hljs-comment">// &#123; value: &#x27;John&#x27;, writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure><p>为了修改标志，我们可以使用 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>。</p><blockquote><p>语法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, propertyName, descriptor)<br></code></pre></td></tr></table></figure><ul><li><p><code>obj</code>，<code>propertyName</code></p><p>要应用描述符的对象及其属性。</p></li><li><p><code>descriptor</code></p><p>  要应用的属性描述符对象。</p></li></ul><p>如果<code>descriptor</code>属性存在，<code>defineProperty</code> 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 <code>false</code>。</p><p>例如，这里创建了一个属性 <code>name</code>，该属性的所有标志都为 <code>false</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;);<br><br><span class="hljs-keyword">let</span> descriptor = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(user, <span class="hljs-string">&#x27;name&#x27;</span>);<br><br>alert( <span class="hljs-built_in">JSON</span>.stringify(descriptor, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span> ) );<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  &quot;value&quot;: &quot;John&quot;,</span><br><span class="hljs-comment">  &quot;writable&quot;: false,</span><br><span class="hljs-comment">  &quot;enumerable&quot;: false,</span><br><span class="hljs-comment">  &quot;configurable&quot;: false</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>将它与上面的“以常用方式创建的” <code>user.name</code> 进行比较：现在所有标志都为 <code>false</code>。如果这不是我们想要的，那么我们最好在 <code>descriptor</code> 中将它们设置为 <code>true</code>。</p><h2 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h2><p>通过更改 <code>writable</code> 标志来把 <code>user.name</code> 设置为只读（<code>user.name</code> 不能被重新赋值）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br>user.name = <span class="hljs-string">&quot;Pete&quot;</span>; <span class="hljs-comment">// Error: Cannot assign to read only property &#x27;name&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>只在严格模式下会出现 Errors</strong></p></blockquote><h2 id="不可枚举"><a href="#不可枚举" class="headerlink" title="不可枚举"></a>不可枚举</h2><p>如果在 <code>user</code>中 添加一个自定义的 <code>toString</code>。</p><p>通常，对象的内置 <code>toString</code> 是不可枚举的，它不会显示在 <code>for..in</code> 中。但是如果我们添加我们自己的 <code>toString</code>，那么默认情况下它将显示在 <code>for..in</code> 中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 默认情况下，我们的两个属性都会被列出：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) alert(key); <span class="hljs-comment">// name, toString</span><br></code></pre></td></tr></table></figure><p>如果我们不喜欢它，那么我们可以设置 <code>enumerable:false</code>。之后它就不会出现在 <code>for..in</code> 循环中了，就像内建的 <code>toString</code> 一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;toString&quot;</span>, &#123;<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br><span class="hljs-comment">// 现在我们的 toString 消失了：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) alert(key); <span class="hljs-comment">// name</span><br></code></pre></td></tr></table></figure><h2 id="不可配置"><a href="#不可配置" class="headerlink" title="不可配置"></a>不可配置</h2><p>不可配置标志（<code>configurable:false</code>）有时会预设在内建对象和属性中。不可配置的属性不能被删除。</p><p>因此，开发人员无法修改 <code>Math.PI</code> 的值或覆盖它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Math</span>.PI = <span class="hljs-number">3</span>; <span class="hljs-comment">// Error</span><br><br><span class="hljs-comment">// 删除 Math.PI 也不会起作用</span><br></code></pre></td></tr></table></figure><p>使属性变成不可配置是一条单行道。我们无法使用 <code>defineProperty</code> 把它改回去。</p><p>确切地说，不可配置性对 <code>defineProperty</code> 施加了一些限制：</p><ol><li>不能修改 <code>configurable</code> 标志。</li><li>不能修改 <code>enumerable</code> 标志。</li><li>不能将 <code>writable: false</code> 修改为 <code>true</code>（反过来则可以）。</li><li>不能修改访问者属性的 <code>get/set</code>（但是如果没有可以分配它们）。</li></ol><hr><p><strong>“configurable: false” 的用途是防止更改和删除属性标志，但是允许更改对象的值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br>user.name = <span class="hljs-string">&quot;Pete&quot;</span>; <span class="hljs-comment">// 正常工作</span><br><span class="hljs-keyword">delete</span> user.name; <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><p>现在，我们将 <code>user.name</code> 设置为一个“永不可改”的常量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span><br>&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>&#125;);<br><br><span class="hljs-comment">// 不能修改 user.name 或它的标志</span><br><span class="hljs-comment">// 下面的所有操作都不起作用：</span><br>user.name = <span class="hljs-string">&quot;Pete&quot;</span>;<br><span class="hljs-keyword">delete</span> user.name;<br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&quot;name&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Pete&quot;</span> &#125;);<br></code></pre></td></tr></table></figure><h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a><a href="https://zh.javascript.info/property-descriptors#objectdefineproperties">Object.defineProperties</a></h2><p>有一个方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">Object.defineProperties(obj, descriptors)</a>，允许一次定义多个属性。</p><blockquote><p>语法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperties(obj, &#123;<br>  <span class="hljs-attr">prop1</span>: descriptor1,<br>  <span class="hljs-attr">prop2</span>: descriptor2<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperties(user, &#123;<br>  <span class="hljs-attr">name</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span> &#125;,<br>  <span class="hljs-attr">surname</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span> &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a><a href="https://zh.javascript.info/property-descriptors#objectgetownpropertydescriptors">Object.getOwnPropertyDescriptors</a></h2><p>要一次获取所有属性描述符，我们可以使用 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors">Object.getOwnPropertyDescriptors(obj)</a> 方法。</p><p>它与 <code>Object.defineProperties</code> 一起可以用作克隆对象的“标志感知”方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> clone = <span class="hljs-built_in">Object</span>.defineProperties(&#123;&#125;, <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptors(obj));<br><br></code></pre></td></tr></table></figure><p>通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;<br>  clone[key] = user[key]<br>&#125;<br></code></pre></td></tr></table></figure><p>……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 <code>Object.defineProperties</code> 是首选。</p><p>另一个区别是 <code>for..in</code> 会忽略 symbol 类型的属性，但是 <code>Object.getOwnPropertyDescriptors</code> 返回包含 symbol 类型的属性在内的 <strong>所有</strong> 属性描述符。</p><h1 id="属性的getter和setter"><a href="#属性的getter和setter" class="headerlink" title="属性的getter和setter"></a>属性的getter和setter</h1><p>有两种类型的对象属性。</p><p>第一种是 <strong>数据属性</strong>。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。</p><p>第二种类型的属性是新东西。它是 <strong>访问器属性（accessor properties）</strong>。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。</p><h2 id="访问器属性-getter和setter"><a href="#访问器属性-getter和setter" class="headerlink" title="访问器属性(getter和setter)"></a>访问器属性(getter和setter)</h2><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">propName</span>() &#123;<br>    <span class="hljs-comment">// 当读取 obj.propName 时，getter 起作用</span><br>  &#125;,<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">propName</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// 当执行 obj.propName = value 操作时，setter 起作用</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当读取 <code>obj.propName</code> 时，getter 起作用，当 <code>obj.propName</code> 被赋值时，setter 起作用。</p><p>例如，我们有一个具有 <code>name</code> 和 <code>surname</code> 属性的对象 <code>user</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">surname</span>: <span class="hljs-string">&quot;Smith&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>现在我们想添加一个 <code>fullName</code> 属性，该属性值应该为 <code>&quot;John Smith&quot;</code>。当然，我们不想复制粘贴已有的信息，因此我们可以使用访问器来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">surname</span>: <span class="hljs-string">&quot;Smith&quot;</span>,<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.surname&#125;</span>`</span>;<br>  &#125;<br>&#125;;<br>alert(user.fullName); <span class="hljs-comment">// John Smith</span><br></code></pre></td></tr></table></figure><p>从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 <strong>调用</strong> <code>user.fullName</code>，我们正常 <strong>读取</strong> 它：getter 在幕后运行。</p><p>截至目前，<code>fullName</code> 只有一个 getter。如果我们尝试赋值操作 <code>user.fullName=</code>，将会出现错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`...`</span>;<br>  &#125;<br>&#125;;<br><br>user.fullName = <span class="hljs-string">&quot;Test&quot;</span>; <span class="hljs-comment">// Error（属性只有一个 getter）</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>,<br>    <span class="hljs-attr">surname</span>:<span class="hljs-string">&#x27;Smith&#x27;</span>,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">fullname</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.surname&#125;</span>`</span>;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title">fullname</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-comment">// 将获取的值解构赋值给对象的name和surname属性</span><br>        [<span class="hljs-built_in">this</span>.name,<span class="hljs-built_in">this</span>.surname]=value.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br>user.fullname=<span class="hljs-string">&#x27;alice cooper&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(user.name);<br><span class="hljs-built_in">console</span>.log(user.fullname);<br></code></pre></td></tr></table></figure><h2 id="访问器描述符"><a href="#访问器描述符" class="headerlink" title="访问器描述符"></a>访问器描述符</h2><p>访问器属性的描述符与数据属性的不同。</p><p>所以访问器描述符可能有：</p><ul><li><strong><code>get</code></strong> —— 一个没有参数的函数，在读取属性时工作，</li><li><strong><code>set</code></strong> —— 带有一个参数的函数，当属性被设置时调用，</li><li><strong><code>enumerable</code></strong> —— 与数据属性的相同，</li><li><strong><code>configurable</code></strong> —— 与数据属性的相同。</li></ul><p>例如，要使用 <code>defineProperty</code> 创建一个 <code>fullName</code> 访问器，我们可以使用 <code>get</code> 和 <code>set</code> 来传递描述符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">surname</span>: <span class="hljs-string">&quot;Smith&quot;</span><br>&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(user, <span class="hljs-string">&#x27;fullName&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.surname&#125;</span>`</span>;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    [<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.surname] = value.split(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125;<br>&#125;);<br><br>alert(user.fullName); <span class="hljs-comment">// John Smith</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) alert(key); <span class="hljs-comment">// name, surname</span><br></code></pre></td></tr></table></figure><p><strong>请注意，一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是。</strong></p><p>如果我们试图在同一个描述符中同时提供 <code>get</code> 和 <code>value</code>，则会出现错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Error: Invalid property descriptor.</span><br><span class="hljs-built_in">Object</span>.defineProperty(&#123;&#125;, <span class="hljs-string">&#x27;prop&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125;,<br><br>  <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="更聪明的getter-setter"><a href="#更聪明的getter-setter" class="headerlink" title="更聪明的getter/setter"></a>更聪明的getter/setter</h2><p>Getter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。</p><p>例如，如果我们想禁止太短的 <code>user</code> 的 name，我们可以创建一个 setter <code>name</code>，并将值存储在一个单独的属性 <code>_name</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>  &#125;,<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (value.length &lt; <span class="hljs-number">4</span>) &#123;<br>      alert(<span class="hljs-string">&quot;Name is too short, need at least 4 characters&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>._name = value;<br>  &#125;<br>&#125;;<br><br>user.name = <span class="hljs-string">&quot;Pete&quot;</span>;<br>alert(user.name); <span class="hljs-comment">// Pete</span><br><br>user.name = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// Name 太短了……</span><br></code></pre></td></tr></table></figure><p>所以，name 被存储在 <code>_name</code> 属性中，并通过 getter 和 setter 进行访问。</p><p>从技术上讲，外部代码可以使用 <code>user._name</code> 直接访问 name。但是，这儿有一个众所周知的约定，即以下划线 <code>&quot;_&quot;</code> 开头的属性是内部属性，不应该从对象外部进行访问。</p>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript ES6 学习笔记</title>
    <link href="/2021/06/24/JavaScript-ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/24/JavaScript-ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h1><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104138.png" alt="image-20210530104137712"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104352.png" alt="image-20210530104351721"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104440.png" alt="image-20210530104439339"></p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const就是为了那些一旦初始化就不希望重新赋值的情况设计的。使用 const声明常量，一旦声明，就必须立即初始化。</p><p>const声明的常量，允许在<strong>不重新赋值</strong>的情况下修改它的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person=&#123;<span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;;<br>person[gender]=<span class="hljs-string">&quot;female&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h1><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530131646.png" alt="image-20210530131645190"></p><p>1.重复声明：已经存在的变量，又声明了一次。</p><p>var允许重复声明，let、 const不允许重复声明</p><p>2.变量提升</p><p>var 会提升变量的声明到当前作用域顶部，但是赋值不会提升；let和const不会变量提升。</p><p>3.暂时性死区</p><p>只要作用域内存在 let、const，它们所声明的变量或常量就自动“绑定”这个区域，不再受到外部作用域的影响。</p><p>let、const存在暂时性死区，var不存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> c=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> d=<span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;d&quot;</span>,d);<span class="hljs-comment">//d</span><br>    <span class="hljs-comment">//console.log(&quot;c&quot;,c);//  Cannot access &#x27;c&#x27; before initialization</span><br>    <span class="hljs-keyword">let</span> c=<span class="hljs-number">1</span>;<br>&#125;<br>func(c);<br></code></pre></td></tr></table></figure><p>4.window 对象的属性和方法</p><p>在全局作用域中，var声明的变量，通过function声明的函数会自动变为window对象的属性和方法；let、const不会。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-keyword">var</span> add=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.add) <span class="hljs-comment">//18</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.add===add);<span class="hljs-comment">//true    </span><br><span class="hljs-keyword">let</span> height=<span class="hljs-number">158</span>;<br><span class="hljs-keyword">const</span> grow=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.height); <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.grow===grow)<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>5.块级作用域</p><p>var没有块级作用域，let和const有块级作用域。</p><h2 id="非常经典的案例"><a href="#非常经典的案例" class="headerlink" title="非常经典的案例"></a>非常经典的案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> btns=<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.btn&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//1.var</span></span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="javascript">    btns[i].addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//都会输出3</span></span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>)</span><br><span class="javascript">&#125; <span class="hljs-comment">//执行for循环的时候，会给所有的btn添加监听(瞬间就能完成)，退出for循环的时候，全局变量i的值为3</span></span><br><span class="javascript"><span class="hljs-comment">//当点击的按钮的时候，自然会输出i=3.</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//2.闭包</span></span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="javascript">        btns[index].addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(index); </span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>)</span><br><span class="javascript">    &#125;)(i)</span><br><span class="javascript">&#125; </span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//3.let</span></span><br><span class="javascript"><span class="hljs-comment">// //此时的i不再是全局变量</span></span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class="javascript">    btns[i].addEventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(i); </span><br><span class="javascript">    &#125;,<span class="hljs-literal">false</span>)</span><br><span class="javascript">&#125;</span><br></code></pre></td></tr></table></figure><p>1.使用var</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144638.png" alt="2.let 和 const 的应用-var" style="zoom: 67%;" /><p>2.使用闭包</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144714.png" alt="3.let 和 const 的应用-闭包"></p><p>3.使用let</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144732.png" alt="4.let 和 const 的应用-let"></p><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（`$&#123;expression&#125;`）的占位符。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">/ <span class="hljs-number">1.</span>认识模板字符串<br><span class="hljs-comment">// 模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。</span><br><span class="hljs-keyword">const</span> user1=<span class="hljs-string">&#x27;alex&#x27;</span>;<br><span class="hljs-keyword">const</span> user2=<span class="hljs-string">`alex`</span>;<br><span class="hljs-built_in">console</span>.log(user1,user2,user1===user2); <span class="hljs-comment">//alex alex true</span><br><br><span class="hljs-comment">// 2.模板字符串和一般字符串的区别</span><br><span class="hljs-keyword">const</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;alex&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><span class="hljs-comment">// 一般字符串</span><br><span class="hljs-comment">// const info=&quot;name:&quot;+person.name+&quot;, age:&quot;+person.age+&quot;, gender:&quot;+person.gender;</span><br><span class="hljs-comment">// 模板字符串</span><br><span class="hljs-keyword">const</span> info=<span class="hljs-string">`name:<span class="hljs-subst">$&#123;person.name&#125;</span>, age:<span class="hljs-subst">$&#123;person.age&#125;</span>, gender:<span class="hljs-subst">$&#123;person.gender&#125;</span>`</span>;<br><span class="hljs-built_in">console</span>.log(info);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530154647.png" alt="image-20210530154645752"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.输出多行字符串</span><br><span class="hljs-comment">// 模板字符串中，所有的空格、换行或缩进都会保留在输出中。</span><br>    <span class="hljs-keyword">const</span> info=<span class="hljs-string">`hello</span><br><span class="hljs-string">world!`</span>;<br>    <span class="hljs-built_in">console</span>.log(info);<br><span class="hljs-comment">//  2. 输出`和\等特殊字符</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`\``</span>,<span class="hljs-string">`\\`</span>); <span class="hljs-comment">//` \</span><br><br><span class="hljs-comment">// 3. 模板字符串的注入</span><br><span class="hljs-keyword">const</span> name=<span class="hljs-string">&quot;alex&quot;</span>;<br><span class="hljs-keyword">const</span> person=&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;;<br><span class="hljs-keyword">const</span> getSex=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">gender</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> gender===<span class="hljs-string">&quot;male&quot;</span>?<span class="hljs-string">&quot;男&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>;<br>&#125;<br><span class="hljs-keyword">const</span> alex=<span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>,<span class="hljs-subst">$&#123;person.age+<span class="hljs-number">2</span>&#125;</span>,<span class="hljs-subst">$&#123;getSex(person.gender)&#125;</span>`</span>;<br><span class="hljs-comment">//alex,20,男</span><br><span class="hljs-built_in">console</span>.log(alex);<br></code></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.认识箭头函数，箭头函数是匿名函数</span><br><br><span class="hljs-keyword">const</span> add=<span class="hljs-function">(<span class="hljs-params">x,y</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> x+y&#125;;<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br><br><span class="hljs-comment">// 2.箭头函数的结构</span><br><br><span class="hljs-comment">// 参数=&gt;函数体</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>1.单个参数时可以去掉参数的圆括号；无参数或者多个参数时不能省略参数圆括号。</p><p>2.如果函数体只有return语句，可以直接同时省略函数体的花括号和return关键字。</p><p>3.返回值是单行对象时，可以省略return关键词，然后在对象的花括号外面加上圆括号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.单个参数</span><br><span class="hljs-keyword">const</span> add=<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>&#123;<span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;&#125;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// 2.单行函数体</span><br><span class="hljs-keyword">const</span> add2=<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>x+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(add2(<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// 3.单行对象</span><br><span class="hljs-keyword">const</span> add3=<span class="hljs-function">(<span class="hljs-params">x,y</span>)=&gt;</span>(&#123;<span class="hljs-attr">value</span>:x+y&#125;);<br><span class="hljs-built_in">console</span>.log(add3(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>1.非箭头函数中this指向问题</p><p>只有在函数调用的时候，this指向才能确定；this的指向和函数在哪调用无关，只和函数被谁调用有关</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <br>&#125;<br><span class="hljs-comment">// 只有在函数调用的时候，this指向才能确定</span><br><span class="hljs-comment">// this的指向和函数在哪调用无关，只和函数被谁调用有关</span><br>add(); <span class="hljs-comment">// 非严格模式下this指向window，严格模式下是undefined</span><br><span class="hljs-built_in">window</span>.add() <span class="hljs-comment">// window</span><br><br><span class="hljs-keyword">const</span> calc=&#123;<br>    <span class="hljs-attr">add</span>:add<br>&#125;<br>calc.add(); <span class="hljs-comment">//calc</span><br><br><span class="hljs-keyword">const</span> adder=calc.add;<br>adder();<span class="hljs-comment">// 非严格模式下this指向window，严格模式下是undefined</span><br><br><span class="hljs-built_in">document</span>.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向绑定的dom，此时为document</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alex&quot;</span>); <span class="hljs-comment">// this指向实例化生产的对象</span><br></code></pre></td></tr></table></figure><p>2.箭头函数中的this指向</p><p> 箭头函数没有自己的this，它会沿着作用域链向外查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 箭头函数没有自己的this</span><br><span class="hljs-keyword">const</span> calc=&#123;<br>    <span class="hljs-attr">add</span>:<span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)&#125;<br>&#125;<br>calc.add(); <span class="hljs-comment">//window</span><br><span class="hljs-comment">// 因为箭头函数没有自己的this，所以它会通过作用域链向外查找至全局作用域，而全局作用中this指向window</span><br><br><br><span class="hljs-keyword">const</span> c=&#123;<br>    <span class="hljs-attr">add</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> adder=<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>        &#125;<br>        adder();<br>    &#125;<br>&#125;;<br>c.add(); <span class="hljs-comment">// 指向c对象</span><br><br><span class="hljs-keyword">const</span> addFn=c.add;<br>addFn(); <span class="hljs-comment">// 指向window</span><br></code></pre></td></tr></table></figure><p>3.箭头函数不适用的场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.作为构造函数</span><br><span class="hljs-comment">// 箭头函数没有this</span><br><span class="hljs-comment">// const Person=()=&gt;&#123;&#125;;</span><br><span class="hljs-comment">// new Person();</span><br><br><span class="hljs-comment">// 2.需要this 指向调用对象的时候</span><br><span class="hljs-built_in">document</span>.onclick=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//此时会指向window对象</span><br>&#125;<br><span class="hljs-comment">// 3.需要使用arguments时</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//[1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="hljs-keyword">const</span> addFn=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br>addFn(); <span class="hljs-comment">//会报错</span><br></code></pre></td></tr></table></figure><p>4.箭头函数的应用</p><p>如果代码写成下面这样，程序执行会有问题，因为<code>setInterval</code>中的回调函数中的<code>this</code>会指向<code>window</code>对象，导致无法进行加法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">const</span> timer=&#123;</span><br><span class="javascript">        <span class="hljs-attr">time</span>:<span class="hljs-number">0</span>,</span><br><span class="javascript">        <span class="hljs-attr">start</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            btn.addEventListener(</span><br><span class="javascript">                <span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.time++;</span><br><span class="javascript">                        result.innerHTML=<span class="hljs-built_in">this</span>.time;</span><br><span class="javascript">                    &#125;,<span class="hljs-number">1000</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            ,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    timer.start();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常规的解决是备份<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> timer=&#123;<br>    <span class="hljs-attr">time</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">start</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> self =<span class="hljs-built_in">this</span>;<br>        btn.addEventListener(<br>            <span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>                    self.time++;<br>                    result.innerHTML=self.time;<br>                &#125;,<span class="hljs-number">1000</span>);<br>            &#125;<br>        ,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure><p>但是可以使用<strong>箭头函数</strong>来解决这个问题，箭头函数本身没有<code>this</code>，所以它会向外层的作用域链查找<code>this</code>。</p><p>注意，此时也要把<code>addEventListener</code>中的匿名函数改为箭头函数，不然<code>setInterval</code>的箭头函数会向外到<code>addEventListener</code>中的匿名函数找<code>this</code>，而该函数this为绑定的dom节点，从而<code>setInterval</code>的箭头函数会把btn（绑定的dom）当做this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> timer=&#123;<br>    <span class="hljs-attr">time</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">start</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        btn.addEventListener(<br>            <span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>                    <span class="hljs-built_in">this</span>.time++;<br>                    result.innerHTML=<span class="hljs-built_in">this</span>.time;<br>                &#125;,<span class="hljs-number">1000</span>);<br>            &#125;<br>        ,<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure><p>将这两个部分都改为箭头函数后，<code>setInterval</code>中的匿名函数最终会在<code>start()</code>方法找<code>this</code>。</p><p>而注意到最后会调用<code>timer.start()</code>，所以start()中的this就是指向<code>timer</code>, 因此 <code>this.time++;</code> 和<code>result.innerHTML=this.time;</code> 这两句中的<code>this</code> 指向的就是<code>timer</code>。 </p><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h2><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194725.png" alt="image-20210603194723759"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194753.png" alt="image-20210603194752249"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194905.png" alt="image-20210603194903992"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603195037.png" alt="image-20210603195036092"></p><h3 id="1-解构赋值的定义"><a href="#1-解构赋值的定义" class="headerlink" title="1.解构赋值的定义"></a>1.解构赋值的定义</h3><p>解析某一数据的结构，将想要的东西提取出来，赋值给变量或常量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-comment">// const a=arr[0];</span><br><span class="hljs-comment">// const b=arr[1];</span><br><span class="hljs-comment">// const c=arr[2];</span><br><span class="hljs-keyword">const</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(a, b, c); <span class="hljs-comment">//1 2 3</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 模式(结构)匹配,索引值相对应</span><br><span class="hljs-keyword">let</span> [a,b,c]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 如果想要取出1,5,3</span><br><span class="hljs-keyword">const</span> [d,[,,e],f]=[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(d,e,f); <span class="hljs-comment">//1 5 3</span><br></code></pre></td></tr></table></figure><h3 id="2-解构赋值的默认值"><a href="#2-解构赋值的默认值" class="headerlink" title="2.解构赋值的默认值"></a>2.解构赋值的默认值</h3><p>只有当一个数组成员严格等于（===） undefined时，它的的默认值才会生生效。如果默认值是表达式时，默认值表达式是惰性求值的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b] = []; <span class="hljs-comment">//a=undefined,b=undefined</span><br><span class="hljs-keyword">const</span> [c = <span class="hljs-number">1</span>, d = <span class="hljs-number">2</span>] = []; <span class="hljs-comment">//1 2</span><br><br><span class="hljs-comment">//只有当一个数组成员严格等于（===） undefined时，对应的默认值才会生生效。</span><br><span class="hljs-keyword">const</span> [e = <span class="hljs-number">1</span>, f = <span class="hljs-number">2</span>] = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <span class="hljs-comment">//3,4</span><br><span class="hljs-keyword">const</span> [i = <span class="hljs-number">2</span>, j = <span class="hljs-number">6</span>] = [<span class="hljs-number">5</span>] <span class="hljs-comment">//5 6</span><br><span class="hljs-built_in">console</span>.log(a, b, c, d, e, f, i, j); <span class="hljs-comment">//undefined undefined 1 2 3 4 5 6</span><br><br><span class="hljs-comment">// 如果默认值是表达式时，默认值表达式是惰性求值的</span><br><span class="hljs-keyword">const</span> func = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我被执行了&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;;<br><span class="hljs-keyword">const</span> [x = func()] = [<span class="hljs-number">1</span>]; <span class="hljs-comment">// 此时函数func并没有执行</span><br><span class="hljs-keyword">const</span> [y=func()]=[];<br><span class="hljs-built_in">console</span>.log(x,y); <span class="hljs-comment">//1 2 </span><br></code></pre></td></tr></table></figure><h3 id="3-解构赋值的应用"><a href="#3-解构赋值的应用" class="headerlink" title="3.解构赋值的应用"></a>3.解构赋值的应用</h3><h4 id="类数组可以进行解构赋值"><a href="#类数组可以进行解构赋值" class="headerlink" title="类数组可以进行解构赋值"></a>类数组可以进行解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.常见的类数组的解构赋值</span><br><span class="hljs-comment">// arguments</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [a,b]=<span class="hljs-built_in">arguments</span>;<br>    <span class="hljs-built_in">console</span>.log(a,b); <span class="hljs-comment">//1 2</span><br>&#125;<br>func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <br><br><span class="hljs-comment">// NodeList</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;p&#x27;</span>)); <span class="hljs-comment">//NodeList(3) [p, p, p]</span><br><span class="hljs-keyword">const</span> [p1,p2,p3]=(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;p&quot;</span>));<br><span class="hljs-built_in">console</span>.log(p1,p2,p3);<br></code></pre></td></tr></table></figure><h4 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> array=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-comment">// 不用解构赋值参数的写法如下</span><br><span class="hljs-comment">// const add=arr=&gt;arr[0]+arr[1];</span><br><span class="hljs-comment">// 使用解构赋值</span><br><span class="hljs-keyword">const</span> add=<span class="hljs-function">(<span class="hljs-params">[x,y]</span>)=&gt;</span>x+y;<br><span class="hljs-built_in">console</span>.log(add(array)); <span class="hljs-comment">//3 </span><br><br><span class="hljs-comment">//还可以给形参添加默认值</span><br><span class="hljs-keyword">const</span> add1=<span class="hljs-function">(<span class="hljs-params">[x=<span class="hljs-number">1</span>,y=<span class="hljs-number">3</span>]</span>)=&gt;</span>x+y;<br><span class="hljs-built_in">console</span>.log(add1([])); <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x=<span class="hljs-number">1</span> ,y=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//相当于[x,y] =[2,1]，而不是右边的y赋值给x，x赋值给y</span><br>[x,y]=[y,x];<br><span class="hljs-built_in">console</span>.log(x,y); <span class="hljs-comment">//2 1</span><br></code></pre></td></tr></table></figure><h2 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h2><p>1.模式匹配，属性名相同的完成赋值，不需要按照顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.模式匹配，属性名相同的完成赋值，不需要按照顺序</span><br><span class="hljs-comment">//简写形式</span><br><span class="hljs-keyword">const</span> &#123;age,name&#125;=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><span class="hljs-built_in">console</span>.log(age,name); <span class="hljs-comment">//18 &quot;alex&quot;</span><br><span class="hljs-comment">// 完整形式</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">age</span>:age1,<span class="hljs-attr">name</span>:name1&#125;=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br><span class="hljs-built_in">console</span>.log(name1,age1); <span class="hljs-comment">//alex 18</span><br></code></pre></td></tr></table></figure><p>2.对象解构赋值的注意事项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.默认值的生效条件</span><br><span class="hljs-comment">// 对象的数值值严格等于undefined时，对应的默认值才会生效</span><br><span class="hljs-keyword">const</span> &#123;name &#125; = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;alex&quot;</span>&#125;;<br><span class="hljs-built_in">console</span>.log(name); <span class="hljs-comment">//&quot;alex&quot;</span><br><span class="hljs-comment">// 注意默认值的赋值是用等号，而不是用冒号</span><br><span class="hljs-keyword">const</span> &#123;name1=<span class="hljs-string">&quot;billie&quot;</span>,age=<span class="hljs-number">0</span>&#125;=&#123;&#125;;<br><span class="hljs-built_in">console</span>.log(name1);<br><span class="hljs-comment">// 2.如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><span class="hljs-comment">// 3.将一个已经声明的变量用于解构赋值</span><br><span class="hljs-keyword">let</span> x=<span class="hljs-number">1</span>;<br><span class="hljs-comment">// &#123;x&#125;=&#123;x:3&#125;; 会报错，和解决箭头函数的单行语句的返回值是对象一样，在整个外层加上括号</span><br>(&#123;x&#125;=&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">3</span>&#125;);<br><span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">//3</span><br><br><span class="hljs-comment">// 4.可以取到继承的属性</span><br><span class="hljs-keyword">const</span> &#123;toString&#125;=&#123;&#125;;<br><span class="hljs-built_in">console</span>.log(toString);<span class="hljs-comment">// 并没有输出undefined</span><br><span class="hljs-comment">// toString的属性继承自Object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype);<br><span class="hljs-keyword">const</span> &#123;a&#125;=&#123;&#125;;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>3.对象解构赋值的应用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 函数参数的解构赋值</span><br><span class="hljs-comment">//const info=user=&gt;console.log(user.name,user.age);</span><br><span class="hljs-keyword">const</span> info=<span class="hljs-function">(<span class="hljs-params">&#123;age,name&#125;</span>)=&gt;</span><span class="hljs-built_in">console</span>.log(age,name);<br>info(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;hh&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">12</span>&#125;);<br></code></pre></td></tr></table></figure><h2 id="其他数组类型的解构赋值"><a href="#其他数组类型的解构赋值" class="headerlink" title="其他数组类型的解构赋值"></a>其他数组类型的解构赋值</h2><p>1.字符串的解构赋值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//数组形式的解构赋值</span><br><span class="hljs-keyword">const</span> [a,b,,,c]=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a,b,c); <span class="hljs-comment">//h e o</span><br><span class="hljs-comment">// 对象形式解构赋值</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-number">0</span>:x,<span class="hljs-number">1</span>:y,length&#125;=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">console</span>.log(x,y,length); <span class="hljs-comment">//h e 5</span><br></code></pre></td></tr></table></figure><p>2.数值和布尔值的解构赋值(只能按照对象形式解构赋值), 会自动将右侧的数值或布尔值转换为对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;aa,toString&#125;=<span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.log(aa,toString); <span class="hljs-comment">//toString属性是继承而来的</span><br></code></pre></td></tr></table></figure><p>3.undefined和null的解构赋值会报错</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 由于undefined和null，无法转化为对象，所以对它们进行解构赋值都会报错</span><br><span class="hljs-keyword">const</span> &#123;ff&#125;=<span class="hljs-literal">undefined</span>;<br><span class="hljs-built_in">console</span>.log(ff); <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><h1 id="简介表示"><a href="#简介表示" class="headerlink" title="简介表示"></a>简介表示</h1><h2 id="属性和方法的简洁表示"><a href="#属性和方法的简洁表示" class="headerlink" title="属性和方法的简洁表示"></a>属性和方法的简洁表示</h2><h3 id="1-属性的简洁表示"><a href="#1-属性的简洁表示" class="headerlink" title="1.属性的简洁表示"></a>1.属性的简洁表示</h3><p>当键名和变量名(常量名)一样的时候，可以只写一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> age=<span class="hljs-number">19</span>;<br><span class="hljs-keyword">const</span> person1=&#123;<br>    <span class="hljs-comment">// age:age, 直接写age</span><br>    age,<br>&#125;        <br><span class="hljs-built_in">console</span>.log(person1.age);<br></code></pre></td></tr></table></figure><h3 id="2-方法的简洁表示"><a href="#2-方法的简洁表示" class="headerlink" title="2.方法的简洁表示"></a>2.方法的简洁表示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person2=&#123;<br>    <span class="hljs-comment">// speak:function()&#123;&#125;</span><br>    <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方括号语法"><a href="#方括号语法" class="headerlink" title="方括号语法"></a>方括号语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.方括号语法</span><br><span class="hljs-keyword">const</span> prop=<span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-keyword">const</span> person=&#123;&#125;;<br>person[prop]=<span class="hljs-number">18</span>; <span class="hljs-comment">// &#123;age:18&#125;</span><br><span class="hljs-comment">// ES6新增如下</span><br><span class="hljs-keyword">const</span> person1=&#123;<br>    [prop]:<span class="hljs-number">19</span><br>&#125;<br><br><span class="hljs-comment">// 2.方括号可以放[值或者计算可以得到的值(表达式)]</span><br><span class="hljs-keyword">const</span> prop1=<span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-keyword">const</span> func=<span class="hljs-function">()=&gt;</span><span class="hljs-string">&#x27;gender&#x27;</span>;<br><span class="hljs-keyword">const</span> person2=&#123;<br>    [prop1]:<span class="hljs-number">18</span>,<br>    [func()]:<span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-comment">// &#123;age: 18, gender: &quot;female&quot;&#125;</span><br><br><span class="hljs-comment">// 3.方括号语法和点语法的区别</span><br><span class="hljs-comment">// 点语法是方括号语法的特殊形式</span><br><span class="hljs-keyword">const</span> person3=[];<br><span class="hljs-comment">// perosn.age 等价于 person[&#x27;age&#x27;]</span><br></code></pre></td></tr></table></figure><h1 id="函数默认参数值"><a href="#函数默认参数值" class="headerlink" title="函数默认参数值"></a>函数默认参数值</h1><p><strong>函数默认参数</strong>允许在没有值或<code>undefined</code>被传入时使用默认形参。只有在①不传参数 ②明确传递undefined作为参数 这两种情况下,默认值才会生效。</p><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.函数参数的默认值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">a,b=<span class="hljs-number">1</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a*b;<br>&#125;<br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-number">3</span>) ) <span class="hljs-comment">//3</span><br><br><span class="hljs-comment">// 2.默认值的生效</span><br><span class="hljs-comment">// ①不传参数 ②明确传递undefined作为参数 只有这两种情况下,默认值才会生效</span><br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-number">2</span>,<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">//2*&quot;&quot; 最后结果会被隐形转换为0</span><br><br><span class="hljs-comment">// 3.默认值表达式</span><br><span class="hljs-comment">// 如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><br><span class="hljs-comment">// 4.设置默认值的小技巧</span><br><span class="hljs-comment">// 函数参数的默认值最好从参数列表的右边开始设置。</span><br><br><span class="hljs-keyword">const</span> multiply2=<span class="hljs-function">(<span class="hljs-params">x=<span class="hljs-number">1</span>,y</span>)=&gt;</span>x*y;<br><span class="hljs-comment">// 此时如果想要使用第一个默认值，必须明确传递undefined</span><br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-literal">undefined</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h3 id="2-函数默认参数的应用"><a href="#2-函数默认参数的应用" class="headerlink" title="2.函数默认参数的应用"></a>2.函数默认参数的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.接收多参数，如果按照默认写法，传参的时候需要记住参数顺序</span><br><span class="hljs-keyword">const</span> user=<span class="hljs-function">(<span class="hljs-params">name=<span class="hljs-string">&quot;zhangsan&quot;</span>,age=<span class="hljs-number">12</span>,gender=<span class="hljs-string">&quot;female&quot;</span></span>)=&gt;</span><br>    <span class="hljs-built_in">console</span>.log(name,age,gender);<br>user(<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>);<br><br><span class="hljs-comment">// 2. 法一：接收一个对象作为参数</span><br><span class="hljs-keyword">const</span> user1=<span class="hljs-function"><span class="hljs-params">option</span>=&gt;</span><span class="hljs-built_in">console</span>.log(<br>    option.name,option.age,option.gender);<br>user1(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;alex&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span><br>&#125;);<br><br><span class="hljs-comment">// 3.法二：解构赋值的默认值</span><br><span class="hljs-keyword">const</span> user2=<span class="hljs-function">(<span class="hljs-params">&#123;name=<span class="hljs-string">&quot;zhangsan&quot;</span>,age=<span class="hljs-number">12</span>,gender=<span class="hljs-string">&quot;female&quot;</span>&#125;</span>)=&gt;</span><br><span class="hljs-built_in">console</span>.log(name,age,gender);<br><br>user2(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;alex&quot;</span>&#125;);<br><span class="hljs-comment">// 但是不能什么都不传，如果什么都不传就相当于传了undefined</span><br><span class="hljs-comment">// 而无法对undefined进行解构赋值</span><br><span class="hljs-comment">// user2();</span><br><br><span class="hljs-comment">// 4.法三：函数参数的默认值</span><br><span class="hljs-comment">// 把&#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;看为option</span><br><span class="hljs-comment">// option的默认参数为&#123;&#125;，当无不传入参数或者传入undefined的时候</span><br><span class="hljs-comment">// option=&#123;&#125; 会把空对象赋值给option，也就是下面一行的解构赋值</span><br><span class="hljs-comment">// &#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;=&#123;&#125;</span><br><br><span class="hljs-keyword">const</span> user3=<span class="hljs-function">(<span class="hljs-params">&#123;name=<span class="hljs-string">&quot;zhangsan&quot;</span>,age=<span class="hljs-number">12</span>,gender=<span class="hljs-string">&quot;female&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span><br><span class="hljs-built_in">console</span>.log(name,age,gender);<br>user3(); <span class="hljs-comment">//此时不会报错</span><br></code></pre></td></tr></table></figure><h1 id="剩余参数与展开语法"><a href="#剩余参数与展开语法" class="headerlink" title="剩余参数与展开语法"></a>剩余参数与展开语法</h1><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><h3 id="剩余参数定义"><a href="#剩余参数定义" class="headerlink" title="剩余参数定义"></a>剩余参数定义</h3><p><strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.认识剩余参数</span><br><span class="hljs-comment">// 当不知道参数有多少个，可以用省略号代替，省略号后面接参数名</span><br><span class="hljs-keyword">const</span> add1=<span class="hljs-function">(<span class="hljs-params">x,y,z,...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class="hljs-comment">// 2.剩余参数的本质，剩余参数是一个数组，如果没有值则是空数组</span><br><span class="hljs-keyword">const</span> add2=<span class="hljs-function">(<span class="hljs-params">x,y,z,...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x,y,args);<br>&#125;;<br>add2(<span class="hljs-number">1</span>); <span class="hljs-comment">//1 undefined []</span><br>add2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);  <span class="hljs-comment">//1 2 [4, 5, 6]</span><br><br><span class="hljs-comment">// 3.箭头函数与剩余参数</span><br><span class="hljs-comment">// 箭头函数的参数部分即使只有一个剩余参数，也不能省略括号</span><br><span class="hljs-keyword">const</span> add3=<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class="hljs-comment">// 4.使用剩余参数替代arguments获取实际参数</span><br><span class="hljs-keyword">const</span> add4=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 记住箭头函数没有arguments，因为它没有this</span><br>    <span class="hljs-comment">// arguments是类数组，而剩余参数是个数组</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br>add4(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">const</span> add5=<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(args);<br>&#125;<br><span class="hljs-comment">// 5.剩余参数的位置</span><br><span class="hljs-comment">// 剩余参数只能作为最后一个参数</span><br></code></pre></td></tr></table></figure><h3 id="剩余参数应用"><a href="#剩余参数应用" class="headerlink" title="剩余参数应用"></a>剩余参数应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.add函数</span><br><span class="hljs-keyword">const</span> add=<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span> ;i&lt;args.length;i++)&#123;<br>        sum+=args[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<br><span class="hljs-comment">// 使用reduce方法</span><br><span class="hljs-keyword">const</span> add_reduce=<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> args.reduce(<span class="hljs-function">(<span class="hljs-params">total,currentValue</span>)=&gt;</span>&#123; <span class="hljs-keyword">return</span> total+currentValue&#125;);<br>&#125;;<br><span class="hljs-built_in">console</span>.log(add_reduce(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>));<br><br><br><span class="hljs-comment">// 2.与解构赋值结合使用</span><br><span class="hljs-comment">// 当剩余参数不是作为函数的参数时，剩余参数叫做剩余元素(Rest element)</span><br><br><span class="hljs-comment">// 剩余元素+数组解构赋值</span><br><span class="hljs-keyword">const</span> [num,...args]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(num,args); <span class="hljs-comment">//1 [2, 3, 4]</span><br><br><span class="hljs-comment">// 剩余参数+数组解构赋值+箭头函数</span><br><span class="hljs-keyword">const</span> func=<span class="hljs-function">(<span class="hljs-params">[num,...args]</span>)=&gt;</span>&#123;&#125;;<br>func([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">// 剩余元素+对象解构赋值</span><br><span class="hljs-comment">// 此时剩余元素为数组</span><br><span class="hljs-keyword">const</span> &#123;x,y,...z&#125;=&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">d</span>:<span class="hljs-number">4</span>&#125;;<br><span class="hljs-built_in">console</span>.log(x,y,z); <span class="hljs-comment">//1 3 &#123;b: 2, d: 4&#125;</span><br><br><span class="hljs-comment">// 剩余参数+对象解构赋值+箭头函数</span><br><span class="hljs-keyword">const</span> fun=<span class="hljs-function">(<span class="hljs-params">&#123;m,n,...o&#125;</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(m,n,o);<br>&#125;;<br>fun(&#123;<span class="hljs-attr">m</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">n</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">p</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">z</span>:<span class="hljs-number">8</span>&#125;);<br></code></pre></td></tr></table></figure><h2 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h2><p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.展开语法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.min(...[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])); <span class="hljs-comment">// 相当于Math.min(3,1,2);</span><br><br><span class="hljs-comment">// 2.展开语法和剩余参数的区别</span><br><span class="hljs-comment">// 展开语法[3,1,2]-&gt;3,1,2</span><br><span class="hljs-comment">// 剩余参数 (3,1,2)-&gt;[3,1,2]</span><br><br><span class="hljs-comment">// 剩余参数</span><br><span class="hljs-keyword">const</span> add=<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 展开语法</span><br>    <span class="hljs-built_in">console</span>.log(...args);<br>&#125;;<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h3 id="展开语法的应用"><a href="#展开语法的应用" class="headerlink" title="展开语法的应用"></a>展开语法的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.复制数组</span><br><span class="hljs-keyword">const</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> b = a;<br><span class="hljs-built_in">console</span>.log(a === b); <span class="hljs-comment">//true 引用</span><br><br><span class="hljs-keyword">const</span> c = [...a]; <span class="hljs-comment">//等价于const c=[1,2,3];</span><br><span class="hljs-built_in">console</span>.log(a === c); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 2.合并数组</span><br><span class="hljs-keyword">const</span> m=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> n=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> i=[<span class="hljs-number">7</span>,...m,...n]; <br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">//[7,1, 2, 3, 4, 5]</span><br><br><span class="hljs-comment">// 3.字符串转数组</span><br><span class="hljs-built_in">console</span>.log(...<span class="hljs-string">&quot;app&quot;</span>); <span class="hljs-comment">// console.log(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class="hljs-built_in">console</span>.log([...<span class="hljs-string">&quot;apple&quot;</span>]); <span class="hljs-comment">// [&quot;a&quot;, &quot;p&quot;, &quot;p&quot;, &quot;l&quot;, &quot;e&quot;]</span><br><br><span class="hljs-comment">// 4.常见的类数组转数组</span><br><span class="hljs-comment">// arguments</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(...arguments); <span class="hljs-comment">//console.log(1,2,3);</span><br>    <span class="hljs-built_in">console</span>.log([...arguments]);<br>&#125;<br>func(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">// NodeList</span><br><span class="hljs-built_in">console</span>.log([...document.querySelectorAll(<span class="hljs-string">&quot;p&quot;</span>)]);<br></code></pre></td></tr></table></figure><h3 id="对象展开"><a href="#对象展开" class="headerlink" title="对象展开"></a>对象展开</h3><p>对象的展开就是相当于把对象的所有属性罗列出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.展开对象</span><br><span class="hljs-comment">// 对象的展开就是相当于把对象的所有属性罗列出来</span><br><span class="hljs-comment">// 对象必须在&#123;&#125;中展开，不能直接展开</span><br><span class="hljs-keyword">const</span> apple=&#123;<br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-attr">taste</span>:<span class="hljs-string">&quot;sweet&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(&#123;...apple&#125;); <span class="hljs-comment">//&#123;color:&quot;red&quot;,taste:&quot;sweet&quot;&#125;</span><br><br><span class="hljs-comment">// 2.合并对象</span><br><span class="hljs-comment">//新对象拥有全部的属性，相同属性，后者会覆盖前者 </span><br><span class="hljs-keyword">const</span> banana=&#123;<br>    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<br>    <span class="hljs-attr">category</span>:<span class="hljs-string">&quot;fruit&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(&#123;...apple,...banana&#125;);<br><span class="hljs-comment">// &#123;color: &quot;yellow&quot;, taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="对象展开的注意事项"><a href="#对象展开的注意事项" class="headerlink" title="对象展开的注意事项"></a>对象展开的注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.空对象的展开</span><br><span class="hljs-comment">// 如果展开空对象，是没有任何效果</span><br><span class="hljs-comment">// 对象的展开，相当于把所有对象的属性罗列出来</span><br><span class="hljs-built_in">console</span>.log(&#123;...&#123;&#125;&#125;); <span class="hljs-comment">//&#123;&#125;</span><br><br><span class="hljs-comment">// 2.非对象的展开</span><br><span class="hljs-comment">// 如果展开的不是对象，则自动会将其转为对象，再将其罗列出来</span><br><span class="hljs-built_in">console</span>.log(&#123;..<span class="hljs-number">.1</span>&#125;); <span class="hljs-comment">//&#123;&#125; 1转为对象后，并没有属性罗列</span><br><span class="hljs-built_in">console</span>.log(&#123;...null&#125;); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(&#123;...<span class="hljs-string">&quot;alex&quot;</span>&#125;); <span class="hljs-comment">//&#123;0: &quot;a&quot;, 1: &quot;l&quot;, 2: &quot;e&quot;, 3: &quot;x&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(&#123;...[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]&#125;); <span class="hljs-comment">//&#123;0: 1, 1: 2&#125;</span><br><br><br><span class="hljs-comment">// 3.含对象属性的对象的</span><br><span class="hljs-comment">// 对象属性不会继续被展开</span><br><span class="hljs-keyword">const</span> apple=&#123;<br>    <span class="hljs-attr">feature</span>:&#123;<br>        <span class="hljs-attr">taste</span>:<span class="hljs-string">&quot;甜&quot;</span><br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> pen=&#123;<br>    <span class="hljs-attr">feature</span>:&#123;<br>        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;black&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">use</span>:<span class="hljs-string">&quot;写字&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(&#123;...apple&#125;); <span class="hljs-comment">//&#123;feature: &#123;…&#125;&#125;</span><br><span class="hljs-built_in">console</span>.log(&#123;...apple,...pen&#125;); <span class="hljs-comment">//&#123;feature: &#123;…&#125;, use: &quot;写字&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="对象展开的应用"><a href="#对象展开的应用" class="headerlink" title="对象展开的应用"></a>对象展开的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.复制对象</span><br><span class="hljs-keyword">const</span> a=&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-keyword">const</span> b=&#123;...a&#125;;<br><span class="hljs-built_in">console</span>.log(a===b); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 2.用户参数和默认参数</span><br><span class="hljs-comment">// 法一： 解构赋值+函数默认参数</span><br><span class="hljs-keyword">const</span> user1=<span class="hljs-function">(<span class="hljs-params">&#123;name=<span class="hljs-string">&quot;zhangsan&quot;</span>,age=<span class="hljs-number">0</span>,gender=<span class="hljs-string">&quot;male&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(name,age,gender);<br>&#125;;<br><span class="hljs-comment">// 法二: 对象展开 +解构赋值</span><br><span class="hljs-keyword">const</span> user2=<span class="hljs-function"><span class="hljs-params">userParm</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> defaultParm=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;;<br>    <span class="hljs-comment">// 合并默认参数和用户参数，还可以对结果进行解构</span><br>    <span class="hljs-keyword">const</span> &#123;name,age,gender&#125;=&#123;...defaultParm,...userParm&#125;;<br>    <span class="hljs-built_in">console</span>.log(name,age,gender);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Set与Map"><a href="#Set与Map" class="headerlink" title="Set与Map"></a>Set与Map</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set是一系列<strong>无序、没有重复值</strong>的数据集合。 Set 对象允许你存储任何类型的<strong>唯一值</strong>，无论是原始值或者是对象引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建Set</span><br><span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br></code></pre></td></tr></table></figure><h3 id="Set实例的属性和方法"><a href="#Set实例的属性和方法" class="headerlink" title="Set实例的属性和方法"></a>Set实例的属性和方法</h3><h4 id="1-add方法"><a href="#1-add方法" class="headerlink" title="1.add方法"></a>1.add方法</h4><p>在<code>Set</code>对象尾部添加一个元素，返回该<code>Set</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建Set</span><br><span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.add(<span class="hljs-number">1</span>);<br>s.add(<span class="hljs-number">3</span>);<br>s.add(<span class="hljs-number">4</span>).add(<span class="hljs-number">5</span>);  <span class="hljs-comment">//Set(4) &#123;1, 3, 4, 5&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-has方法"><a href="#2-has方法" class="headerlink" title="2.has方法"></a>2.has方法</h4><p>返回一个布尔值，表示该值在<code>Set</code>中存在与否。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(s.has(<span class="hljs-number">1</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="3-delete-方法"><a href="#3-delete-方法" class="headerlink" title="3.delete 方法"></a>3.delete 方法</h4><p>移除<code>Set</code>中指定的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">s.delete(<span class="hljs-number">1</span>); <span class="hljs-comment">//删除元素1</span><br></code></pre></td></tr></table></figure><h4 id="4-clear方法"><a href="#4-clear方法" class="headerlink" title="4.clear方法"></a>4.clear方法</h4><p>移除<code>Set</code>对象内的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">s.clear();<br></code></pre></td></tr></table></figure><h4 id="5-forEach-方法"><a href="#5-forEach-方法" class="headerlink" title="5.forEach()方法"></a>5.forEach()方法</h4><p><code>forEach</code> 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 按照成员添加进集合的顺序遍历的</span><br><span class="hljs-comment">// 回调函数后面的参数是用来改变上下文的</span><br>s.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value,key,set</span>)</span>&#123;<br>    <span class="hljs-comment">// 在set中，value与key是等价的</span><br>    <span class="hljs-built_in">console</span>.log(value,key,set);<br>&#125;,<span class="hljs-built_in">document</span>);<br><br></code></pre></td></tr></table></figure><h3 id="6-size属性"><a href="#6-size属性" class="headerlink" title="6.size属性"></a>6.size属性</h3><p>判断Set实例中有多少元素。</p><h3 id="Set的构造函数"><a href="#Set的构造函数" class="headerlink" title="Set的构造函数"></a>Set的构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.数组</span><br><span class="hljs-keyword">const</span> s =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">console</span>.log(s);  <span class="hljs-comment">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class="hljs-comment">// 2.字符串、arguments、NodeList、Set</span><br><span class="hljs-comment">//字符串做参数</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-string">&quot;hi&quot;</span>)) <span class="hljs-comment">//Set(2) &#123;&quot;h&quot;, &quot;i&quot;&#125;</span><br><br><span class="hljs-comment">//arguments做参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-built_in">arguments</span>));<br>&#125;<br>fun(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//NodeList做参数</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;p&#x27;</span>))); <br><span class="hljs-comment">//Set(3) &#123;p, p, p&#125;</span><br><br><span class="hljs-comment">// Set实例做参数</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(s));<br><span class="hljs-comment">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class="hljs-comment">// 和原来完全相同，但不等于原来的，相当于复制。</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(s)===s); <br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h2 id="Set重复判定方式"><a href="#Set重复判定方式" class="headerlink" title="Set重复判定方式"></a>Set重复判定方式</h2><p>Set 对重复值的判断基本遵循严格相等(===)， 但是对于NaN的判断与===不同，Set中NaN等于NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Set实例会把2个NaN看做相等的元素</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span>===<span class="hljs-literal">NaN</span> ); <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-literal">NaN</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">NaN</span>]));<br><span class="hljs-comment">//Set(2) &#123;NaN, 2&#125;</span><br><br><br><span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>s.add(&#123;&#125;).add(&#123;&#125;);<br><span class="hljs-built_in">console</span>.log(s); <span class="hljs-comment">//此时s中有2个空对象</span><br></code></pre></td></tr></table></figure><h2 id="Set应用"><a href="#Set应用" class="headerlink" title="Set应用"></a>Set应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.数组或字符串去重时</span><br><span class="hljs-comment">//Set(3) &#123;1, 2, 3&#125;</span><br><span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">console</span>.log(s);<br><br><span class="hljs-comment">// 再将Set实例转换为数组</span><br><span class="hljs-comment">// ①使用forEach</span><br><span class="hljs-keyword">let</span> arr=[];<br>s.forEach(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>arr.push(value));<br><span class="hljs-comment">// ②使用展开语法</span><br><span class="hljs-built_in">console</span>.log([...s]);<br><br><span class="hljs-comment">// 2.字符串去重</span><br><span class="hljs-keyword">const</span> s1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-string">&#x27;abbacd&#x27;</span>);<br><span class="hljs-comment">// 将s1转为数组后，再用数组的join方法转为字符串</span><br><span class="hljs-built_in">console</span>.log([...s1].join(<span class="hljs-string">&quot;&quot;</span>));<br><br><span class="hljs-comment">// 3.存放dom元素</span><br><span class="hljs-keyword">const</span> s2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;p&quot;</span>));<br><span class="hljs-comment">// 使用forEach改变p标签文本颜色</span><br>s2.forEach(<span class="hljs-function">(<span class="hljs-params">elem</span>)=&gt;</span>elem.style.color=<span class="hljs-string">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始值</a>) 都可以作为一个键或一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.Map和对象本质上都是键值对的集合</span><br><span class="hljs-comment">// 对象</span><br><span class="hljs-keyword">const</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;alex&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">19</span><br>&#125;<br><span class="hljs-comment">// Map</span><br><span class="hljs-keyword">const</span> m=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>m.set(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;alex&#x27;</span>);<br>m.set(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-built_in">console</span>.log(m);<br><br><span class="hljs-comment">// 2.Map和对象的区别</span><br><span class="hljs-comment">// 对象一般使用字符串当做键</span><br><span class="hljs-keyword">const</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;alex&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// Map的键可以为基本数据类型，也可以为引用数据类型。</span><br><span class="hljs-comment">// 基本数据类型：数字、字符串、布尔值、undefined、null</span><br><span class="hljs-comment">// 引用数据类型：对象、数组、Set、Map、函数等</span><br><span class="hljs-keyword">const</span> mm=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>mm.set(<span class="hljs-literal">true</span>,<span class="hljs-string">&#x27;true&#x27;</span>);<br>mm.set(&#123;&#125;,<span class="hljs-string">&#x27;object&#x27;</span>);<br>mm.set(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]),<span class="hljs-string">&#x27;set&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(mm);<br><span class="hljs-comment">// &#123;true =&gt; &quot;true&quot;, &#123;…&#125; =&gt; &quot;object&quot;, Set(2) =&gt; &quot;set&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="方法和属性"><a href="#方法和属性" class="headerlink" title="方法和属性"></a>方法和属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.set方法</span><br><span class="hljs-comment">// 使用set添加的新成员，键如果已经存在，后添加的键值对覆盖已有的</span><br><span class="hljs-keyword">const</span> m=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>m.set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>).set(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;true&quot;</span>).set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-built_in">console</span>.log(m);<br><br><span class="hljs-comment">// 2.get方法，用于获取指定成员</span><br><span class="hljs-built_in">console</span>.log(m.get(<span class="hljs-string">&#x27;age&#x27;</span>)); <span class="hljs-comment">//20</span><br><span class="hljs-built_in">console</span>.log(m.get(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">// 3.has方法 用于判断是否有指定的键</span><br><span class="hljs-built_in">console</span>.log(m.has(<span class="hljs-string">&#x27;age&#x27;</span>));<br><br><span class="hljs-comment">// 4.delete方法</span><br><span class="hljs-comment">// 删除不存在的成员，什么都不会发生，也不会报错</span><br>m.delete(<span class="hljs-string">&#x27;age&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(m);<br><br><span class="hljs-comment">// 5.clear方法 删除所有的成员</span><br>m.clear();<br><br><span class="hljs-comment">// 6.forEach()方法</span><br><span class="hljs-keyword">const</span> mm=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>mm.set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>).set(<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;male&quot;</span>).set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>mm.forEach(<span class="hljs-function">(<span class="hljs-params">value,index,map</span>)=&gt;</span><span class="hljs-built_in">console</span>.log(value,index,map==mm));<br><span class="hljs-comment">// 12 &quot;age&quot;  true</span><br><span class="hljs-comment">// male gender true</span><br><span class="hljs-comment">// xiaoming name true</span><br><br><span class="hljs-comment">// 7.size属性</span><br><span class="hljs-built_in">console</span>.log(mm.size); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><h3 id="Map构造函数的参数"><a href="#Map构造函数的参数" class="headerlink" title="Map构造函数的参数"></a>Map构造函数的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.只能传二维数组，必须体现键和值</span><br><span class="hljs-keyword">const</span> m1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;alex&quot;</span>],[<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>]]);<br><span class="hljs-built_in">console</span>.log(m1);<br><span class="hljs-comment">// Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125;</span><br><br><span class="hljs-comment">// 2.Set, Map等</span><br><span class="hljs-comment">// Set中也必须体现键和值</span><br><span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([[<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;male&quot;</span>],[<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;xiaoming&quot;</span>]]);<br><span class="hljs-keyword">const</span> m2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(s);<br><span class="hljs-built_in">console</span>.log(m2); <br><span class="hljs-comment">//Map(2) &#123;&quot;gender&quot; =&gt; &quot;male&quot;, &quot;name&quot; =&gt; &quot;xiaoming&quot;&#125;</span><br><br><span class="hljs-keyword">const</span> m3=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>(m1);<br><span class="hljs-built_in">console</span>.log(m3, m3==m1);<br><span class="hljs-comment">//Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125; false</span><br></code></pre></td></tr></table></figure><h3 id="Map注意事项"><a href="#Map注意事项" class="headerlink" title="Map注意事项"></a>Map注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.Map中判断键名是否相同</span><br><span class="hljs-comment">// 基本遵循严格相等(===)</span><br><span class="hljs-comment">// 例外就是Map中NaN等于NaN</span><br><br><span class="hljs-keyword">const</span> m1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>m1.set(<span class="hljs-literal">NaN</span>,<span class="hljs-number">1</span>).set(<span class="hljs-literal">NaN</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(m1); <span class="hljs-comment">//Map(1) &#123;NaN =&gt; 2&#125;</span><br><br><span class="hljs-comment">// 2.什么时候使用Map什么使用对象</span><br><span class="hljs-comment">// 2.1如果只需要Key-&gt;Value结构</span><br><span class="hljs-comment">// 2.2或者需要除了字符串以为的值做键，使用Map更合适</span><br><span class="hljs-comment">// 只有模拟现实世界的实体的时候才会使用对象</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> [p1, p2, p3] = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="javascript"><span class="hljs-comment">// 二维数组做Map构造函数的参数</span></span><br><span class="javascript"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([</span><br><span class="javascript">    [p1, &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;20px&quot;</span> &#125;],</span><br><span class="javascript">    [p2, &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;pink&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;20px&quot;</span> &#125;],</span><br><span class="javascript">    [p3, &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;20px&quot;</span> &#125;]</span><br><span class="javascript">]);</span><br><span class="javascript">m.forEach(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> p <span class="hljs-keyword">in</span> value)&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 有点难理解，多想想还是能理解的</span></span><br><span class="javascript">        key.style[p]=value[p];</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SeT/Map总结</p><p><img src="https://i.loli.net/2021/06/10/xEzm7YcGRnAQhOs.png" alt="image-20210610175416433"></p><p><img src="https://i.loli.net/2021/06/10/E1XHQBYURp8IgjC.png" alt="image-20210610175506099"></p><p><img src="https://i.loli.net/2021/06/10/JNXSG9yTZjbPFdK.png" alt="image-20210610175655315"></p><p><img src="https://i.loli.net/2021/06/10/aXh4TLvYSuf1qQE.png" alt="image-20210610175710050"></p><p><img src="https://i.loli.net/2021/06/10/FOBbacWuGtU1I23.png" alt="image-20210610175745097"></p><p><img src="https://i.loli.net/2021/06/10/drQIFyD9Gmx2YJ7.png" alt="image-20210610175848667"></p><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610180623.png" alt="image-20210610180620847"></p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Iterator是如下的过程：Symbol.iterator(可遍历对象的生成方法)-&gt;it(可遍历对象)-&gt;next()-&gt;next()-&gt;(知道done为true)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组的.__proto__原型中有Symbol.iterator这个方法</span><br><span class="hljs-comment">// 而这个方法不符合命名规范，因此用方括号来调用。</span><br><br><span class="hljs-comment">// Symbol.iterator 可遍历对象的生成方法</span><br><span class="hljs-comment">// it：可遍历对象 (可迭代对象)</span><br><span class="hljs-keyword">const</span> it = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>][<span class="hljs-built_in">Symbol</span>.iterator]();<br><span class="hljs-built_in">console</span>.log(it); <span class="hljs-comment">//Array Iterator &#123;&#125;</span><br><br><span class="hljs-comment">// value表示值，done表示遍历还没有完成</span><br><span class="hljs-built_in">console</span>.log(it.next());<span class="hljs-comment">//&#123;value: 1, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(it.next()); <span class="hljs-comment">//&#123;value: 2, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(it.next()); <span class="hljs-comment">//&#123;value: undefined, done: true&#125;</span><br><br><br></code></pre></td></tr></table></figure><p>为什么需要Iterator遍历器</p><p>遍历数组： for循环、forEach方法 ，遍历对象：for in循环。Iterator 遍历器是一个统一的遍历方式</p><h3 id="for-of-用法"><a href="#for-of-用法" class="headerlink" title="for of 用法"></a>for of 用法</h3><p>for of将下面Iterator过程封装起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> it =arr[<span class="hljs-built_in">Symbol</span>.iterator]();<br><span class="hljs-keyword">let</span> next=it.next();<br><span class="hljs-keyword">while</span>(!next.done)&#123;<br>    <span class="hljs-built_in">console</span>.log(next.value);<br>    next=it.next();<br>&#125;<br></code></pre></td></tr></table></figure><p>for of循环只会遍历出那些done为false时对应的value值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> arr)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>for of可以和break、continue一起使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> arr2)&#123;<br>    <span class="hljs-keyword">if</span>(i===<span class="hljs-number">7</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>在for of循环中获取索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// keys()得到的是索引的可遍历对象，可以遍历出索引值</span><br><span class="hljs-keyword">const</span> arr3=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> keys <span class="hljs-keyword">of</span> arr3.keys())&#123;<br>    <span class="hljs-built_in">console</span>.log(keys); <span class="hljs-comment">//</span><br>&#125;<br><span class="hljs-comment">// values()得到的是值的可遍历对象，可以遍历出值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> arr3.values())&#123;<br>    <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">// a b c d</span><br>&#125;<br><span class="hljs-comment">// entries()可以得到索引和值组成的数组的可遍历对象</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> entries <span class="hljs-keyword">of</span> arr3.entries())&#123;<br>    <span class="hljs-built_in">console</span>.log(entries);<br>&#125;<br><span class="hljs-comment">// 结合解构赋值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [index, value] <span class="hljs-keyword">of</span> arr3.entries())&#123;<br>    <span class="hljs-built_in">console</span>.log(index,value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="可遍历"><a href="#可遍历" class="headerlink" title="可遍历"></a>可遍历</h3><p>只要有Symbol.iterator方法，并且这个方法可以生成可遍历对象，就是可遍历的。</p><p>只要可遍历，就可以使用for…of循环来统一遍历。</p><h4 id="原生可遍历"><a href="#原生可遍历" class="headerlink" title="原生可遍历"></a>原生可遍历</h4><p>数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125; <span class="hljs-comment">// 1 2 3</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]))&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125; <span class="hljs-comment">// 4 5 6</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;p&#x27;</span>))&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>    i.style.color=<span class="hljs-string">&#x27;red&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="非原生可遍历"><a href="#非原生可遍历" class="headerlink" title="非原生可遍历"></a>非原生可遍历</h4><p>没有Symbol.iterator属性的，可以为它手动添加该属性就可以使用for…of循环了。</p><p>1.一般的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person =&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;;<br><span class="hljs-comment">// 给一般的对象手动添加Symbol.iterator属性</span><br>person[<span class="hljs-built_in">Symbol</span>.iterator]=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>&#123;<br>            index++;<br>            <span class="hljs-keyword">if</span>(index===<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    <span class="hljs-attr">value</span>:person.age,<br>                    <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index===<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    <span class="hljs-attr">value</span>:person.sex,<br>                    <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    <span class="hljs-attr">value</span>:<span class="hljs-literal">undefined</span>,<br>                    <span class="hljs-attr">done</span>:<span class="hljs-literal">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> person)&#123;<br>    <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.有length和索引值的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj=&#123;<br>    <span class="hljs-number">0</span>:<span class="hljs-string">&#x27;alex&#x27;</span>,<br>    <span class="hljs-number">1</span>:<span class="hljs-string">&#x27;male&#x27;</span>,<br>    <span class="hljs-attr">length</span>:<span class="hljs-number">2</span><br>&#125;<br>obj[<span class="hljs-built_in">Symbol</span>.iterator]=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">let</span> value,done;<br>            <span class="hljs-keyword">if</span>(index&lt;obj.length)&#123;<br>                value=obj[index];<br>                done=<span class="hljs-literal">false</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                done=<span class="hljs-literal">true</span>;<br>            &#125;<br>            index++;<br>            <span class="hljs-keyword">return</span>&#123;<br>                value,<br>                done<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 或者直接使用数组原型链的Symbol.iterator属性</span><br>obj[<span class="hljs-built_in">Symbol</span>.iterator]=<span class="hljs-built_in">Array</span>.prototype[<span class="hljs-built_in">Symbol</span>.iterator];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> obj)&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用Iterator的场合"><a href="#使用Iterator的场合" class="headerlink" title="使用Iterator的场合"></a>使用Iterator的场合</h3><p> 1.数组的展开运算符</p><p>只要是原生可遍历的，就可以使用数组的展开运算。数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(...[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]); <span class="hljs-comment">//1 2 3</span><br><span class="hljs-built_in">console</span>.log(...<span class="hljs-string">&quot;str&quot;</span>); <span class="hljs-comment">// s t r</span><br><span class="hljs-built_in">console</span>.log(...new <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]));<br></code></pre></td></tr></table></figure><p>2.数组的解构赋值</p><p>只要是原生可遍历的，就可以使用数组的进行解构赋值。因为可以在解构赋值前，进行展开运算让其变为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> [a,b]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-comment">// 在解构赋值前，&quot;hi&quot;进行了展开运算 [...&quot;hi&quot;]</span><br><span class="hljs-keyword">const</span> [c,d]=<span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-keyword">const</span> [e,f]=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]);<br><span class="hljs-built_in">console</span>.log(a,b,c,d,e,f);<br><br></code></pre></td></tr></table></figure><h3 id="Iterator总结"><a href="#Iterator总结" class="headerlink" title="Iterator总结"></a>Iterator总结</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222130.png" alt="image-20210610222129343"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222157.png" alt="image-20210610222156497"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222305.png" alt="image-20210610222304196"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222325.png" alt="image-20210610220808524"></p><h1 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h1><h2 id="字符串的新增方法"><a href="#字符串的新增方法" class="headerlink" title="字符串的新增方法"></a>字符串的新增方法</h2><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p><strong><code>includes()</code></strong> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.基本用法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;abc&#x27;</span>.includes(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;abc&#x27;</span>.includes(<span class="hljs-string">&#x27;ab&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;abc&#x27;</span>.includes(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 2.第二个参数</span><br><span class="hljs-comment">// 表示开始搜索的位置，默认是0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;abc&#x27;</span>.includes(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="padStart-和padEnd"><a href="#padStart-和padEnd" class="headerlink" title="padStart()和padEnd()"></a>padStart()和padEnd()</h3><p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">str.padStart(targetLength [, padString])<br></code></pre></td></tr></table></figure></blockquote><p><code>targetLength</code></p><p>当前字符串需要填充到的目标长度。<strong>如果这个数值小于当前字符串的长度，则返回当前字符串本身。</strong></p><p><code>padString</code> 可选</p><p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 “ “（空格）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;abc&#x27;</span>.padStart(<span class="hljs-number">10</span>);         <span class="hljs-comment">// &quot;       abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.padStart(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;foo&quot;</span>);  <span class="hljs-comment">// &quot;foofoofabc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.padStart(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;123465&quot;</span>); <span class="hljs-comment">// &quot;123abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.padStart(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;0&quot;</span>);     <span class="hljs-comment">// &quot;00000abc&quot;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.padStart(<span class="hljs-number">1</span>);          <span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p><strong><code>padEnd()</code></strong> 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p><h3 id="trimStart-和trimEnd"><a href="#trimStart-和trimEnd" class="headerlink" title="trimStart()和trimEnd()"></a>trimStart()和trimEnd()</h3><p><strong><code>trimStart()</code></strong> 方法从字符串的开头删除空格。<code>trimEnd() </code>方法从一个字符串的末端移除空白字符。**<code>trim()</code>** 方法会从一个字符串的两端删除空白字符。</p><p><code>trimLeft()</code> 是<code>trimStart()</code>的别名。<code>trimRight()</code> 是<code>trimEnd() </code>的别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s=<span class="hljs-string">&quot;   abc  &quot;</span>;<br><span class="hljs-built_in">console</span>.log(s.trimStart()); <span class="hljs-comment">//&quot;abc  &quot;</span><br><span class="hljs-built_in">console</span>.log(s.trimEnd()); <span class="hljs-comment">//&quot;   abc&quot;</span><br><span class="hljs-built_in">console</span>.log(s.trim()); <span class="hljs-comment">//&quot;abc&quot;</span><br><span class="hljs-built_in">console</span>.log(s); <span class="hljs-comment">//&quot;   abc  &quot;</span><br></code></pre></td></tr></table></figure><h2 id="数组新增方法"><a href="#数组新增方法" class="headerlink" title="数组新增方法"></a>数组新增方法</h2><h3 id="includes-1"><a href="#includes-1" class="headerlink" title="includes()"></a>includes()</h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.includes(valueToFind[, fromIndex])<br></code></pre></td></tr></table></figure></blockquote><p><code>valueToFind</code></p><p>需要查找的元素值。<strong>Note:</strong> 使用 <code>includes()</code>比较字符串和字符时是区分大小写。</p><p><code>fromIndex</code> 可选</p><p>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 。如果计算出的索引小于 0，则整个数组都会被搜索。默认为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">2</span>);     <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">4</span>);     <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].includes(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">NaN</span>].includes(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])<br></code></pre></td></tr></table></figure></blockquote><p><code>arrayLike</code></p><p>想要转换成数组的伪数组对象或可迭代对象。</p><p><code>mapFn</code> 可选</p><p>如果指定了该参数，新数组中的每个元素会执行该回调函数。</p><p><code>thisArg</code> 可选</p><p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从 String 生成数组</span><br><span class="hljs-built_in">Array</span>.from(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span><br><br><span class="hljs-comment">//从Set生成数组</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>]);<br><span class="hljs-built_in">Array</span>.from(set);<br><span class="hljs-comment">// [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span><br>[...new <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])]; <span class="hljs-comment">//使用展开语法会更方便</span><br><br><span class="hljs-comment">//从 Map 生成数组</span><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>]]);<br><span class="hljs-built_in">Array</span>.from(map);<br><span class="hljs-comment">// [[1, 2], [2, 4], [4, 8]]</span><br><br><span class="hljs-keyword">const</span> mapper = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>], [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]]);<br><span class="hljs-built_in">Array</span>.from(mapper.values());<br><span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><br><span class="hljs-built_in">Array</span>.from(mapper.keys());<br><span class="hljs-comment">// [&#x27;1&#x27;, &#x27;2&#x27;];</span><br></code></pre></td></tr></table></figure><p>拥有length的任意对象都可以通过Array.from()转换为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj=&#123;<span class="hljs-attr">length</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(obj)); <br><span class="hljs-comment">// [undefined, undefined]</span><br><br><span class="hljs-keyword">const</span> obj1=&#123;<span class="hljs-attr">length</span>:<span class="hljs-number">2</span>,<span class="hljs-number">0</span>:<span class="hljs-string">&quot;liu&quot;</span>,<span class="hljs-number">1</span>:<span class="hljs-string">&quot;jiaqi&quot;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&quot;haha&quot;</span>&#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(obj1)); <span class="hljs-comment">//[&quot;liu&quot;, &quot;jiaqi&quot;]</span><br></code></pre></td></tr></table></figure><p>在Array.from()中使用箭头函数</p><p>作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在Array.from()中使用箭头函数</span><br><span class="hljs-comment">// 作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].map(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>value*<span class="hljs-number">2</span>)); <span class="hljs-comment">//2 4 6</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(&#123;<span class="hljs-attr">length</span>:<span class="hljs-number">4</span>&#125;,<span class="hljs-function">(<span class="hljs-params">value,index</span>)=&gt;</span>value=index*<span class="hljs-number">2</span>));<br><span class="hljs-comment">// 0 2 4 6</span><br></code></pre></td></tr></table></figure><h3 id="find-和findIndex"><a href="#find-和findIndex" class="headerlink" title="find()和findIndex()"></a>find()和findIndex()</h3><p> <code>find()</code> 方法返回数组中满足提供的测试函数的<strong>第一个元素</strong>的值，否则返回undefined。</p><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.find(callback[, thisArg])<br></code></pre></td></tr></table></figure></blockquote><p><code>callback</code>在数组每一项上执行的函数，接收 3 个参数：</p><ul><li><code>element</code>当前遍历到的元素。</li><li><code>index</code>可选 当前遍历到的索引。</li><li><code>array</code>可选 数组本身。</li></ul><p><code>thisArg</code>可选,执行回调时用作<code>this</code> 的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//返回找到的第一个质数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPrime</span>(<span class="hljs-params">element, index, array</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> start = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">while</span> (start &lt;= <span class="hljs-built_in">Math</span>.sqrt(element)) &#123;<br>    <span class="hljs-keyword">if</span> (element % start++ &lt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>].find(isPrime)); <span class="hljs-comment">// undefined, not found</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>].find(isPrime)); <span class="hljs-comment">// 5</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用对象的属性查找数组里的对象</span><br><span class="hljs-keyword">var</span> inventory = [<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;apples&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bananas&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;cherries&#x27;</span>, <span class="hljs-attr">quantity</span>: <span class="hljs-number">5</span>&#125;<br>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findCherries</span>(<span class="hljs-params">fruit</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> fruit.name === <span class="hljs-string">&#x27;cherries&#x27;</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(inventory.find(findCherries)); <span class="hljs-comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span><br></code></pre></td></tr></table></figure><h2 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.assign(target, ...sources)<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> apple = &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-attr">taste</span>: <span class="hljs-string">&quot;sweet&quot;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> banana = &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;yellow&quot;</span>,<br>    <span class="hljs-attr">category</span>: <span class="hljs-string">&quot;fruit&quot;</span><br>&#125;<br><span class="hljs-comment">// Object.assign直接合并到了第一个对象中，返回的就是合并后的对象</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(apple,banana));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(apple,banana)===apple); <br><span class="hljs-comment">//因为此时的apple 已经被改变了 true</span><br><br><span class="hljs-comment">// 对象是引用类型的，Object.assign会直接修改第一个对象。</span><br><span class="hljs-comment">// 如果想要原来的对象不被修改，可以第一个参数放空对象</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,apple,banana));<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Object.assign(目标对象，源对象);</span><br><span class="hljs-comment">// 1.基本数据类型作为源对象</span><br><span class="hljs-comment">// 与对象的展开类似，先转换为对象，再合并</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<span class="hljs-literal">null</span>)); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<span class="hljs-number">22</span>)); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<span class="hljs-number">22</span>)); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<span class="hljs-string">&quot;str&quot;</span>)); <span class="hljs-comment">//&#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;&#125;</span><br><br><span class="hljs-comment">// 2.同名属性的替换</span><br><span class="hljs-comment">// 后面的属性直接覆盖前面的属性</span><br><span class="hljs-keyword">const</span> apple = &#123;<br>    <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;蓝色&quot;</span>,<span class="hljs-string">&quot;紫色&quot;</span>],<br>    <span class="hljs-attr">taste</span>: <span class="hljs-string">&quot;sweet&quot;</span><br>&#125;<br><span class="hljs-keyword">const</span> banana = &#123;<br>    <span class="hljs-attr">color</span>: [<span class="hljs-string">&quot;红色&quot;</span>,<span class="hljs-string">&quot;黄色&quot;</span>],<br>    <span class="hljs-attr">category</span>: <span class="hljs-string">&quot;fruit&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.assign(apple,banana)); <span class="hljs-comment">//&#123;color:[&quot;红色&quot;, &quot;黄色&quot;], taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user=<span class="hljs-function"><span class="hljs-params">useroptions</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> defaults=&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;alex&quot;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> options=<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,defaults,useroptions);<br>    <span class="hljs-built_in">console</span>.log(options);<br>&#125;;<br>user();<br></code></pre></td></tr></table></figure><h3 id="Object-keys-、Object-values-、Object-entries"><a href="#Object-keys-、Object-values-、Object-entries" class="headerlink" title="Object.keys()、Object.values()、Object.entries()"></a>Object.keys()、Object.values()、Object.entries()</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Alex&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(person)); <span class="hljs-comment">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(person)); <span class="hljs-comment">// [&quot;Alex&quot;, 18]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.entries(person)); <span class="hljs-comment">// [ [&quot;name&quot;, &quot;Alex&quot;],[&quot;age&quot;, 18]]</span><br></code></pre></td></tr></table></figure><h4 id="与数组的类似方法的区别"><a href="#与数组的类似方法的区别" class="headerlink" title="与数组的类似方法的区别"></a>与数组的类似方法的区别</h4><p>数组的keys(), values(), entries()等方法都是实例方法，返回的都是可遍历对象。对象的Object.keys(), Object.values(),Object.values()等方法返回的都是数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.与数组类似的方法的区别</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].keys()); <span class="hljs-comment">// 返回可遍历对象</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].values()); <span class="hljs-comment">// 返回可遍历对象</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>].entries()); <span class="hljs-comment">// 返回可遍历对象</span><br></code></pre></td></tr></table></figure><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Alex&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key,value] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(person))&#123;<br>    <span class="hljs-built_in">console</span>.log(key,value)<br>&#125;<br><br><span class="hljs-comment">// Object.keys(), Object.values(), Object.entires()</span><br><span class="hljs-comment">// 这三个方法并不能保证顺序，和for...in 一样无法保证顺序</span><br></code></pre></td></tr></table></figure><h2 id="新增方法总结"><a href="#新增方法总结" class="headerlink" title="新增方法总结"></a>新增方法总结</h2><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160239.png" alt="image-20210611160231073"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160311.png" alt="image-20210611160310273"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160445.png" alt="image-20210611160444694"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160657.png" alt="image-20210611160655803"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160735.png" alt="image-20210611160733628"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160905.png" alt="image-20210611160904401"></p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611181352.png" alt="image-20210611181350553"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.实例化构造函数生成实例对象</span><br><span class="hljs-comment">// Promise 解决的不是回调函数，而是用于解决回调地域的问题。</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alex&#x27;</span> &#125;);<br>    <span class="hljs-comment">// reject(new Error(&quot;reason&quot;));</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(p);<br><span class="hljs-comment">// 2.Promise的状态</span><br><span class="hljs-comment">// Promise的状态一旦完成变化，就不会再改变了 </span><br><span class="hljs-comment">// Promise有3种状态，一开始是pending(未完成),执行resolve,变成fulfilled(resolved)已成功, 执行reject，变成rejected，已失败</span><br><span class="hljs-comment">// 执行resolve();</span><br><span class="hljs-comment">// pending-&gt;fulfilled</span><br><span class="hljs-comment">// 执行reject();</span><br><span class="hljs-comment">// pending-&gt;rejected</span><br><br><span class="hljs-comment">// 3.then()方法</span><br><span class="hljs-comment">// 当Promise的状态变为fulfilled时，执行第一个then()方法</span><br><span class="hljs-comment">// 当Promise的状态变为rejected时，执行第二个then()方法</span><br>p.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;success&quot;</span>, data);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error&quot;</span>,err);<br>&#125;);<br><br><span class="hljs-comment">// 4.resolve和reject函数的参数</span><br><span class="hljs-comment">// 执行resole或者reject函数所传的参数，可以被then中的回调函数接收</span><br></code></pre></td></tr></table></figure><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183500.png" alt="image-20210611183459134"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183555.png" alt="image-20210611183554286"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.then()什么时候执行</span><br><span class="hljs-comment">// pending-&gt;fulfilled时，执行then的第一个回调函数</span><br><span class="hljs-comment">// pending-&gt;rejected时，执行then的第二个回调函数</span><br><br><span class="hljs-comment">// 2.执行后的返回值</span><br><span class="hljs-comment">// then()执行后返回一个新的Promise对象，返回的新的Promise对象又可以继续调用then();</span><br><span class="hljs-keyword">const</span> p =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    reject();<br>&#125;);<br><span class="hljs-comment">// 在then()的回调函数中，return后面的东西，会用Promise包装一下</span><br><span class="hljs-comment">// return undefined 等价于 return new Promise((resolve)=&gt;&#123;resolve(undefined);&#125;);</span><br><span class="hljs-comment">// then()执行后返回新的Promise对象，新的Promise对象调用then，默认会返回成功状态的Promise对象</span><br><span class="hljs-comment">// 如果想要返回失败状态的Promise对象，return的时候写完整。return new Promise((resolve,reject)=&gt;&#123;reject();&#125;)</span><br><br>p.then(<br>    <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;success1&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error1&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>    &#125;<br>).then(<br>    <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;success2&#x27;</span>,data);<br>    &#125;,<br>    <span class="hljs-function">()=&gt;</span>&#123;<br>        <br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error2&#x27;</span>);<br>    &#125;<br>);<br><br><span class="hljs-comment">// 3.then()方法返回的Promise对象的状态是如何改变的</span><br></code></pre></td></tr></table></figure><h3 id="使用Promise解决回调地狱"><a href="#使用Promise解决回调地狱" class="headerlink" title="使用Promise解决回调地狱"></a>使用Promise解决回调地狱</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题</span><br><span class="hljs-keyword">const</span> move = <span class="hljs-function">(<span class="hljs-params">el, &#123; x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span> &#125; = &#123;&#125;, end = () =&gt; &#123; &#125;</span>) =&gt;</span> &#123;<br>    el.style.transform = <span class="hljs-string">`translate3d(<span class="hljs-subst">$&#123;x&#125;</span>px,<span class="hljs-subst">$&#123;y&#125;</span>px,0)`</span>;<br>    el.addEventListener(<br>        <span class="hljs-string">&#x27;transitionend&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>            end();<br>        &#125;, <span class="hljs-literal">false</span><br>    );<br>&#125;;<br><span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>);<br><span class="hljs-comment">// document.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="hljs-comment">//     move(box,&#123;x:150&#125;,()=&gt;&#123;</span><br><span class="hljs-comment">//         move(box,&#123;x:150,y:150&#125;,()=&gt;&#123;</span><br><span class="hljs-comment">//             move(box,&#123;y:150&#125;,()=&gt;&#123;</span><br><span class="hljs-comment">//                 move(box,&#123;x:0,y:0&#125;);</span><br><span class="hljs-comment">//             &#125;)</span><br><span class="hljs-comment">//         &#125;)</span><br><span class="hljs-comment">//     &#125;)</span><br><span class="hljs-comment">// &#125;,false);</span><br><span class="hljs-keyword">const</span> movePromise = <span class="hljs-function">(<span class="hljs-params">el, point</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>        move(el, point, <span class="hljs-function">() =&gt;</span> &#123;<br>            resolve();<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    movePromise(box, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">150</span> &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> movePromise(box, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">150</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">150</span> &#125;)<br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> movePromise(box, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">150</span> &#125;)<br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> movePromise(box, &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;)<br>    &#125;);<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.尽管then()方法的第一个回调函数可以传成功后执行的回调函数，第二个传失败后执行的回调函数</span><br><span class="hljs-comment">// 2.但为了更好地语义化，一般只在then()中传成功后执行的，catch()传reject()后执行的回调函数</span><br><span class="hljs-comment">// catch专门用来处理rejected的状态，catch的本质是then的特例</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// resolve(123);</span><br>    reject(<span class="hljs-string">&#x27;reason&#x27;</span>);<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>    <span class="hljs-comment">// 同样会默认返回一个成功的Promise对象。</span><br>    <span class="hljs-comment">// 如果想要返回一个错误的Promise对象</span><br>    <span class="hljs-comment">// 可以throw一个错误</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;errrrr&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">// 3.catch()可以捕获前面的错误</span><br><span class="hljs-comment">// 一般总是Promise对象后面要跟着catch方法，这样可以处理Promise内部发生的错误</span><br></code></pre></td></tr></table></figure><h3 id="Promise-resolve-和Promise-reject"><a href="#Promise-resolve-和Promise-reject" class="headerlink" title="Promise.resolve()和Promise.reject()"></a>Promise.resolve()和Promise.reject()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.Promise.resolve()</span><br><span class="hljs-comment">// 是成功状态Promise的一种简写形式</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123; resolve(<span class="hljs-string">&quot;foo&quot;</span>); &#125;);<br><span class="hljs-comment">// 简写</span><br><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;foo&quot;</span>);<br><br><span class="hljs-comment">//① 参数：一般参数</span><br><span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">&quot;foo&quot;</span>).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(data));<br><span class="hljs-comment">//②当Promise.resolve()接收的是Promise对象时，直接返回的是这个Promise对象，什么也不做</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;我执行了&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">Promise</span>.resolve(p1).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Promise</span>.resolve(p1) === p1); <span class="hljs-comment">//true</span><br><span class="hljs-comment">// 当resolve函数接收的是Promise对象时，后面的then会根据传递的Promise对象的状态变化决定执行哪一个回调</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> resolve(p1)).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(data) &#125;);<br><br><span class="hljs-comment">// ③具有then方法的对象，对象中的then()方法和new Promise()差不多</span><br><span class="hljs-keyword">const</span> thenable=&#123;<br>    <span class="hljs-comment">// 和new Promise()里的参数差不多</span><br>    <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;thenable&quot;</span>);<br>        resolve(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">Promise</span>.resolve(thenable).then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span><span class="hljs-built_in">console</span>.log(data),<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span><span class="hljs-built_in">console</span>.log(err));<br><br><span class="hljs-comment">// 2.Promise.reject();</span><br><span class="hljs-comment">// 是失败状态的一种简写形式</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    reject(<span class="hljs-string">&#x27;reason&#x27;</span>);<br>&#125;);<br><span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;reason&#x27;</span>);<br><span class="hljs-comment">// 不管什么参数都会原封不动的向后传递，作为后续方法的参数</span><br><span class="hljs-built_in">Promise</span>.reject(p1).catch(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Promise.all()用来关注多个Promise对象的状态变化</span><br><span class="hljs-comment">// 可以传入多个Promise实例，包装成一个新的Promise对象返回</span><br><span class="hljs-keyword">const</span> delay=<span class="hljs-function"><span class="hljs-params">ms</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(resolve,ms);<br>    &#125;)<br>&#125;;<br><span class="hljs-keyword">const</span> p1=delay(<span class="hljs-number">1000</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p1 finished&#x27;</span>);<br>    <span class="hljs-comment">// return Promise.reject(&quot;uifsf&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是p1&#x27;</span>;<br>&#125;);<br><span class="hljs-keyword">const</span> p2=delay(<span class="hljs-number">2000</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p2 finished&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我是p2&#x27;</span>;<br>&#125;);<br><span class="hljs-comment">// Promise.all()的状态变化与所有传入的Promise实例对象状态变化有关</span><br><span class="hljs-comment">// 所有状态都变成了resolved，最终的状态才会变为resolved</span><br><span class="hljs-comment">// 只要有一个变成了rejected，最终的状态才会变为rejected</span><br><br><span class="hljs-comment">// 要给Promise.all()中传入数组，或者任何可遍历的参数</span><br><span class="hljs-keyword">const</span> p=<span class="hljs-built_in">Promise</span>.all([p1,p2]);<br>p.then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Promise-race-和Promise-allSettled"><a href="#Promise-race-和Promise-allSettled" class="headerlink" title="Promise.race()和Promise.allSettled()"></a>Promise.race()和Promise.allSettled()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.Promise.race()</span><br><span class="hljs-keyword">const</span> delay=<span class="hljs-function"><span class="hljs-params">ms</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class="hljs-keyword">const</span> p1=delay(<span class="hljs-number">1000</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p1 finished&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是p1&quot;</span>;<br>&#125;);<br><span class="hljs-keyword">const</span> p2=delay(<span class="hljs-number">2000</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;p2 finised&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是p2&quot;</span>;<br>&#125;);<br><span class="hljs-comment">// Promise.race()的状态取决于第一个完成的Promise实例对象</span><br><span class="hljs-comment">// 如果第一个完成的成功了，就是最终的成功</span><br><span class="hljs-comment">// 如果第一个完成的失败了，就是最终的失败</span><br><span class="hljs-keyword">const</span> racePromise=<span class="hljs-built_in">Promise</span>.race([p1,p2]);<br>racePromise.then(<span class="hljs-function"><span class="hljs-params">data</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.Promise.allSetted()</span><br><span class="hljs-keyword">const</span> delay=<span class="hljs-function"><span class="hljs-params">ms</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class="hljs-keyword">const</span> p1=delay(<span class="hljs-number">1000</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;p1 finished&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&quot;fjsf&quot;</span>);<br>    <span class="hljs-comment">// return &quot;我是p1&quot;;</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> p2=delay(<span class="hljs-number">200</span>).then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;p2 finished&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是p2&quot;</span>;<br>&#125;);<br><br><span class="hljs-keyword">const</span> allSettedPromise=<span class="hljs-built_in">Promise</span>.allSettled([p1,p2]);<br><span class="hljs-comment">// Promise.allSetted()的状态与传入的Promise的状态无关</span><br><span class="hljs-comment">// 永远都是成功的，它只会忠实的记录各个Promise的表现</span><br><br>allSettedPromise.then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;succeed&quot;</span>,data);<br>&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fail&quot;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210612210208.png" alt="image-20210612210200175"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.resolve和reject函数执行后的代码</span><br><span class="hljs-comment">// 推荐在调用resolve或reject函数的时候加上return，不再执行它们后面的代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-number">123</span>);<br>    <span class="hljs-comment">// reject(&quot;reason&quot;);</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hi&quot;</span>); <span class="hljs-comment">//还可以执行</span><br>&#125;);<br><br><span class="hljs-comment">// 2.Promise.all/race/allSettled的参数</span><br><span class="hljs-comment">// 参数如果不是Promise数组，会将不是Promise的数组元素转变成Promise对象</span><br><span class="hljs-comment">// Promise.all([1,2,3]).then(datas=&gt;&#123;</span><br><span class="hljs-comment">//     console.log(datas);</span><br><span class="hljs-comment">// &#125;);</span><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-built_in">Promise</span>.all([<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">1</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">2</span>),<br>    <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-number">3</span>)<br>]).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;) <span class="hljs-comment">//[1,2,3]</span><br><br><span class="hljs-comment">// 除了数组，任何可遍历的都可以作为数组</span><br><span class="hljs-comment">// 数组、字符串、Set、Map、NodeList、arguments</span><br><span class="hljs-built_in">Promise</span>.all(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data);<br>&#125;) <span class="hljs-comment">//[1,2,3]</span><br><br><span class="hljs-comment">// 3.Promise.all/race/allsettled错误处理</span><br><span class="hljs-comment">// 错误既可以单独处理，也可以统一处理</span><br><span class="hljs-comment">// 一旦被处理，就不会再处理一遍</span><br><span class="hljs-keyword">const</span> delay = <span class="hljs-function"><span class="hljs-params">ms</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(resolve, ms);<br>    &#125;);<br>&#125;;<br><span class="hljs-keyword">const</span> p1 = delay(<span class="hljs-number">1000</span>).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;p1 finished&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是P1&quot;</span>;<br>&#125;);<br><span class="hljs-keyword">const</span> p2 = delay(<span class="hljs-number">2000</span>).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;p2 finished&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">&#x27;rej&#x27;</span>);<br><br>&#125;);<br><br><span class="hljs-keyword">const</span> allPromise = <span class="hljs-built_in">Promise</span>.all([p1, p2]);<br>allPromise.then(<span class="hljs-function">(<span class="hljs-params">datas</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(datas);<br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><p>Promise应用异步加载图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#img</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://img.mukewang.com/szimg/5feb016d097497d905400304.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 1.异步加载图片</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> loadImgAsync=<span class="hljs-function"><span class="hljs-params">url</span>=&gt;</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// Image()函数将会创建一个新的HTMLImageElement实例。</span></span><br><span class="javascript">                <span class="hljs-comment">// 它的功能等价于 document.createElement(&#x27;img&#x27;)</span></span><br><span class="javascript">                <span class="hljs-keyword">const</span> img=<span class="hljs-keyword">new</span> Image();</span><br><span class="javascript">                <span class="hljs-comment">// Promise函数中不用写具体过程，只需要决定用resolve还是reject即可</span></span><br><span class="javascript">                <span class="hljs-comment">// onload 属性是一个事件处理程序用于处理Window, XMLHttpRequest, &lt;img&gt; 等元素的加载事件，当资源已加载时被触发。     </span></span><br><span class="javascript">                img.onload=<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sb&quot;</span>);</span><br><span class="javascript">                    resolve(img);</span><br><span class="javascript">                &#125;;</span><br><span class="javascript">                <span class="hljs-comment">// 当一项资源（如&lt;img&gt;或&lt;script&gt;）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。</span></span><br><span class="javascript">                img.onerror=<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="javascript">                    reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`couldn&#x27;t load image at <span class="hljs-subst">$&#123;url&#125;</span>`</span>));</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                img.src=url;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> url1=<span class="hljs-string">&#x27;https://img4.mukewang.com/szimg/60b9864a09995aa605400304.png&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> imgDom=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">        loadImgAsync(url1).then(<span class="hljs-function"><span class="hljs-params">img</span>=&gt;</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(img.src);</span><br><span class="javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="javascript">                imgDom.src=img.src;</span><br><span class="javascript">            &#125;,<span class="hljs-number">1000</span>);</span><br><span class="javascript">        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(err);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141556.png" alt="image-20210613141548090"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141646.png" alt="image-20210613141645235"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141718.png" alt="image-20210613141717621"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141850.png" alt="image-20210613141849863"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142008.png" alt="image-20210613142007368"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142051.png" alt="image-20210613142050967"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142136.png" alt="image-20210613142135558"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142151.png" alt="image-20210613142150152"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142217.png" alt="image-20210613142216303"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163043.png" alt="image-20210613163042772"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163154.png" alt="image-20210613163153293"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163220.png" alt="image-20210613163219353"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163246.png" alt="image-20210613163245239"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163304.png" alt="image-20210613163303168"></p><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p><strong>class 声明</strong>创建一个基于原型继承的具有给定名称的新类。</p><p>要注意类的写法，并没有圆括号直接跟上了花括号，方法和方法之间不需要用逗号分隔。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类可以看做是对象的模板，用一个类可以创建出许多不同的对象</span><br><span class="hljs-comment">// 类名一般来说，首字母是大写的</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-comment">// 实例化时必须执行构造方法，所以必须有构造方法，但是可以不写出来</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>        <span class="hljs-comment">// 一般只在构造方法中定义属性，方法不在构造方法中定义</span><br>    &#125;<br>    <span class="hljs-comment">// 各个实例共用的方法</span><br>    <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;speak&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 实例对象</span><br><span class="hljs-keyword">const</span> zs=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">const</span> ls=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-number">58</span>);<br><span class="hljs-built_in">console</span>.log(zs.speak===ls.speak); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>声明的Person类本质上是一个函数，和构造函数差不多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> Person); <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.speak);<br></code></pre></td></tr></table></figure><p>对比一下Person构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person1</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>    <span class="hljs-built_in">this</span>.age=age;<br>&#125;<br>Person1.prototype.speak=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;speak&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2种定义形式"><a href="#2种定义形式" class="headerlink" title="2种定义形式"></a>2种定义形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.声明形式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// 2.表达式形式</span><br><span class="hljs-keyword">const</span> Person1=<span class="hljs-class"><span class="hljs-keyword">class</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="立即执行的类"><a href="#立即执行的类" class="headerlink" title="立即执行的类"></a>立即执行的类</h3><p>类也可以像立即执行的匿名函数一样立即执行，但要记得在类前面加上关键字<code>new</code>，否则会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 立即执行的类</span><br><span class="hljs-keyword">new</span> (<span class="hljs-class"><span class="hljs-keyword">class</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hahah&quot;</span>);<br>    &#125;<br>&#125;)();<br><br><span class="hljs-comment">// 立即执行函数</span><br><span class="hljs-comment">// (function()&#123;</span><br><br><span class="hljs-comment">// &#125;)();</span><br></code></pre></td></tr></table></figure><h3 id="实例属性、静态方法、静态属性"><a href="#实例属性、静态方法、静态属性" class="headerlink" title="实例属性、静态方法、静态属性"></a>实例属性、静态方法、静态属性</h3><h4 id="1-实例属性"><a href="#1-实例属性" class="headerlink" title="1.实例属性"></a>1.实例属性</h4><p>实例属性一般可以用作默认值，它不能用<code>var</code>、<code>let</code>、<code>const</code>等关键字声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.实例属性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-comment">//constructor外 不能用关键字声明属性，也不能用this</span><br>    <span class="hljs-comment">// 一般用作默认值</span><br>    name=<span class="hljs-string">&quot;zhangsan&quot;</span><br>    age=<span class="hljs-number">18</span>;<br>    <span class="hljs-comment">// 实例方法 方法是值为函数的特殊属性</span><br>    getAge=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;alex&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(p.name,p.age);<span class="hljs-comment">// alex 18</span><br><span class="hljs-built_in">console</span>.log(p.getAge()); <span class="hljs-comment">//18</span><br></code></pre></td></tr></table></figure><h4 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h4><p>静态方法是类的方法，不需要实例化类就能够调用。用关键字static来声明静态方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,sex</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.sex=sex;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;haha...&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向Person类</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;awsl&quot;</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向实例对象</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用类的方法 静态方法</span><br>Person.speak();  <span class="hljs-comment">//haha...</span><br><span class="hljs-keyword">const</span> xm=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;xm&quot;</span>,<span class="hljs-number">12</span>);<br>xm.speak(); <span class="hljs-comment">//awsl</span><br><br><span class="hljs-comment">//也可以把类的方法写在</span><br><br></code></pre></td></tr></table></figure><h1 id="module"><a href="#module" class="headerlink" title="module"></a>module</h1><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>模块是一个一个的局部作用域的代码块。模块系统可以解决①模块化的问题②消除全局变量③管理加载顺序。</p><h3 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h3><p>一个模块即使没有导出，也可以将其导入。要注意在<code>script</code>标签中 加上 <code>type=&quot;module&quot;</code>，导入后代码会执行一遍，多次导入也仅仅会执行一遍。</p><blockquote><p>exp1.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>  <span class="hljs-comment">//18</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-built_in">console</span>.log(age);<br></code></pre></td></tr></table></figure><p>没有导出，直接导入就相当于写成:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">scr</span>=<span class="hljs-string">&#x27;./module.js&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;module&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h3><p>一个模块只能有一个export default。</p><blockquote><p>exp2.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//可以随便取名</span></span><br><span class="javascript"><span class="hljs-keyword">import</span> age <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moudle.js&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">//18</span></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-comment">// 一个模块只能有一个export default</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> age;<br></code></pre></td></tr></table></figure><h3 id="例子三"><a href="#例子三" class="headerlink" title="例子三"></a>例子三</h3><blockquote><p>exp3.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// import age from &#x27;./module.js&#x27;; </span></span><br><span class="javascript">    <span class="hljs-comment">// 上面的是export default对应的import</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 法一：普通导入</span></span><br><span class="javascript">    <span class="hljs-comment">// 不能随意命名，需要和导出的名字一样</span></span><br><span class="javascript">    <span class="hljs-comment">// 因此无法导出匿名函数、类等</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> &#123;age,gender&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;</span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-comment">// 法二：导入时起别名</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> &#123;func,userName <span class="hljs-keyword">as</span> person&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;</span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-comment">// 法三： 整体导入(会同时导入export和export default导出的)，obj为别名</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> obj <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(age,gender,func,person);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(obj);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 法四：同时导入export和export default导出的参数</span></span><br><span class="javascript">    <span class="hljs-comment">// 注意export default导出的要写在前面</span></span><br><span class="javascript">    <span class="hljs-keyword">import</span> weight,&#123;height&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(weight,height); <span class="hljs-comment">//56 168</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 法一：export后面接声明或语句</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age =<span class="hljs-number">18</span>;<br><br><span class="hljs-comment">// 法二： export后接 &#123;argument&#125;;</span><br><span class="hljs-keyword">const</span> gender=<span class="hljs-string">&quot;male&quot;</span>;<br><span class="hljs-keyword">export</span> &#123;gender&#125;; <span class="hljs-comment">//√</span><br><span class="hljs-comment">// export gender; ×</span><br><br><span class="hljs-comment">// 注意不能导出匿名函数或者类等</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;&#125;<br><br><br><span class="hljs-comment">// 法三：导出为别名</span><br><span class="hljs-keyword">export</span> &#123;fn <span class="hljs-keyword">as</span> func,Name <span class="hljs-keyword">as</span> userName&#125;;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-number">56</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> height=<span class="hljs-number">168</span>;<br></code></pre></td></tr></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.模块顶层的<code>this</code>指向</p><p>顶层是值不在for块级、function函数作用域中，直接在模块中的作用域。</p><p>在模块中，顶层的this是指向undefined的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span>!==<span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<br>    <span class="hljs-comment">// 如果this不为undefined，说明并不是用模块的方式来加载的</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;没有以模块的形式导入&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.import和import()</p><p>import关键字具有提升效果，会提升到整个模块的头部、率先执行。也即import执行的时候，其他代码还没有开始执行。因此import和export命令只能在模块的顶层，<strong>不能放在在代码块中执行</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 会直接报错！！！</span><br><span class="hljs-keyword">if</span> (PC)&#123;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;pc.js&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mobile)&#123;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;mobile.js&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而import()可以按条件导入，且会返回promise对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (PC)&#123;<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;pc.js&#x27;</span>).then().catch();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mobile)&#123;<br>    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;mobile.js&#x27;</span>).then().catch();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.先导入再导出的复合写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把age从别的模块导入，再又导出，相当于一个中转站</span><br><span class="hljs-comment">// export &#123;age&#125; from &#x27;./module.js&#x27;; </span><br><span class="hljs-comment">// 复合写法导出的，无法在当前模块使用</span><br><span class="hljs-comment">// 相当于下面的import和export语句，但是上面的复合写法age无法正常输出</span><br><span class="hljs-keyword">import</span> &#123;age&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 可以正常输出</span><br><span class="hljs-keyword">export</span> &#123;age&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 可以正常输出</span><br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615232944.png" alt="image-20210615232937033"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233124.png" alt="image-20210615233123778"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233158.png" alt="image-20210615233157075"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233229.png" alt="image-20210615233228936"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233314.png" alt="image-20210615233313046"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233404.png" alt="image-20210615233403786"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233452.png" alt="image-20210615233451256"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233558.png" alt="image-20210615233557251"></p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233652.png" alt="image-20210615233651225"></p><h1 id="node入门"><a href="#node入门" class="headerlink" title="node入门"></a>node入门</h1><p>笔记内容源自：<a href="https://youtu.be/TlB_eWDSMt4">https://youtu.be/TlB_eWDSMt4</a></p><p>在powershell中输入<code>code .</code>会用VS Code打开当前文件夹。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616170542.png" alt="image-20210616170534238"></p><p> 首先进入到要执行js的文件夹，然后输入 node +要运行的程序名，即可运行js。</p><p>在node中，没有window和document对象，但在node中有其他的对象可以操作文件、操作系统、网络等。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616171059.png" alt="image-20210616171058446"></p><p>在浏览器中中运行JavaScript，可以通过window.setTimeout()来调用setTimeout全局函数。在node中，则可以通过global.setTimeout()来调用，变量和函数不会添加到global对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> message=<span class="hljs-string">&#x27;&#x27;</span>; <br><span class="hljs-comment">//在浏览器中变量message会被添加到window对象中</span><br><span class="hljs-comment">//在node中变量message不会被添加到global对象中</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">global</span>.message); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>在node中任何文件都被视为模块(module)，在文件中定义的变量或函数的作用域限制在了该文件。如果需要使用这些私有变量或函数，需要明确地export它。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616172238.png" alt="image-20210616172237280"></p><p>任何node应用程序都至少有一个main 模块(文件)，我们称之为main module。</p><p>使用require()来加载模块，require函数的参数时是目标加载模块的路径。当导出不止一个参数时，require会返回一个从目标模块导出的对象。</p><blockquote><p>app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./logger&#x27;</span>)<br><span class="hljs-comment">//&#123; log: [Function: log], url: &#x27;http://mylogger.io/log&#x27; &#125;</span><br><span class="hljs-built_in">console</span>.log(logger);<br><br><span class="hljs-comment">//调用另外一个模块的函数</span><br>logger.log(<span class="hljs-string">&quot;message&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>logger.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  url=<span class="hljs-string">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">message</span>)</span>&#123;<br>    <span class="hljs-comment">// send an http request</span><br>    <span class="hljs-built_in">console</span>.log(message);<br>&#125;<br><br><span class="hljs-comment">//输出的名字可以自定义</span><br><span class="hljs-built_in">module</span>.exports.log=log;<br><span class="hljs-built_in">module</span>.exports.url=url;<br></code></pre></td></tr></table></figure><p>最后，console.log(logger)会输出一个对象。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210617112306.png" alt="image-20210617112257229"></p><p>如果只需要导出一个参数，导出时可以不自定义名字，这样require函数返回的不是导出模块的参数对象，而是返回的导出模块导出的变量名或常量名。</p><blockquote><p>app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> log = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./logger&#x27;</span>)<br><br>log(<span class="hljs-string">&quot;message&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>logger.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  url=<span class="hljs-string">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">message</span>)</span>&#123;<br>    <span class="hljs-comment">// send an http request</span><br>    <span class="hljs-built_in">console</span>.log(message);<br>&#125;<br><br><br><span class="hljs-built_in">module</span>.exports=log;<br></code></pre></td></tr></table></figure><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>babel官网： <a href="https://babeljs.io/">https://babeljs.io/</a>。</p><p>主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><p>Babel本身可以编译ES6的大部分语法，比如let、 const、箭头函数、类。但是对于ES6新增的API，比如Set、Map、 Promise等全局对象都不能直接编译，需要借助其它的模块。Babel一般需要配合 Webpack来编译模块语法。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3b181a491acea93cf6d8ef6a58c848d.png" alt="image-20210618115716149"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>要在项目目录文件下，在powershell中安装babel所需要的包。首先要<code>npm init</code>，初始化项目，回车后，会提示包名，注意包名不能是中文。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/833503aaf604e173ec462d091e6c9f2a.png" alt="image-20210618120620517"><br><img src="https://img-blog.csdnimg.cn/img_convert/18f61389a04283749f3fe5fec2fd72fc.png" alt="image-20210618120938972"></p><p>一系列回车后，项目中会多了一个package.json的文件，执行<code>npm init</code>就是为了得到这个json文件。这个json文件会记录安装的其他的包。</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210618121541.png" alt="image-20210618121540287" style="zoom:33%;" /><h2 id="安装babel"><a href="#安装babel" class="headerlink" title="安装babel"></a>安装babel</h2><p>安装babel的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure><p><code>--save-dev</code>：<code>save</code>表示要把它们的信息写入 package.json, <code>dev</code>表示是开发模式下。</p><p><code> @babel/core @babel/cli @babel/preset-env</code>表示三个一般都要安装的babel包。</p><blockquote><p>PS：只要有<code>package.json</code>，就可以直接在命名行中输入<code>npm install</code>安装所有的该json文件中提到的所有包。</p></blockquote><h2 id="配置babel"><a href="#配置babel" class="headerlink" title="配置babel"></a>配置babel</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/f1c3c2ba0abdba32f6fbda1eda7926fe.png" alt="image-20210618122619509"><br>需要在根目录<code>package.json</code>文件中添加下面的代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;babel src -d dist&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/703d2d400cda8e83635ec81522c221bb.png" alt="image-20210618123402148"><br><code>babel src -d lib</code>是<code>babel src --out-dir dist</code>的缩写，也就是从src目录输出到lib目录。</p><hr><p>在项目的根目录中创建名为 <code>babel.config.json</code>的配置文件。</p><p>如果想要转换<code>let</code> 、<code>const</code>，必须要在<code>target</code>中写<code>ie:10</code>，因为目前除了ie不支持几乎所有版本的浏览器都支持。不写的话就代表不把ie10作为目标浏览器，就不会转换<code>const</code>、<code>let</code>、<code>箭头函数</code>等这些几年前就出来的语法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;@babel/env&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;targets&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;ie&quot;</span>:<span class="hljs-string">&quot;10&quot;</span>,<br>          <span class="hljs-attr">&quot;edge&quot;</span>: <span class="hljs-string">&quot;17&quot;</span>,<br>          <span class="hljs-attr">&quot;firefox&quot;</span>: <span class="hljs-string">&quot;60&quot;</span>,<br>          <span class="hljs-attr">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;67&quot;</span>,<br>          <span class="hljs-attr">&quot;safari&quot;</span>: <span class="hljs-string">&quot;11.1&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span>,<br>        <span class="hljs-attr">&quot;corejs&quot;</span>: <span class="hljs-string">&quot;3.6.5&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，如果缺省<code>target</code>，直接写如下代码，默认会转换为ES5。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure><p>build就是<code>package.json</code>script中自定义的名字，通过npm run build开始执行。可以在项目中看到多了名为lib的文件夹，里面有babel编译后的js文件。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a52e2d447d3daf8b9d66240b53e3bdad.png" alt="image-20210618124246687"></p><p><strong>最后，我走了很多很多弯路，因为我tm没有看官方文档</strong>。要是我看看文档，我也就知道了<code>const</code>、<code>let</code>为什么没有转换。因为要定义target，要把ie也作为目标浏览器。</p><p><a href="https://babel.docschina.org/docs/en/usage/">中文官方文档</a>拜托我自己多看官方文档，再到处提问。</p><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p><a href="https://www.webpackjs.com/">webpack中文官网</a></p><p>webpack是静态模块打包器，当使用webpack处理应用程序时，会将这些模块打包成一个或多个文件。</p><p>它可以处理js/css/图片/字体/图标等文件，用于处理静态(本地)文件。</p><p>模块化是一种将系统分离成独立功能部分的方法，严格定义模块接口、模块间具有透明性。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h3><p><strong>入口起点(entry point)</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a> 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p>默认值是 <code>./src/index.js</code>，但你可以通过在 <a href="https://webpack.docschina.org/configuration">webpack configuration</a> 中配置 <code>entry</code> 属性，来指定一个（或多个）不同的入口起点。例如：</p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="多个入口"><a href="#多个入口" class="headerlink" title="多个入口"></a>多个入口</h4><p>用法：<code>entry: &#123; &lt;entryChunkName&gt; string | [string] &#125; | &#123;&#125;</code></p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">app</span>: <span class="hljs-string">&#x27;./src/app.js&#x27;</span>,<br>    <span class="hljs-attr">adminApp</span>: <span class="hljs-string">&#x27;./src/adminApp.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="描述入口的对象"><a href="#描述入口的对象" class="headerlink" title="描述入口的对象"></a>描述入口的对象</h4><p>用于描述入口的对象。你可以使用如下属性：</p><ul><li><code>dependOn</code>: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。</li><li><code>filename</code>: 指定要输出的文件名称。</li><li><code>import</code>: 启动时需加载的模块。</li><li><code>library</code>: 指定 library 选项，为当前 entry 构建一个 library。</li><li><code>runtime</code>: 运行时 chunk 的名字。如果设置了，就会创建一个以这个名字命名的运行时 chunk，否则将使用现有的入口作为运行时。</li><li><code>publicPath</code>: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 <a href="https://webpack.docschina.org/configuration/output/#outputpublicpath">output.publicPath</a>。</li></ul><p><code>runtime</code> 和 <code>dependOn</code> 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：</p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">a2</span>: <span class="hljs-string">&#x27;./a&#x27;</span>,<br>    <span class="hljs-attr">b2</span>: &#123;<br>      <span class="hljs-attr">runtime</span>: <span class="hljs-string">&#x27;x2&#x27;</span>,<br>      <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;a2&#x27;</span>,<br>      <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>确保 <code>runtime</code> 不能指向已存在的入口名称，例如下面配置会抛出一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">a1</span>: <span class="hljs-string">&#x27;./a&#x27;</span>,<br>    <span class="hljs-attr">b1</span>: &#123;<br>      <span class="hljs-attr">runtime</span>: <span class="hljs-string">&#x27;a1&#x27;</span>,<br>      <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>另外 <code>dependOn</code> 不能是循环引用的，下面的例子也会出现错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">a3</span>: &#123;<br>      <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./a&#x27;</span>,<br>      <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;b3&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">b3</span>: &#123;<br>      <span class="hljs-attr">import</span>: <span class="hljs-string">&#x27;./b&#x27;</span>,<br>      <span class="hljs-attr">dependOn</span>: <span class="hljs-string">&#x27;a3&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h3><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p><p>注意，即使可以存在多个 <code>entry</code> 起点，但只能指定一个 <code>output</code> 配置。</p><p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// path:绝对路径</span><br>    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。在代码最上面导入的 path 模块是什么，它是一个 <a href="https://nodejs.org/api/modules.html">Node.js 核心模块</a>，用于操作文件路径。</p><p>如果有多个入口文件，出口文件需要改名，否则就会覆盖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">entry</span>:&#123;<br>        <span class="hljs-string">&quot;main&quot;</span>:<span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>        <span class="hljs-string">&quot;app&quot;</span>:<span class="hljs-string">&#x27;./src/module.js&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-comment">// [name]表示入口的名字</span><br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&#x27;[name].bundle.js&#x27;</span>,<br>        <span class="hljs-attr">path</span>:path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),  <br>        <span class="hljs-comment">// 清除没有用到的文件</span><br>        <span class="hljs-attr">clean</span>:<span class="hljs-literal">true</span><br>        <br>    &#125;,<br>    <span class="hljs-attr">mode</span>:<span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a><a href="https://www.webpackjs.com/loaders/babel-loader/">loader</a></h3><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href="https://webpack.docschina.org/concepts/modules">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p><blockquote><h5 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h5><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p><ol><li><code>test</code> 属性，识别出哪些文件会被转换。</li><li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>, use: <span class="hljs-string">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p>“嘿，webpack 编译器，当你碰到「在 <code>require()</code>/<code>import</code> 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 <strong>use(使用)</strong> <code>raw-loader</code> 转换一下。”</p></blockquote><blockquote><h5 id="Warning-1"><a href="#Warning-1" class="headerlink" title="Warning"></a>Warning</h5><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p></blockquote><h3 id="插件-plugin"><a href="#插件-plugin" class="headerlink" title="插件(plugin)"></a><a href="https://www.webpackjs.com/plugins/">插件(plugin)</a></h3><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p><p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>); <span class="hljs-comment">// 通过 npm 安装</span><br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>); <span class="hljs-comment">// 用于访问内置插件</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/</span>, use: <span class="hljs-string">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span> &#125;)],<br>&#125;;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p><h3 id="模式-mode"><a href="#模式-mode" class="headerlink" title="模式(mode)"></a>模式(mode)</h3><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性-browser-compatibility"><a href="#浏览器兼容性-browser-compatibility" class="headerlink" title="浏览器兼容性(browser compatibility)"></a>浏览器兼容性(browser compatibility)</h3><p>webpack 支持所有符合 <a href="https://kangax.github.io/compat-table/es5/">ES5 标准</a> 的浏览器（不支持 IE8 及以下版本）。webpack 的 <code>import()</code> 和 <code>require.ensure()</code> 需要 <code>Promise</code>。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 <a href="https://webpack.docschina.org/guides/shimming/">提前加载 polyfill</a>。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><a href="https://webpack.docschina.org/guides%EF%BC%8C%E7%94%A8%E8%BF%99%E4%B8%AA%E5%85%A5%E9%97%A8%E9%9D%9E%E5%B8%B8%E6%A3%92%EF%BC%8C%E8%AE%B2%E8%A7%A3%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%EF%BC%8C%E5%86%85%E5%AE%B9%E4%B9%9F%E8%B6%85%E7%BA%A7%E4%B8%B0%E5%AF%8C%EF%BC%8C%E5%8F%AA%E7%BB%83%E4%B8%80%E9%81%8D%E6%98%AF%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E3%80%82">https://webpack.docschina.org/guides，用这个入门非常棒，讲解非常详细，内容也超级丰富，只练一遍是记不住的。</a></p><h3 id="极简教程"><a href="#极简教程" class="headerlink" title="极简教程"></a>极简教程</h3><p>1.首先要先在项目中初始化，<code>npm init -y</code>，会生成一个package.json文件，-y表示全部默认，省去回车过程。</p><p>2.在powershell中输入<code>npm install --save-dev webpack webpack-cli</code>来安装webpack。</p><p>3.项目根目录下创建一个名为<code>webpack.config.js</code>的配置文件，在这个配置文件中用module.exports来导出配置。</p><p>下面的代码的意思为入口为’./src/indec.js’，出口为’dist’文件夹，文件名为’bundle.js’。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-attr">entry</span>:<span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>:&#123;<br>        <span class="hljs-attr">path</span>:path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>:<span class="hljs-string">&quot;bundle.js&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>4.在<code>package.json</code>文件中的scrpits下添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;build&quot;</span>:<span class="hljs-string">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.在终端中输入<code>npm run build</code>，webpack即会开始编译，可以在dist目录下看到编译结果。</p><p>如果在webpack配置文件中(默认为webpack.config.js)中将模式改为<strong>development</strong>(默认为production)，编译后的文件会看起来更加清晰。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path=require(&#x27;path&#x27;);<br><br>module.exports=&#123;<br>    entry:&#x27;./src/index.js&#x27;,<br>    output:&#123;<br>        path:path.resolve(__dirname,&#x27;dist&#x27;),<br>        filename:&quot;bundle.js&quot;<br>    &#125;,<br> +  mode:&#x27;development&#x27;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a><a href="https://www.webpackjs.com/plugins/">插件plugins</a></h2><p>loader被用于帮助webpack处理各种模块，而插件则可用于执行范围更广的任务。</p><h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a><a href="https://www.webpackjs.com/plugins/html-webpack-plugin/">HtmlWebpackPlugin</a></h3><p>如果我们更改了一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 <code>index.html</code> 文件的<code>script</code>标签仍然引用旧的名称。让我们用 <a href="https://webpack.docschina.org/plugins/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> 来解决这个问题。</p><p>有了这个插件，就不用在<code>npm run build</code>改变了js的名字后手动去改变html中<code>script</code>标签引入的js路径。</p><h4 id="单入口配置"><a href="#单入口配置" class="headerlink" title="单入口配置"></a>单入口配置</h4><p>首先安装插件，并且调整 <code>webpack.config.js</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev html-webpack-plugin<br></code></pre></td></tr></table></figure><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br><span class="hljs-addition">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br><span class="hljs-addition">+  plugins: [</span><br><span class="hljs-addition">+    new HtmlWebpackPlugin(&#123;</span><br><span class="hljs-addition">+      //指定一个html文件作为模板</span><br><span class="hljs-addition">+      template:&quot;./index.html&quot;</span><br><span class="hljs-addition">+    &#125;),</span><br><span class="hljs-addition">+  ],</span><br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure><p>虽然在 <code>dist/</code> 文件夹我们已经有了 <code>index.html</code> 这个文件，然而 <code>HtmlWebpackPlugin</code> 还是会默认生成它自己的 <code>index.html</code> 文件。也就是说，它会用新生成的 <code>index.html</code> 文件，替换我们的原有文件。</p><h4 id="多html配置"><a href="#多html配置" class="headerlink" title="多html配置"></a>多html配置</h4><p>配置含有2个html和2个js的项目。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path=require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin=require(&#x27;html-webpack-plugin&#x27;);<br><br>module.exports=&#123;<br>    mode:&#x27;development&#x27;,<br>    // 多入口<br><span class="hljs-addition">+    entry:&#123;</span><br><span class="hljs-addition">+        index:&#x27;./src/index.js&#x27;,</span><br><span class="hljs-addition">+        search:&#x27;./src/search.js&#x27;</span><br><span class="hljs-addition">+    &#125;,</span><br>    output:&#123;<br>        filename:&#x27;[name].js&#x27;,<br>        path:path.resolve(__dirname,&quot;dist&quot;),<br>    &#125;,<br>    // 多入口 有几个入口就实例化几次<br><span class="hljs-addition">+    plugins:[</span><br><span class="hljs-addition">+        new HtmlWebpackPlugin(&#123;</span><br><span class="hljs-addition">+            //指定一个html文件作为模板</span><br><span class="hljs-addition">+           template:&quot;./index.html&quot;,</span><br><span class="hljs-addition">+            //多个html必须要命名，否则默认为index.html</span><br><span class="hljs-addition">+            //同名文件，后生成的文件会覆盖前面的</span><br><span class="hljs-addition">+            filename:&#x27;index.html&#x27;,</span><br><span class="hljs-addition">+            //指定要引入的js文件，否则会引入所有的js文件</span><br><span class="hljs-addition">+            chunks:[&#x27;index&#x27;] //写entry中的名字</span><br><span class="hljs-addition">+        &#125;),</span><br><span class="hljs-addition">+        new HtmlWebpackPlugin(&#123;</span><br><span class="hljs-addition">+            template:&quot;./search.html&quot;,</span><br><span class="hljs-addition">+            filename:&#x27;./search.html&#x27;,</span><br><span class="hljs-addition">+            // 同时引入index和search两个文件</span><br><span class="hljs-addition">+            chunks:[&#x27;index&#x27;,&#x27;search&#x27;],</span><br><span class="hljs-addition">+        &#125;)</span><br><span class="hljs-addition">+    ]</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br>  plugins: [<br>   new HtmlWebpackPlugin(&#123;<br>     //指定一个html文件作为模板<br>     template:&quot;./index.html&quot;,<br><span class="hljs-addition">+     minify:&#123;</span><br><span class="hljs-addition">+         //删除index.html中的注释</span><br><span class="hljs-addition">+         removeComments:true,</span><br><span class="hljs-addition">+         // 删除index.html中的空格</span><br><span class="hljs-addition">+         collapseWhitespace:true,</span><br><span class="hljs-addition">+         //删除html标签属性值的双引号</span><br><span class="hljs-addition">+         removeAttributeQuotes:true</span><br><span class="hljs-addition">+     &#125;</span><br>    &#125;),<br>  ],<br>   output: &#123;<br>     filename: &#x27;[name].js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure><h2 id="loader-1"><a href="#loader-1" class="headerlink" title="loader"></a><a href="https://www.webpackjs.com/loaders/babel-loader/">loader</a></h2><p>loader可以用webpack能够处理非JS文件(css、图片、字体等)的模块。</p><h3 id="使用loader"><a href="#使用loader" class="headerlink" title="使用loader"></a>使用loader</h3><p>在你的应用程序中，有两种使用 loader 的方式：</p><ul><li><a href="https://webpack.docschina.org/concepts/loaders/#configuration">配置方式</a>（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 loader。</li><li><a href="https://webpack.docschina.org/concepts/loaders/#inline">内联方式</a>：在每个 <code>import</code> 语句中显式指定 loader。</li></ul><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><p><a href="https://webpack.docschina.org/configuration/module/#modulerules"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p><p>loader <strong>从右到左（或从下到上）</strong>地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href="https://webpack.docschina.org/concepts/loaders/#loader-features">loader 功能</a> 章节，了解有关 loader 顺序的更多信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          <span class="hljs-comment">// [style-loader](/loaders/style-loader)</span><br>          &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;style-loader&#x27;</span> &#125;,<br>          <span class="hljs-comment">// [css-loader](/loaders/css-loader)</span><br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span><br>            &#125;<br>          &#125;,<br>          <span class="hljs-comment">// [sass-loader](/loaders/sass-loader)</span><br>          &#123; <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;sass-loader&#x27;</span> &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="内联方式-不推荐"><a href="#内联方式-不推荐" class="headerlink" title="内联方式(不推荐)"></a>内联方式(不推荐)</h4><p>可以在 <code>import</code> 语句或任何 <a href="https://webpack.docschina.org/api/module-methods">与 “import” 方法同等的引用方式</a> 中指定 loader。使用 <code>!</code> 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="已废用file-loader"><a href="#已废用file-loader" class="headerlink" title="已废用file-loader"></a>已废用file-loader</h3><p><strong>v5 版本已废弃</strong>file-loader: 请向 <a href="https://webpack.docschina.org/guides/asset-modules/"><code>asset modules</code></a> 迁移。资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p><p>在 webpack 5 之前，通常使用：</p><ul><li><a href="https://webpack.docschina.org/loaders/raw-loader/"><code>raw-loader</code></a> 将文件导入为字符串</li><li><a href="https://webpack.docschina.org/loaders/url-loader/"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li><li><a href="https://webpack.docschina.org/loaders/file-loader/"><code>file-loader</code></a> 将文件发送到输出目录</li></ul><p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li><li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li><li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li><li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li></ul><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><p>先要安装babel，毕竟活是babel干的，webpack只是打包的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure><p>接着安装babel-loader这个插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev babel-loader<br></code></pre></td></tr></table></figure><p>接下来，配置babel，在根目录下创建<code>babel.config.json</code>的文件，并写下如下代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>下一步，便是在<code>webpack.config.js</code>文件中配置loader。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br>module.exports = &#123;<br>    entry: &#123;<br>        &quot;index&quot;: &#x27;./src/module.js&#x27;<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].bundle.js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br><span class="hljs-addition">+    module: &#123;</span><br><span class="hljs-addition">+       rules: [</span><br><span class="hljs-addition">+            &#123;</span><br><span class="hljs-addition">+                test: /\.js$/,</span><br><span class="hljs-addition">+                // 排除node_modules里面的js文件</span><br><span class="hljs-addition">+                exclude: /node_modules/,</span><br><span class="hljs-addition">+                use: &quot;babel-loader&quot;</span><br><span class="hljs-addition">+            &#125;,</span><br><span class="hljs-addition">+        ],</span><br><span class="hljs-addition">+    &#125;,</span><br>    mode: &#x27;development&#x27;,<br>   <br>&#125;;<br></code></pre></td></tr></table></figure><p>如果想要转换promise这些，需要安装babel的<a href="https://babeljs.io/docs/en/babel-polyfill">垫片插件</a>。</p><p>第一步要先安装<code>core-js</code>。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620124723.png" alt="image-20210620124715403"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev core-js<br></code></pre></td></tr></table></figure><p>接着在源文件夹下(src)的js代码中引入该模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;core-js/stable&quot;</span>;<br></code></pre></td></tr></table></figure><p>值得注意的是安装babel-loader和core-js的版本，尝试了很多次发现，他们需要低版本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;@babel/core&quot;</span>: <span class="hljs-string">&quot;^7.11.0&quot;</span>,<br>    <span class="hljs-attr">&quot;@babel/preset-env&quot;</span>: <span class="hljs-string">&quot;^7.11.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-loader&quot;</span>: <span class="hljs-string">&quot;^8.1.0&quot;</span>,<br>    <span class="hljs-attr">&quot;core-js&quot;</span>: <span class="hljs-string">&quot;^3.6.5&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^4.44.1&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^3.3.12&quot;</span><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h2><h3 id="加载css"><a href="#加载css" class="headerlink" title="加载css"></a>加载css</h3><h4 id="style-loader-css-loader"><a href="#style-loader-css-loader" class="headerlink" title="style-loader+css-loader"></a>style-loader+css-loader</h4><p>首先要在src文件夹下的某个js文件中导入css文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure><p>为了在 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要安装 <a href="https://webpack.docschina.org/loaders/style-loader">style-loader</a> 和 <a href="https://webpack.docschina.org/loaders/css-loader">css-loader</a>，并在 <a href="https://webpack.docschina.org/configuration/module"><code>module</code> 配置</a> 中添加这些 loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev style-loader css-loader<br></code></pre></td></tr></table></figure><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class="hljs-addition">+  module: &#123;</span><br><span class="hljs-addition">+    rules: [</span><br><span class="hljs-addition">+      &#123;</span><br><span class="hljs-addition">+        test: /\.css$/i,</span><br><span class="hljs-addition">+        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],</span><br><span class="hljs-addition">+      &#125;,</span><br><span class="hljs-addition">+    ],</span><br><span class="hljs-addition">+  &#125;,</span><br> &#125;;<br></code></pre></td></tr></table></figure><p>模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。</p><p>应保证 loader 的先后顺序：<a href="https://webpack.docschina.org/loaders/style-loader"><code>&#39;style-loader&#39;</code></a> 在前，而 <a href="https://webpack.docschina.org/loaders/css-loader"><code>&#39;css-loader&#39;</code></a> 在后。loader数组是从右到左执行，先通过’css-loader’识别css文件，再通过<code>style-loader</code>将css代码嵌入到style标签中。（在控制台可以看到）</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620190458.png" alt="image-20210620190450697"></p><h4 id="插件-loader"><a href="#插件-loader" class="headerlink" title="插件+loader"></a>插件+loader</h4><p>和上面的<code>style-loader</code>在style标签中内联不同，插件<code>mini-css-extract-plugin</code>会让html文件通过<code>link</code>标签引入css文件</p><p>首先要在src文件夹下的某个js文件中导入css文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure><p>接着安装插件<code>mini-css-extract-plugin</code>和<code>css-loader</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev css-loader mini-css-extract-plugin<br></code></pre></td></tr></table></figure><p>配置<code>webpack.config.js</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br><span class="hljs-addition">+ const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class="hljs-addition">+  module: &#123;</span><br><span class="hljs-addition">+    rules: [</span><br><span class="hljs-addition">+      &#123;</span><br><span class="hljs-addition">+        test: /\.css$/i,</span><br><span class="hljs-addition">+        //注意导入顺序</span><br><span class="hljs-addition">+        use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span><br><span class="hljs-addition">+      &#125;,</span><br><span class="hljs-addition">+    ],</span><br><span class="hljs-addition">+  &#125;,</span><br><span class="hljs-addition">+plugins: [</span><br><span class="hljs-addition">+        new MiniCssExtractPlugin(&#123;</span><br><span class="hljs-addition">+            //指定生成的css的文件名</span><br><span class="hljs-addition">+            filename:&#x27;[name].css&#x27;</span><br><span class="hljs-addition">+        &#125;),</span><br><span class="hljs-addition">+    ],</span><br> &#125;;<br></code></pre></td></tr></table></figure><p>最后，可以在dist文件夹下看到生成的css文件。</p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194806.png" alt="image-20210620194803569" style="zoom:33%;" /><p>而且在控制台可以看到样式是通过<code>link</code>标签引入的。</p><p><img src="https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194915.png" alt="image-20210620194914627"></p><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>如果是远程图片，则可以直接显示。而本地图片通过webpack打包，需要额外处理。</p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   module: &#123;<br>     rules: [<br>       &#123;<br>         test: /\.css$/i,<br>         use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],<br>       &#125;,<br><span class="hljs-addition">+      &#123;</span><br><span class="hljs-addition">+        test: /\.(png|svg|jpg|jpeg|gif)$/i,</span><br><span class="hljs-addition">+        type: &#x27;asset/resource&#x27;,</span><br><span class="hljs-addition">+      &#125;,</span><br>     ],<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure><p>现在，在 <code>import MyImage from &#39;./my-image.png&#39;</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。在使用 <a href="https://webpack.docschina.org/loaders/css-loader">css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(&#39;./my-image.png&#39;)</code>。loader 会识别这是一个本地文件，并将 <code>&#39;./my-image.png&#39;</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。而 <a href="https://webpack.docschina.org/loaders/html-loader">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p><h4 id="js中使用图片"><a href="#js中使用图片" class="headerlink" title="js中使用图片"></a>js中使用图片</h4><p>如果需要在js文件中使用图片，也可以用<code>asset module</code>这个loader，无需额外安装其他的loader。只需要在js中使用<code>import</code>引入图片即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把图片当做模块引入</span><br><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./image/img.png&#x27;</span>;<br><br><span class="hljs-built_in">console</span>.log(logo); <span class="hljs-comment">// 会输出图片的路径</span><br><span class="hljs-keyword">const</span> myLogo = <span class="hljs-keyword">new</span> Image();<br>myLogo.src = logo;<br><span class="hljs-built_in">document</span>.body.appendChild(myLogo)<br></code></pre></td></tr></table></figure><h4 id="自定义文件名"><a href="#自定义文件名" class="headerlink" title="自定义文件名"></a>自定义文件名</h4><p>默认情况下，<code>asset/resource</code> 模块以 <code>[hash][ext][query]</code> 文件名发送到输出目录。</p><p>可以通过在 webpack 配置中设置 <a href="https://webpack.docschina.org/configuration/output/#outputassetmodulefilename"><code>output.assetModuleFilename</code></a> 来修改此模板字符串：</p><blockquote><p> <strong>webpack.config.js</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class="hljs-addition">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\.png/,<br>        type: &#x27;asset/resource&#x27;<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>如可以设置为<code>assetModuleFilename: &#39;images/[name][ext]&#39;</code>，此时的[name]指图片本身的名字，而是entry中的名字，[ext]是指”filename extension”，用它表示文件原来的后缀。</p><p>另一种自定义输出文件名的方式是，将某些资源发送到指定目录：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class="hljs-addition">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\.png/,<br>        type: &#x27;asset/resource&#x27;<br><span class="hljs-deletion">-     &#125;</span><br><span class="hljs-addition">+     &#125;,</span><br><span class="hljs-addition">+     &#123;</span><br><span class="hljs-addition">+       test: /\.html/,</span><br><span class="hljs-addition">+       type: &#x27;asset/resource&#x27;,</span><br><span class="hljs-addition">+       generator: &#123;</span><br><span class="hljs-addition">+         filename: &#x27;static/[hash][ext][query]&#x27;</span><br><span class="hljs-addition">+       &#125;</span><br><span class="hljs-addition">+     &#125;</span><br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用此配置，所有 <code>html</code> 文件都将被发送到输出目录中的 <code>static</code> 目录中。</p><p><code>Rule.generator.filename</code> 与 <a href="https://webpack.docschina.org/configuration/output/#outputassetmodulefilename"><code>output.assetModuleFilename</code></a> 相同，并且仅适用于 <code>asset</code> 和 <code>asset/resource</code> 模块类型。</p><h4 id="添加公共路径"><a href="#添加公共路径" class="headerlink" title="添加公共路径"></a>添加公共路径</h4><p>当使用<code> MiniCssExtractPlugin</code>生成的css在dist下一个文件夹时(如<code>dist/css/style.css</code>)，此时如果不设置生成的css的公共路径(<code>publicPath</code>)，图片不会正常显示。</p><p>因为<code>css-loader</code>以为生成的<code>style.css</code>文件直接在dist目录下，所以图片路径会默认设置为<code>url(./随机名字.png)</code>，而事实上图片的正确的路径为<code>url(../随机名字.png)</code>。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs diff">  img-demo<br>  |- package.json<br>  |- webpack.config.js<br>  |- /dist<br>    |- index.js<br>    |- index.html<br><span class="hljs-addition">+   |- 随机字符.png</span><br><span class="hljs-addition">+   |- /css</span><br><span class="hljs-addition">+    |- style.css</span><br>  |- /src<br>    |- icon.png<br>    |- style.css<br>    |- index.js<br>  |- /node_modules<br></code></pre></td></tr></table></figure><p>因此，需要在<code>options</code>中设置<code>publicPath</code>为<code>../</code>，这样该css文件引入的所有url前面都会加上<code>../</code>的前缀。</p><blockquote><p><strong>webpack.config.js</strong></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br>const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);<br><br>module.exports = &#123;<br>    entry: &#123;<br>        index: &#x27;./src/index.js&#x27;,<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br>    module:&#123;<br>        rules:[<br>            &#123;<br>                test:/\.css$/i,<br>                //此时生成的css在dist/css的文件夹下，要设置公共路径<br>                //这样该css文件所有的url前面都会加上../的前缀。<br><span class="hljs-addition">+                use:[&#123;</span><br><span class="hljs-addition">+                    loader:MiniCssExtractPlugin.loader,</span><br><span class="hljs-addition">+                    options:&#123;</span><br><span class="hljs-addition">+                        publicPath:&#x27;../&#x27;</span><br><span class="hljs-addition">+                    &#125;</span><br><span class="hljs-addition">+                &#125;, &#x27;css-loader&#x27;]&#125;,</span><br>            &#123;<br>                test:/\.(png|svg|jepg|gif)/,<br>                type:&#x27;asset/resource&#x27;<br>            &#125;<br>        ]  <br>    &#125;,<br>    plugins: [<br>        new HtmlWebpackPlugin(&#123;<br>            //指定一个html文件作为模板<br>            template: &quot;./index.html&quot;<br>        &#125;),<br><span class="hljs-addition">+        new MiniCssExtractPlugin(&#123;</span><br><span class="hljs-addition">+            //在dist/css文件夹下创建一个index.css文件</span><br><span class="hljs-addition">+            filename:&#x27;css/[name].css&#x27;</span><br><span class="hljs-addition">+        &#125;)</span><br>    ],<br>    mode: &#x27;development&#x27;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="html中的图片"><a href="#html中的图片" class="headerlink" title="html中的图片"></a>html中的图片</h4><p>css中引入的图片可以用<code>type:asset/resource;</code> ，html中的图片则需要额外安装loader<code>html-withimg-loader</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev html-withimg-loader<br></code></pre></td></tr></table></figure><p>此时，我只写出新增的代码，其他的如图片loader，html-webpack-plugin和mini-css-extract-plugin插件用法参考上面的代码。</p><p><strong>注意</strong>:这个<code>html-withimg-loader</code>必须要配合处理图片的loader——<code>asset  module</code> 一起使用，因为真正能够加载图片的还是<code>asset module</code>，<code>html-withimg-loader</code>用来处理路径问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>:&#123;<br>    <span class="hljs-attr">rules</span>:[<br>        &#123;<br>            <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(html|htm)/i</span>,<br>            use:<span class="hljs-string">&#x27;html-withimg-loader&#x27;</span><br>        &#125;<br>    ]  <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="asset-inline"><a href="#asset-inline" class="headerlink" title="asset/inline"></a>asset/inline</h4><p>asset/inline输出的 data URI，默认是呈现为使用 Base64 算法编码的文件内容。</p><p><strong>webpack.config.js</strong></p><blockquote><p>关于<a href="https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition">rules.parser</a></p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs diff">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br>  &#125;,<br>  module: &#123;<br>    rules: [<br><span class="hljs-addition">+      &#123;</span><br><span class="hljs-addition">+       test: /\.svg/,</span><br><span class="hljs-addition">+       type: &#x27;asset/inline&#x27;,</span><br><span class="hljs-addition">+parser:&#123;</span><br><span class="hljs-addition">+dataUrlCondition:</span><br><span class="hljs-addition">+maxSize:10000</span><br><span class="hljs-addition">+      //表示10kb</span><br><span class="hljs-addition">+       &#125;</span><br><span class="hljs-addition">+     &#125;,</span><br><br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>maxSize为10000，表示小于10kb将其转换为base64格式，大于则按照asset/resource来处理。一般只对较小的图片进行这种操作，因为转为base64格式后，图片会以base64格式来存在js中。</p><h3 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h3><h4 id="使用source-map-追踪错误"><a href="#使用source-map-追踪错误" class="headerlink" title="使用source map 追踪错误"></a>使用source map 追踪错误</h4><p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 <code>bundle.js</code>。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。</p><p>为了更容易地追踪 error 和 warning，JavaScript 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps">source maps</a> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p><p>source map 有许多 <a href="https://webpack.docschina.org/configuration/devtool">可用选项</a>，请务必仔细阅读它们，以便可以根据需要进行配置。</p><p>对于本指南，我们将使用 <code>inline-source-map</code> 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：</p><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br><span class="hljs-addition">+  devtool: &#x27;inline-source-map&#x27;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure><h3 id="使用-webpack-dev-server"><a href="#使用-webpack-dev-server" class="headerlink" title="使用 webpack-dev-server"></a>使用 webpack-dev-server</h3><p><code>webpack-dev-server</code> 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev webpack-dev-server<br></code></pre></td></tr></table></figure><p>修改配置文件，告知 dev server，从什么位置查找文件：</p><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs diff"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br>   devtool: &#x27;inline-source-map&#x27;,<br><span class="hljs-addition">+  devServer: &#123;</span><br><span class="hljs-addition">+    contentBase: &#x27;./dist&#x27;,</span><br><span class="hljs-addition">+  &#125;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure><p>以上配置告知 <code>webpack-dev-server</code>，将 <code>dist</code> 目录下的文件 serve 到 <code>localhost:8080</code> 下。（serve，将资源作为 server 的可访问文件）</p><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs diff"> &#123;<br>   &quot;name&quot;: &quot;webpack-demo&quot;,<br>   &quot;version&quot;: &quot;1.0.0&quot;,<br>   &quot;description&quot;: &quot;&quot;,<br>   &quot;private&quot;: true,<br>   &quot;scripts&quot;: &#123;<br>     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,<br>     &quot;watch&quot;: &quot;webpack --watch&quot;,<br><span class="hljs-addition">+    &quot;start&quot;: &quot;webpack serve --open&quot;,</span><br>     &quot;build&quot;: &quot;webpack&quot;<br>   &#125;,<br>   &quot;keywords&quot;: [],<br>   &quot;author&quot;: &quot;&quot;,<br>   &quot;license&quot;: &quot;ISC&quot;,<br>   &quot;devDependencies&quot;: &#123;<br>     &quot;html-webpack-plugin&quot;: &quot;^4.5.0&quot;,<br>     &quot;webpack&quot;: &quot;^5.4.0&quot;,<br>     &quot;webpack-cli&quot;: &quot;^4.2.0&quot;,<br>     &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;<br>   &#125;,<br>   &quot;dependencies&quot;: &#123;<br>     &quot;lodash&quot;: &quot;^4.17.20&quot;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>现在，在命令行中运行 <code>npm start</code>，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！</p><p><code>webpack-dev-server</code> 具有许多可配置的选项。关于其他更多配置，请查看 <a href="https://webpack.docschina.org/configuration/dev-server">配置文档</a>。</p><blockquote><h6 id="Warning-2"><a href="#Warning-2" class="headerlink" title="Warning"></a>Warning</h6><p>webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 <a href="https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-"><code>publicPath</code></a> 选项进行修改。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
